var OHLCV_INDICATORS;

/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var t = {
        /******/ // define getter functions for harmony exports
        /******/ d: (e, r) => {
            /******/ for (var n in r) 
            /******/ t.o(r, n) && !t.o(e, n) && 
            /******/ Object.defineProperty(e, n, {
                enumerable: !0,
                get: r[n]
            })
            /******/;
            /******/        },
        /******/ o: (t, e) => Object.prototype.hasOwnProperty.call(t, e)
        /******/ ,
        /******/ // define __esModule on exports
        /******/ r: t => {
            /******/ "undefined" != typeof Symbol && Symbol.toStringTag && 
            /******/ Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            })
            /******/ , Object.defineProperty(t, "__esModule", {
                value: !0
            });
        }
        /******/    }, e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/define property getters */
    /******/    
    // This entry need to be wrapped in an IIFE because it declares 'OHLCV_INDICATORS' on top-level, which conflicts with the current library output.
    (() => {
        // ./src/utilities/validators.js
        function r(t) {
            return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, r(t);
        }
        function n(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return o(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, i = function() {};
                    return {
                        s: i,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: i
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a, u = !0, c = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return u = t.done, t;
                },
                e: function(t) {
                    c = !0, a = t;
                },
                f: function() {
                    try {
                        u || null == r.return || r.return();
                    } finally {
                        if (c) throw a;
                    }
                }
            };
        }
        function o(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ESM COMPAT FLAG
        t.r(e), 
        // EXPORTS
        t.d(e, {
            default: () => /* binding */ jr
        });
        var i = function(t) {
            if (!0 === t.isComputed) throw Error('ohlcv is already computed, you can not add new indicators after "compute", "getLastValues" , "getDataAsCols" or "getData" methods are called.');
        }, a = function(t, e, r) {
            if (!Array.isArray(t)) throw new Error('Param "'.concat(e, '" must be an array in "').concat(r, '".'));
            return !0;
        }, u = function(t, e, n) {
            if (!Boolean(t) || "object" == !r(t)) throw new Error('Param "'.concat(e, '" must be an object in "').concat(n, '".'));
            return !0;
        }, c = function(t, e, r) {
            if ("boolean" != typeof t) throw new Error('Param "'.concat(e, '" must be an boolean in "').concat(r, '".'));
            return !0;
        }, l = function(t, e, r, n) {
            u(e, "options", "".concat(n, ".").concat(r, ".validateNumber"));
            var o = e.allowDecimals, i = void 0 !== o && o, a = e.min, c = e.max, l = i ? "number" : "integer";
            if ("number" != typeof t || !1 === i && !Number.isInteger(t)) throw new Error('Param "'.concat(r, '" must be an integer in "').concat(n, '".'));
            if ("number" != typeof a || "number" != typeof c || a >= c) throw new Error('Param "min" must be a valid '.concat(l, ' lower than "max" "').concat(n, ".").concat(r, '.validateNumber".'));
            if (t < a) throw new Error('Param "'.concat(r, '" must be an ').concat(l, " greater than or equal to ").concat(a, ' in "').concat(n, '".'));
            if (t > c) throw new Error('Param "'.concat(r, '" must be an ').concat(l, " lower than or equal to ").concat(c, ' in "').concat(n, '".'));
            return !0;
        }, // 0, 1, 2 or 3
        // The maximum value of DP and Big.DP.
        s = 1e6, // 0 to 1000000
        // The maximum magnitude of the exponent argument to the pow method.
        f = 1e6, // true or false
        /**************************************************************************************************/
        // Error messages.
        y = "[big.js] ", h = y + "Invalid ", p = h + "decimal places", v = h + "rounding mode", m = y + "Division by zero", 
        // The shared prototype object.
        d = {}, b = void 0, g = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
        /*
 * Round Big x to a maximum of sd significant digits using rounding mode rm.
 *
 * x {Big} The Big to round.
 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 * [more] {boolean} Whether the result of division was truncated.
 */
        function w(t, e, r, n) {
            var o = t.c;
            if (r === b && (r = t.constructor.RM), 0 !== r && 1 !== r && 2 !== r && 3 !== r) throw Error(v);
            if (e < 1) n = 3 === r && (n || !!o[0]) || 0 === e && (1 === r && o[0] >= 5 || 2 === r && (o[0] > 5 || 5 === o[0] && (n || o[1] !== b))), 
            o.length = 1, n ? (
            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            t.e = t.e - e + 1, o[0] = 1) : 
            // Zero.
            o[0] = t.e = 0; else if (e < o.length) {
                // Round up?
                if (
                // xc[sd] is the digit after the digit that may be rounded up.
                n = 1 === r && o[e] >= 5 || 2 === r && (o[e] > 5 || 5 === o[e] && (n || o[e + 1] !== b || 1 & o[e - 1])) || 3 === r && (n || !!o[0]), 
                // Remove any digits after the required precision.
                o.length = e, n) 
                // Rounding up may mean the previous digit has to be rounded up.
                for (;++o[--e] > 9; ) if (o[e] = 0, 0 === e) {
                    ++t.e, o.unshift(1);
                    break;
                }
                // Remove trailing zeros.
                                for (e = o.length; !o[--e]; ) o.pop();
            }
            return t;
        }
        /*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 */        function O(t, e, r) {
            var n = t.e, o = t.c.join(""), i = o.length;
            // Exponential notation?
                        if (e) o = o.charAt(0) + (i > 1 ? "." + o.slice(1) : "") + (n < 0 ? "e" : "e+") + n;
            // Normal notation.
             else if (n < 0) {
                for (;++n; ) o = "0" + o;
                o = "0." + o;
            } else if (n > 0) if (++n > i) for (n -= i; n--; ) o += "0"; else n < i && (o = o.slice(0, n) + "." + o.slice(n)); else i > 1 && (o = o.charAt(0) + "." + o.slice(1));
            return t.s < 0 && r ? "-" + o : o;
        }
        // Prototype/instance methods
        /*
 * Return a new Big whose value is the absolute value of this Big.
 */        d.abs = function() {
            var t = new this.constructor(this);
            return t.s = 1, t;
        }, 
        /*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
 */
        d.cmp = function(t) {
            var e, r = this, n = r.c, o = (t = new r.constructor(t)).c, i = r.s, a = t.s, u = r.e, c = t.e;
            // Either zero?
                        if (!n[0] || !o[0]) return n[0] ? i : o[0] ? -a : 0;
            // Signs differ?
                        if (i != a) return i;
            // Compare exponents.
            if (e = i < 0, u != c) return u > c ^ e ? 1 : -1;
            // Compare digit by digit.
            for (a = (u = n.length) < (c = o.length) ? u : c, i = -1; ++i < a; ) if (n[i] != o[i]) return n[i] > o[i] ^ e ? 1 : -1;
            // Compare lengths.
                        return u == c ? 0 : u > c ^ e ? 1 : -1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        d.div = function(t) {
            var e = this, r = e.constructor, n = e.c, // dividend
            o = (t = new r(t)).c, // divisor
            i = e.s == t.s ? 1 : -1, a = r.DP;
            if (a !== ~~a || a < 0 || a > s) throw Error(p);
            // Divisor is zero?
                        if (!o[0]) throw Error(m);
            // Dividend is 0? Return +-0.
                        if (!n[0]) return t.s = i, t.c = [ t.e = 0 ], t;
            var u, c, l, f, y, h = o.slice(), v = u = o.length, d = n.length, g = n.slice(0, u), // remainder
            O = g.length, S = t, // quotient
            j = S.c = [], P = 0, _ = a + (S.e = e.e - t.e) + 1;
 // precision of the result
                        // Add zeros to make remainder as long as divisor.
            for (S.s = i, i = _ < 0 ? 0 : _, 
            // Create version of divisor with leading zero.
            h.unshift(0); O++ < u; ) g.push(0);
            do {
                // n is how many times the divisor goes into current remainder.
                for (l = 0; l < 10; l++) {
                    // Compare divisor and remainder.
                    if (u != (O = g.length)) f = u > O ? 1 : -1; else for (y = -1, f = 0; ++y < u; ) if (o[y] != g[y]) {
                        f = o[y] > g[y] ? 1 : -1;
                        break;
                    }
                    // If divisor < remainder, subtract divisor from remainder.
                                        if (!(f < 0)) break;
                    // Remainder can't be more than 1 digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for (c = O == u ? o : h; O; ) {
                        if (g[--O] < c[O]) {
                            for (y = O; y && !g[--y]; ) g[y] = 9;
                            --g[y], g[O] += 10;
                        }
                        g[O] -= c[O];
                    }
                    for (;!g[0]; ) g.shift();
                }
                // Add the digit n to the result array.
                                j[P++] = f ? l : ++l, 
                // Update the remainder.
                g[0] && f ? g[O] = n[v] || 0 : g = [ n[v] ];
            } while ((v++ < d || g[0] !== b) && i--);
            // Leading zero? Do not remove if result is simply zero (qi == 1).
                        return j[0] || 1 == P || (
            // There can't be more than one zero.
            j.shift(), S.e--, _--), 
            // Round?
            P > _ && w(S, _, r.RM, g[0] !== b), S;
        }, 
        /*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */
        d.eq = function(t) {
            return 0 === this.cmp(t);
        }, 
        /*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */
        d.gt = function(t) {
            return this.cmp(t) > 0;
        }, 
        /*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */
        d.gte = function(t) {
            return this.cmp(t) > -1;
        }, 
        /*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */
        d.lt = function(t) {
            return this.cmp(t) < 0;
        }, 
        /*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */
        d.lte = function(t) {
            return this.cmp(t) < 1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */
        d.minus = d.sub = function(t) {
            var e, r, n, o, i = this, a = i.constructor, u = i.s, c = (t = new a(t)).s;
            // Signs differ?
                        if (u != c) return t.s = -c, i.plus(t);
            var l = i.c.slice(), s = i.e, f = t.c, y = t.e;
            // Either zero?
                        if (!l[0] || !f[0]) return f[0] ? t.s = -c : l[0] ? t = new a(i) : t.s = 1, 
            t;
            // Determine which is the bigger number. Prepend zeros to equalise exponents.
                        if (u = s - y) {
                for ((o = u < 0) ? (u = -u, n = l) : (y = s, n = f), n.reverse(), c = u; c--; ) n.push(0);
                n.reverse();
            } else for (
            // Exponents equal. Check digit by digit.
            r = ((o = l.length < f.length) ? l : f).length, u = c = 0; c < r; c++) if (l[c] != f[c]) {
                o = l[c] < f[c];
                break;
            }
            // x < y? Point xc to the array of the bigger number.
                        /*
   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
   * needs to start at yc.length.
   */
            if (o && (n = l, l = f, f = n, t.s = -t.s), (c = (r = f.length) - (e = l.length)) > 0) for (;c--; ) l[e++] = 0;
            // Subtract yc from xc.
                        for (c = e; r > u; ) {
                if (l[--r] < f[r]) {
                    for (e = r; e && !l[--e]; ) l[e] = 9;
                    --l[e], l[r] += 10;
                }
                l[r] -= f[r];
            }
            // Remove trailing zeros.
                        for (;0 === l[--c]; ) l.pop();
            // Remove leading zeros and adjust exponent accordingly.
                        for (;0 === l[0]; ) l.shift(), --y;
            return l[0] || (
            // n - n = +0
            t.s = 1, 
            // Result must be zero.
            l = [ y = 0 ]), t.c = l, t.e = y, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */
        d.mod = function(t) {
            var e, r = this, n = r.constructor, o = r.s, i = (t = new n(t)).s;
            if (!t.c[0]) throw Error(m);
            return r.s = t.s = 1, e = 1 == t.cmp(r), r.s = o, t.s = i, e ? new n(r) : (o = n.DP, 
            i = n.RM, n.DP = n.RM = 0, r = r.div(t), n.DP = o, n.RM = i, this.minus(r.times(t)));
        }, 
        /*
 * Return a new Big whose value is the value of this Big negated.
 */
        d.neg = function() {
            var t = new this.constructor(this);
            return t.s = -t.s, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */
        d.plus = d.add = function(t) {
            var e, r, n, o = this, i = o.constructor;
            // Signs differ?
            if (t = new i(t), o.s != t.s) return t.s = -t.s, o.minus(t);
            var a = o.e, u = o.c, c = t.e, l = t.c;
            // Either zero?
                        if (!u[0] || !l[0]) return l[0] || (u[0] ? t = new i(o) : t.s = o.s), 
            t;
            // Prepend zeros to equalise exponents.
            // Note: reverse faster than unshifts.
            if (u = u.slice(), e = a - c) {
                for (e > 0 ? (c = a, n = l) : (e = -e, n = u), n.reverse(); e--; ) n.push(0);
                n.reverse();
            }
            // Point xc to the longer array.
                        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
            for (u.length - l.length < 0 && (n = l, l = u, u = n), e = l.length, r = 0; e; u[e] %= 10) r = (u[--e] = u[e] + l[e] + r) / 10 | 0;
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                        // Remove trailing zeros.
            for (r && (u.unshift(r), ++c), e = u.length; 0 === u[--e]; ) u.pop();
            return t.c = u, t.e = c, t;
        }, 
        /*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */
        d.pow = function(t) {
            var e = this, r = new e.constructor("1"), n = r, o = t < 0;
            if (t !== ~~t || t < -1e6 || t > f) throw Error(h + "exponent");
            for (o && (t = -t); 1 & t && (n = n.times(e)), t >>= 1; ) e = e.times(e);
            return o ? r.div(n) : n;
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        d.prec = function(t, e) {
            if (t !== ~~t || t < 1 || t > s) throw Error(h + "precision");
            return w(new this.constructor(this), t, e);
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
 * using rounding mode rm, or Big.RM if rm is not specified.
 * If dp is negative, round to an integer which is a multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        d.round = function(t, e) {
            if (t === b) t = 0; else if (t !== ~~t || t < -s || t > s) throw Error(p);
            return w(new this.constructor(this), t + this.e + 1, e);
        }, 
        /*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        d.sqrt = function() {
            var t, e, r, n = this, o = n.constructor, i = n.s, a = n.e, u = new o("0.5");
            // Zero?
                        if (!n.c[0]) return new o(n);
            // Negative?
                        if (i < 0) throw Error(y + "No square root");
            // Estimate.
                        // Math.sqrt underflow/overflow?
            // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
            0 === (i = Math.sqrt(n + "")) || i === 1 / 0 ? ((e = n.c.join("")).length + a & 1 || (e += "0"), 
            a = ((a + 1) / 2 | 0) - (a < 0 || 1 & a), t = new o(((i = Math.sqrt(e)) == 1 / 0 ? "5e" : (i = i.toExponential()).slice(0, i.indexOf("e") + 1)) + a)) : t = new o(i + ""), 
            a = t.e + (o.DP += 4);
            // Newton-Raphson iteration.
            do {
                r = t, t = u.times(r.plus(n.div(r)));
            } while (r.c.slice(0, a).join("") !== t.c.slice(0, a).join(""));
            return w(t, (o.DP -= 4) + t.e + 1, o.RM);
        }, 
        /*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */
        d.times = d.mul = function(t) {
            var e, r = this, n = r.constructor, o = r.c, i = (t = new n(t)).c, a = o.length, u = i.length, c = r.e, l = t.e;
            // Determine sign of result.
                        // Return signed 0 if either 0.
            if (t.s = r.s == t.s ? 1 : -1, !o[0] || !i[0]) return t.c = [ t.e = 0 ], t;
            // Initialise exponent of result as x.e + y.e.
                        // Initialise coefficient array of result with zeros.
            for (t.e = c + l, 
            // If array xc has fewer digits than yc, swap xc and yc, and lengths.
            a < u && (e = o, o = i, i = e, l = a, a = u, u = l), e = new Array(l = a + u); l--; ) e[l] = 0;
            // Multiply.
            // i is initially xc.length.
                        for (c = u; c--; ) {
                // a is yc.length.
                for (u = 0, l = a + c; l > c; ) 
                // Current sum of products at this digit position, plus carry.
                u = e[l] + i[c] * o[l - c - 1] + u, e[l--] = u % 10, 
                // carry
                u = u / 10 | 0;
                e[l] = u;
            }
            // Increment result exponent if there is a final carry, otherwise remove leading zero.
                        // Remove trailing zeros.
            for (u ? ++t.e : e.shift(), c = e.length; !e[--c]; ) e.pop();
            return t.c = e, t;
        }, 
        /*
 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        d.toExponential = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== b) {
                if (t !== ~~t || t < 0 || t > s) throw Error(p);
                for (r = w(new r.constructor(r), ++t, e); r.c.length < t; ) r.c.push(0);
            }
            return O(r, !0, !!n);
        }, 
        /*
 * Return a string representing the value of this Big in normal notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */
        d.toFixed = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== b) {
                if (t !== ~~t || t < 0 || t > s) throw Error(p);
                // x.e may have changed if the value is rounded up.
                for (t = t + (r = w(new r.constructor(r), t + r.e + 1, e)).e + 1; r.c.length < t; ) r.c.push(0);
            }
            return O(r, !1, !!n);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */
        d[Symbol.for("nodejs.util.inspect.custom")] = d.toJSON = d.toString = function() {
            var t = this, e = t.constructor;
            return O(t, t.e <= e.NE || t.e >= e.PE, !!t.c[0]);
        }, 
        /*
 * Return the value of this Big as a primitve number.
 */
        d.toNumber = function() {
            var t = Number(O(this, !0, !0));
            if (!0 === this.constructor.strict && !this.eq(t.toString())) throw Error(y + "Imprecise conversion");
            return t;
        }, 
        /*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * rounding mode rm, or Big.RM if rm is not specified.
 * Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        d.toPrecision = function(t, e) {
            var r = this, n = r.constructor, o = r.c[0];
            if (t !== b) {
                if (t !== ~~t || t < 1 || t > s) throw Error(h + "precision");
                for (r = w(new n(r), t, e); r.c.length < t; ) r.c.push(0);
            }
            return O(r, t <= r.e || r.e <= n.NE || r.e >= n.PE, !!o);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */
        d.valueOf = function() {
            var t = this, e = t.constructor;
            if (!0 === e.strict) throw Error(y + "valueOf disallowed");
            return O(t, t.e <= e.NE || t.e >= e.PE, !0);
        };
        // Export
        (
        /*
 * Create and return a Big constructor.
 */
        function t() {
            /*
   * The Big constructor and exported function.
   * Create and return a new instance of a Big number object.
   *
   * n {number|string|Big} A numeric value.
   */
            function e(r) {
                var n = this;
                // Enable constructor usage without new.
                                if (!(n instanceof e)) return r === b ? t() : new e(r);
                // Duplicate.
                                if (r instanceof e) n.s = r.s, n.e = r.e, n.c = r.c.slice(); else {
                    if ("string" != typeof r) {
                        if (!0 === e.strict && "bigint" != typeof r) throw TypeError(h + "value");
                        // Minus zero?
                                                r = 0 === r && 1 / r < 0 ? "-0" : String(r);
                    }
                    !
                    /*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */
                    function(t, e) {
                        var r, n, o;
                        if (!g.test(e)) throw Error(h + "number");
                        // Determine sign.
                                                // Decimal point?
                        t.s = "-" == e.charAt(0) ? (e = e.slice(1), -1) : 1, (r = e.indexOf(".")) > -1 && (e = e.replace(".", ""));
                        // Exponential form?
                                                (n = e.search(/e/i)) > 0 ? (
                        // Determine exponent.
                        r < 0 && (r = n), r += +e.slice(n + 1), e = e.substring(0, n)) : r < 0 && (
                        // Integer.
                        r = e.length);
                        // Determine leading zeros.
                        for (o = e.length, n = 0; n < o && "0" == e.charAt(n); ) ++n;
                        if (n == o) 
                        // Zero.
                        t.c = [ t.e = 0 ]; else {
                            // Determine trailing zeros.
                            for (;o > 0 && "0" == e.charAt(--o); ) ;
                            // Convert string to array of digits without leading/trailing zeros.
                            for (t.e = r - n - 1, t.c = [], r = 0; n <= o; ) t.c[r++] = +e.charAt(n++);
                        }
                    }(n, r);
                }
                // Retain a reference to this Big constructor.
                // Shadow Big.prototype.constructor which points to Object.
                                n.constructor = e;
            }
            return e.prototype = d, e.DP = 20, e.RM = 1, e.NE = -7, e.PE = 21, e.strict = false, 
            e.roundDown = 0, e.roundHalfUp = 1, e.roundHalfEven = 2, e.roundUp = 3, e;
        })();
        /// <reference types="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts" />
        /* harmony default export */        // ./node_modules/trading-signals/dist/error/NotEnoughDataError.js
        function S(t) {
            return S = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, S(t);
        }
        function j(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, P(n.key), n);
            }
        }
        function P(t) {
            var e = function(t, e) {
                if ("object" != S(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != S(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == S(e) ? e : e + "";
        }
        function _(t, e, r) {
            return e = E(e), function(t, e) {
                if (e && ("object" == S(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, T() ? Reflect.construct(e, r || [], E(t).constructor) : e.apply(t, r));
        }
        function N(t) {
            var e = "function" == typeof Map ? new Map : void 0;
            return N = function(t) {
                if (null === t || !function(t) {
                    try {
                        return -1 !== Function.toString.call(t).indexOf("[native code]");
                    } catch (e) {
                        return "function" == typeof t;
                    }
                }(t)) return t;
                if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, r);
                }
                function r() {
                    return function(t, e, r) {
                        if (T()) return Reflect.construct.apply(null, arguments);
                        var n = [ null ];
                        n.push.apply(n, e);
                        var o = new (t.bind.apply(t, n));
                        return r && A(o, r.prototype), o;
                    }(t, arguments, E(this).constructor);
                }
                return r.prototype = Object.create(t.prototype, {
                    constructor: {
                        value: r,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), A(r, t);
            }, N(t);
        }
        function T() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (T = function() {
                return !!t;
            })();
        }
        function A(t, e) {
            return A = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, A(t, e);
        }
        function E(t) {
            return E = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, E(t);
        }
        var k =  function(t) {
            function e() {
                var t, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Not enough data";
                return function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, e), t = _(this, e, [ r ]), Object.setPrototypeOf(t, (this instanceof e ? this.constructor : void 0).prototype), 
                t.name = "NotEnoughDataError", t;
            }
            return function(t, e) {
                if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                t.prototype = Object.create(e && e.prototype, {
                    constructor: {
                        value: t,
                        writable: !0,
                        configurable: !0
                    }
                }), Object.defineProperty(t, "prototype", {
                    writable: !1
                }), e && A(t, e);
            }(e, t), r = e, n && j(r.prototype, n), o && j(r, o), Object.defineProperty(r, "prototype", {
                writable: !1
            }), r;
            var r, n, o;
        }( N(Error));
        // ./node_modules/trading-signals/dist/Indicator.js
        function x(t) {
            return x = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, x(t);
        }
        function M(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function I(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, C(n.key), n);
            }
        }
        function D(t, e, r) {
            return e && I(t.prototype, e), r && I(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function R(t, e, r) {
            return (e = C(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function C(t) {
            var e = function(t, e) {
                if ("object" != x(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != x(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == x(e) ? e : e + "";
        }
        var F =  function() {
            return D((function t() {
                M(this, t), R(this, "previousHighest", void 0), R(this, "highest", void 0), R(this, "previousLowest", void 0), 
                R(this, "lowest", void 0), R(this, "previousResult", void 0), R(this, "result", void 0);
            }), [ {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new k;
                    return this.result;
                }
            }, {
                key: "setResult",
                value: function(t, e) {
                    return e && (this.highest = this.previousHighest, this.lowest = this.previousLowest, 
                    this.result = this.previousResult), void 0 === this.highest ? this.highest = t : t > this.highest ? (this.previousHighest = this.highest, 
                    this.highest = t) : this.previousHighest = this.highest, void 0 === this.lowest ? this.lowest = t : t < this.lowest ? (this.previousLowest = this.lowest, 
                    this.lowest = t) : this.previousLowest = this.lowest, this.previousResult = this.result, 
                    this.result = t;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/MA/MovingAverage.js
        function L(t) {
            return L = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, L(t);
        }
        function B(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function H(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, K(n.key), n);
            }
        }
        function V(t, e, r) {
            return e && H(t.prototype, e), r && H(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function U(t, e, r) {
            return e = $(e), function(t, e) {
                if (e && ("object" == L(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, q() ? Reflect.construct(e, r || [], $(t).constructor) : e.apply(t, r));
        }
        function q() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (q = function() {
                return !!t;
            })();
        }
        function $(t) {
            return $ = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, $(t);
        }
        function z(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && G(t, e);
        }
        function G(t, e) {
            return G = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, G(t, e);
        }
        function Y(t, e, r) {
            return (e = K(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function K(t) {
            var e = function(t, e) {
                if ("object" != L(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != L(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == L(e) ? e : e + "";
        }
        var J =  function(t) {
            function e(t) {
                var r;
                return B(this, e), Y(r = U(this, e), "interval", void 0), r.interval = t, r;
            }
            return z(e, t), V(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }(F);
        // ./node_modules/trading-signals/dist/SMA/SMA.js
        function Z(t) {
            return Z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Z(t);
        }
        function Q(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function W(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, at(n.key), n);
            }
        }
        function X(t, e, r) {
            return e && W(t.prototype, e), r && W(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function tt(t, e, r) {
            return e = rt(e), function(t, e) {
                if (e && ("object" == Z(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, et() ? Reflect.construct(e, r || [], rt(t).constructor) : e.apply(t, r));
        }
        function et() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (et = function() {
                return !!t;
            })();
        }
        function rt(t) {
            return rt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, rt(t);
        }
        function nt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && ot(t, e);
        }
        function ot(t, e) {
            return ot = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, ot(t, e);
        }
        function it(t, e, r) {
            return (e = at(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function at(t) {
            var e = function(t, e) {
                if ("object" != Z(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Z(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Z(e) ? e : e + "";
        }
        var ut =  function(t) {
            function e() {
                var t;
                Q(this, e);
                for (var r = arguments.length, n = new Array(r), o = 0; o < r; o++) n[o] = arguments[o];
                return it(t = tt(this, e, [].concat(n)), "prices", []), t;
            }
            return nt(e, t), X(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t), 
                    this.prices.length > this.interval && this.prices.shift(), this.prices.length === this.interval) {
                        var r = this.prices.reduce((function(t, e) {
                            return t + e;
                        }), 0);
                        return this.setResult(r / this.prices.length, e);
                    }
                }
            } ]);
        }(J);
        // ./node_modules/trading-signals/dist/WSMA/WSMA.js
        function ct(t) {
            return ct = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ct(t);
        }
        function lt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function st(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, bt(n.key), n);
            }
        }
        function ft(t, e, r) {
            return e && st(t.prototype, e), r && st(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function yt(t, e, r) {
            return e = pt(e), function(t, e) {
                if (e && ("object" == ct(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, ht() ? Reflect.construct(e, r || [], pt(t).constructor) : e.apply(t, r));
        }
        function ht() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (ht = function() {
                return !!t;
            })();
        }
        function pt(t) {
            return pt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, pt(t);
        }
        function vt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && mt(t, e);
        }
        function mt(t, e) {
            return mt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, mt(t, e);
        }
        function dt(t, e, r) {
            return (e = bt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function bt(t) {
            var e = function(t, e) {
                if ("object" != ct(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != ct(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == ct(e) ? e : e + "";
        }
        var gt =  function(t) {
            function e(t) {
                var r;
                return lt(this, e), dt(r = yt(this, e), "interval", void 0), dt(r, "indicator", void 0), 
                dt(r, "smoothingFactor", void 0), r.interval = t, r.indicator = new ut(t), r.smoothingFactor = 1 / r.interval, 
                r;
            }
            return vt(e, t), ft(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = this.indicator.update(t);
                    if (e && void 0 !== this.previousResult) {
                        var n = (t - this.previousResult) * this.smoothingFactor;
                        return this.setResult(n + this.previousResult, e);
                    }
                    if (!e && void 0 !== this.result) {
                        var o = (t - this.result) * this.smoothingFactor;
                        return this.setResult(o + this.result, e);
                    }
                    if (void 0 === this.result && void 0 !== r) return this.setResult(r, e);
                }
            } ]);
        }(F);
        function wt(t) {
            return t.length ? t.reduce((function(t, e) {
                return t + e;
            }), 0) / t.length : 0;
        }
        // ./node_modules/trading-signals/dist/BBANDS/BollingerBands.js
        function Ot(t) {
            return Ot = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ot(t);
        }
        function St(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function jt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Nt(n.key), n);
            }
        }
        function Pt(t, e, r) {
            return e && jt(t.prototype, e), r && jt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function _t(t, e, r) {
            return (e = Nt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Nt(t) {
            var e = function(t, e) {
                if ("object" != Ot(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ot(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ot(e) ? e : e + "";
        }
        var Tt =  function() {
            return Pt((function t(e) {
                var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                St(this, t), _t(this, "interval", void 0), _t(this, "deviationMultiplier", void 0), 
                _t(this, "prices", []), _t(this, "result", void 0), this.interval = e, this.deviationMultiplier = r;
            }), [ {
                key: "update",
                value: function(t) {
                    if (this.prices.push(t), this.prices.length > this.interval) {
                        this.prices.shift();
                        var e = wt(this.prices), r = function(t, e) {
                            var r = e || wt(t), n = wt(t.map((function(t) {
                                return t - r;
                            })).map((function(t) {
                                return t * t;
                            })));
                            return Math.sqrt(n);
                        }(this.prices, e);
                        return this.result = {
                            lower: e - r * this.deviationMultiplier,
                            middle: e,
                            upper: e + r * this.deviationMultiplier
                        };
                    }
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new k;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/EMA/EMA.js
        function At(t) {
            return At = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, At(t);
        }
        function Et(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function kt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Lt(n.key), n);
            }
        }
        function xt(t, e, r) {
            return e && kt(t.prototype, e), r && kt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Mt(t, e, r) {
            return e = Dt(e), function(t, e) {
                if (e && ("object" == At(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, It() ? Reflect.construct(e, r || [], Dt(t).constructor) : e.apply(t, r));
        }
        function It() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (It = function() {
                return !!t;
            })();
        }
        function Dt(t) {
            return Dt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, Dt(t);
        }
        function Rt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && Ct(t, e);
        }
        function Ct(t, e) {
            return Ct = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, Ct(t, e);
        }
        function Ft(t, e, r) {
            return (e = Lt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Lt(t) {
            var e = function(t, e) {
                if ("object" != At(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != At(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == At(e) ? e : e + "";
        }
        var Bt =  function(t) {
            function e(t) {
                var r;
                return Et(this, e), Ft(r = Mt(this, e, [ t ]), "interval", void 0), Ft(r, "pricesCounter", 0), 
                Ft(r, "weightFactor", void 0), r.interval = t, r.weightFactor = 2 / (r.interval + 1), 
                r;
            }
            return Rt(e, t), xt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return e ? e && 0 === this.pricesCounter && this.pricesCounter++ : this.pricesCounter++, 
                    e && void 0 !== this.previousResult ? this.setResult(t * this.weightFactor + this.previousResult * (1 - this.weightFactor), e) : this.setResult(t * this.weightFactor + (void 0 !== this.result ? this.result : t) * (1 - this.weightFactor), e);
                }
            }, {
                key: "getResult",
                value: function() {
                    if (this.pricesCounter < this.interval) throw new k;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    try {
                        return this.getResult(), !0;
                    } catch (t) {
                        return !1;
                    }
                }
            } ]);
        }(J);
        // ./node_modules/trading-signals/dist/MACD/MACD.js
        function Ht(t) {
            return Ht = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ht(t);
        }
        function Vt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Ut(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, zt(n.key), n);
            }
        }
        function qt(t, e, r) {
            return e && Ut(t.prototype, e), r && Ut(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function $t(t, e, r) {
            return (e = zt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function zt(t) {
            var e = function(t, e) {
                if ("object" != Ht(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ht(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ht(e) ? e : e + "";
        }
        var Gt =  function() {
            return qt((function t(e, r, n) {
                Vt(this, t), $t(this, "short", void 0), $t(this, "long", void 0), $t(this, "signal", void 0), 
                $t(this, "prices", []), $t(this, "result", void 0), this.short = e, this.long = r, 
                this.signal = n;
            }), [ {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new k;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t);
                    var r = this.short.update(t, e), n = this.long.update(t, e);
                    if (this.prices.length > this.long.interval && this.prices.shift(), this.prices.length === this.long.interval) {
                        var o = r - n, i = this.signal.update(o, e);
                        return this.result = {
                            histogram: o - i,
                            macd: o,
                            signal: i
                        };
                    }
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/RSI/RSI.js
        function Yt(t) {
            return Yt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Yt(t);
        }
        function Kt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Jt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, ne(n.key), n);
            }
        }
        function Zt(t, e, r) {
            return e && Jt(t.prototype, e), r && Jt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Qt(t, e, r) {
            return e = Xt(e), function(t, e) {
                if (e && ("object" == Yt(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, Wt() ? Reflect.construct(e, r || [], Xt(t).constructor) : e.apply(t, r));
        }
        function Wt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (Wt = function() {
                return !!t;
            })();
        }
        function Xt(t) {
            return Xt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, Xt(t);
        }
        function te(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && ee(t, e);
        }
        function ee(t, e) {
            return ee = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, ee(t, e);
        }
        function re(t, e, r) {
            return (e = ne(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function ne(t) {
            var e = function(t, e) {
                if ("object" != Yt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Yt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Yt(e) ? e : e + "";
        }
        var oe =  function(t) {
            function e(t) {
                var r, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : gt;
                return Kt(this, e), re(r = Qt(this, e), "interval", void 0), re(r, "previousPrices", []), 
                re(r, "avgGain", void 0), re(r, "avgLoss", void 0), re(r, "maxValue", 100), r.interval = t, 
                r.avgGain = new n(r.interval), r.avgLoss = new n(r.interval), r;
            }
            return te(e, t), Zt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.previousPrices.length && e ? this.previousPrices[this.previousPrices.length - 1] = t : this.previousPrices.push(t), 
                    !(this.previousPrices.length < 2)) {
                        var r = t, n = this.previousPrices[this.previousPrices.length - 2];
                        if (r > n ? (this.avgLoss.update(0, e), this.avgGain.update(t - n, e)) : (this.avgLoss.update(n - r, e), 
                        this.avgGain.update(0, e)), this.avgGain.isStable) {
                            var o = this.avgLoss.getResult();
                            if (0 === o) return this.setResult(100, e);
                            var i = this.avgGain.getResult() / o;
                            return this.setResult(this.maxValue - this.maxValue / (i + 1), e);
                        }
                    }
                }
            } ]);
        }(F);
        // ./src/oscillators/rsi.js
        function ie(t) {
            return ie = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ie(t);
        }
        function ae(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != ie(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != ie(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == ie(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var ue = {
            ema: Bt,
            sma: ut
        }, ce = function(t, e, r, n, o) {
            var i = o.target, a = o.lag, u = t.verticalOhlcv, c = t.instances, l = t.priceBased, s = "string" == typeof i && u.hasOwnProperty(i) && "close" !== i ? "_".concat(i) : "", f = "".concat(r, "_").concat(n).concat(s);
            if (0 === e) {
                var y = t.len, h = t.arrayTypes;
                if (!u.hasOwnProperty(i)) throw new Error("Target property ".concat(i, " not found in verticalOhlcv for ").concat(r, "."));
                // Create the main moving average instance.
                                c[f] = {
                    maInstance: new ue[r](n)
                }, u[f] = new Float64Array(y).fill(NaN), l.add(f), a > 0 && t.lag([ f ], a), h[f] = "Float64Array";
            }
            // Retrieve the current price value.
                        var p = u[i][e], v = c[f].maInstance;
            // Update the moving average instance.
            v.update(p);
            var m = NaN;
            try {
                m = v.getResult();
            } catch (t) {
                m = NaN;
            }
            // Always push the MA value (even if NaN).
                        return t.pushToMain({
                index: e,
                key: f,
                value: m
            }), !0;
        };
        // ./src/moving-averages/macd.js
        function le(t) {
            return le = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, le(t);
        }
        function se(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != le(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != le(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == le(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var fe = "close";
        // ./src/moving-averages/donchianChannel.js
        function ye(t) {
            return ye = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ye(t);
        }
        function he(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function pe(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != ye(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != ye(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == ye(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function ve(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return me(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? me(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function me(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/moving-averages/bollingerBands.js
        function de(t) {
            return de = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, de(t);
        }
        function be(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function ge(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != de(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != de(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == de(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function we(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return Oe(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Oe(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Oe(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/utilities/numberUtilities.js
        function Se(t) {
            return Se = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Se(t);
        }
        // Helper to clean non-numeric characters (except "-" at the start and decimal point)
        var je = {
            number: function(t) {
                return t;
            },
            numberCleanString: function(t) {
                return Number(t);
            },
            numberDirtyString: function(t) {
                return Number(t.replace(/(?!^-)[^0-9.]/g, ""));
            }
        }, Pe = function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            // 1) true numbers
                        if ("number" == typeof t && !Number.isNaN(t)) return "number";
            // 2) strings
                        if ("string" == typeof t) {
                var r = t.trim(), n = /^-?\d+(\.\d+)?$/;
                // a) clean numeric string: only digits and an optional single period
                if (n.test(r)) return "numberCleanString";
                // b) dirty numeric string: contains non-digits (dollar, commas, letters, etc.)
                //    but once you strip those out, you're left with a valid number
                                var o = r.replace(/[^0-9.]/g, "");
                if (o && n.test(o)) return "numberDirtyString";
            }
            if (e) throw new TypeError("Invalid input: expected a number or numeric string");
            return Se(t);
        };
        // ./src/utilities/dateUtilities.js
        function _e(t) {
            return _e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, _e(t);
        }
        var Ne = {
            dateObject: function(t) {
                return t;
            },
            dateMilliseconds: function(t) {
                return new Date(t);
            },
            dateSeconds: function(t) {
                return new Date(1e3 * t);
            },
            dateIncompleteDayString: function(t) {
                return new Date("".concat(t, "  00:00:00"));
            },
            dateCompleteDateString: function(t) {
                return new Date(t);
            }
        }, Te = function(t) {
            // Regex for a UTC Time Format where the string ends with "Z".
            var e = [ "Date -> object", "Milliseconds Timestamp -> integer", "Seconds Timestamp -> integer", "UTC Time Format (ISO 8601) -> string", "Including a Timezone Offset (ISO 8601) -> string", "Local Time Format (ISO 8601) -> string", "YYYY/MM/DD or YYYY-MM-DD -> string" ], r = function() {
                throw new Error('Invalid "'.concat(_e(t), '" date value passed in selectDateFormatter. Supported formats: \n-').concat(e.join("\n- ")));
            };
            // Regex for a Timezone Offset Format,
            // which includes a plus or minus sign followed by HH:MM at the end.
                        if ("object" === _e(t)) {
                if (t instanceof Date && !isNaN(t.valueOf())) return "dateObject";
                r();
            } else {
                if ("number" == typeof t) 
                // Use a numeric threshold based on the absolute value: typically,
                // if the absolute value is below 1e11, then it's a seconds timestamp.
                // Otherwise, it's a milliseconds timestamp.
                return Math.abs(t) < 1e11 ? "dateSeconds" : "dateMillseconds";
                if ("string" == typeof t) {
                    if (/^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$/i.test(t) || /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?([+-]\d{2}:\d{2})$/.test(t) || /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?$/.test(t) && t.length > 10 || /^\d{4}\/\d{2}\/\d{2}$/.test(t)) return "dateCompleteDateString";
                    if (/^\d{4}-\d{2}-\d{2}$/.test(t)) return "dateIncompleteDayString";
                    r();
                } else r();
            }
        };
        // ./src/utilities/assignTypes.js
        function Ae(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return Ee(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Ee(t, e) : void 0;
                }
            }(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Ee(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var ke = new Set([ "open", "high", "low", "close" ]), xe = function(t, e) {
            return "Array" === t ? new Array(e).fill(null) : "Float64Array" === t ? new Float64Array(e).fill(NaN) : "Int32Array" === t ? new Int32Array(e).fill(NaN) : void 0;
        };
        // ./src/studies/lag.js
        function Me(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || De(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Ie(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = De(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function De(t, e) {
            if (t) {
                if ("string" == typeof t) return Re(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Re(t, e) : void 0;
            }
        }
        function Re(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function Ce(t) {
            return Ce = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ce(t);
        }
        var Fe = function(t, e) {
            var r = t.instances, n = t.verticalOhlcv, o = t.len, i = t.arrayTypes, a = t.priceBased;
            if (0 === e) {
                var u = t.inputParams.filter((function(t) {
                    return "lag" === t.key;
                }));
                if ("object" !== Ce(u)) return;
                var c, l = u.map((function(t) {
                    return t.params;
                })), s = Ie(l);
                try {
                    for (s.s(); !(c = s.n()).done; ) {
                        var f, y = Me(c.value, 2), h = y[0], p = y[1], v = Ie(h);
                        try {
                            for (v.s(); !(f = v.n()).done; ) {
                                var m = f.value;
                                if (a.has(m)) for (var d = 1; d <= p; d++) a.add("".concat(m, "_lag_").concat(d));
                            }
                        } catch (t) {
                            v.e(t);
                        } finally {
                            v.f();
                        }
                    }
                } catch (t) {
                    s.e(t);
                } finally {
                    s.f();
                }
                r.lag = {
                    lagParams: l
                };
            }
            var b, g = Ie(r.lag.lagParams);
            try {
                for (g.s(); !(b = g.n()).done; ) {
                    var w, O = Me(b.value, 2), S = O[0], j = O[1], P = Ie(S);
                    try {
                        for (P.s(); !(w = P.n()).done; ) {
                            var _ = w.value, N = n[_];
                            // Initialize lagged arrays only on the first index
                            if (0 === e) for (var T = 1; T <= j; T++) {
                                var A = "".concat(_, "_lag_").concat(T);
                                if (!i.hasOwnProperty(_)) throw new Error('Lag processing invoked by "'.concat(_, '" expected arrayTypes to have a "').concat(_, '" property, but it wasn’t found.'));
                                n[A] = xe(i[_], o), i[A] = i[_];
                            }
                            // Populate lagged values
                                                        for (var E = 1; E <= j; E++) {
                                var k = "".concat(_, "_lag_").concat(E), x = e - E, M = x <= 0 || void 0 === N[x] ? null : N[x];
                                t.pushToMain({
                                    index: e,
                                    key: k,
                                    value: M
                                });
                            }
                        }
                    } catch (t) {
                        P.e(t);
                    } finally {
                        P.f();
                    }
                }
            } catch (t) {
                g.e(t);
            } finally {
                g.f();
            }
            return !0;
        };
        // ./src/studies/findCrosses.js
        function Le(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return Be(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Be(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Be(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function He(t) {
            return He = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, He(t);
        }
        function Ve(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Ue(n.key), n);
            }
        }
        function Ue(t) {
            var e = function(t, e) {
                if ("object" != He(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != He(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == He(e) ? e : e + "";
        }
        var qe = function(t, e) {
            return t > e;
        }, $e = function(t, e) {
            return t < e;
        }, ze =  function() {
            return t = function t() {
                !function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), Object.assign(this, {
                    interval: 0,
                    prevState: .5,
                    prevFast: NaN,
                    prevSlow: NaN,
                    prevHigh: NaN,
                    prevLow: NaN,
                    areHighAndLowUndefined: !1,
                    crossIndexes: {
                        up: [],
                        down: []
                    }
                });
            }, (e = [ {
                key: "update",
                value: function(t, e) {
                    var r = e.fast, n = e.high, o = e.slow, i = e.low, a = this.prevState;
                    this.areHighAndLowUndefined || void 0 !== n && void 0 !== i || (this.areHighAndLowUndefined = !0), 
                    Number.isNaN(r) || Number.isNaN(o) || function(t, e) {
                        return t === e;
                    }(r, o) ? a = .5 : qe(r, o) ? a = this.areHighAndLowUndefined ? 1 : [ i, o, this.prevLow, this.prevSlow ].every((function(t) {
                        return !Number.isNaN(t);
                    })) && $e(i, o) && qe(this.prevLow, this.prevSlow) ? 0 : 1 : $e(r, o) && (a = this.areHighAndLowUndefined ? 0 : [ n, o, this.prevHigh, this.prevSlow ].every((function(t) {
                        return !Number.isNaN(t);
                    })) && qe(n, o) && $e(this.prevHigh, this.prevSlow) ? 1 : 0), .5 === a ? this.interval = 0 : 1 === a ? this.prevState <= .5 ? this.interval = 1 : this.interval++ : 0 === a && (this.prevState >= .5 ? this.interval = -1 : this.interval--), 
                    1 === this.interval && this.crossIndexes.up.push(t), -1 === this.interval && this.crossIndexes.down.push(t), 
                    //save prev state
                    Object.assign(this, {
                        prevState: a,
                        prevFast: r,
                        prevSlow: o,
                        prevHigh: n,
                        prevLow: i
                    });
                }
            }, {
                key: "getResult",
                value: function() {
                    return this.interval;
                }
            } ]) && Ve(t.prototype, e), r && Ve(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, r;
        }(), Ge = function(t, e) {
            var r = t.verticalOhlcv, n = t.instances, o = t.len, i = t.arrayTypes;
            if (0 === e) {
                var a = t.inputParams.filter((function(t) {
                    return "crossPairs" === t.key;
                }));
                if ("object" !== He(a)) return;
                n.crossPairs = {
                    crossPairsList: a.flatMap((function(t) {
                        return t.params.flat();
                    }))
                };
            }
            var u, c = Le(n.crossPairs.crossPairsList);
            try {
                for (c.s(); !(u = c.n()).done; ) {
                    var l = u.value, s = l.fast, f = l.slow;
                    if (null != s && null != f) {
                        var y = "".concat(s, "_x_").concat(f);
                        if (0 === e) {
                            if ("number" == typeof f && (r[f] = new Int32Array(o).fill(f)), "price" !== s && !r.hasOwnProperty(s)) throw Error('fast "'.concat(s, ' not found in crossPairs"'));
                            if (!r.hasOwnProperty(f)) throw Error('slow "'.concat(f, ' not found in crossPairs"'));
                            n[y] = new ze, r[y] = new Int32Array(o).fill(NaN), i[y] = "Int32Array";
                        }
                        var h = void 0, p = void 0, v = void 0, m = void 0, d = void 0;
                        "price" === s ? (p = r.close[e], v = r.high[e], m = r.low[e], d = r[f][e], n[y].update(e, {
                            fast: p,
                            slow: d,
                            high: v,
                            low: m
                        })) : (h = r[s][e], d = r[f][e], n[y].update(e, {
                            fast: h,
                            slow: d
                        })), t.pushToMain({
                            index: e,
                            key: y,
                            value: n[y].getResult()
                        });
                    }
                }
            } catch (t) {
                c.e(t);
            } finally {
                c.f();
            }
        };
        // ./src/studies/dateTime.js
        function Ye(t) {
            return Ye = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ye(t);
        }
        function Ke(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function Je(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != Ye(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != Ye(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == Ye(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var Ze = function(t) {
            var e = t.getMonth(), r = t.getFullYear(), n = t.getHours(), o = t.getMinutes(), i = t.getDay(), a = t.getDate(), u = new Date(t.getFullYear(), t.getMonth(), 1).getDay();
            return {
                month: e,
                year: r,
                hour: n,
                minute: o,
                day_of_the_week: i,
                day_of_the_month: a,
                week_of_the_month: Math.ceil((a + u) / 7)
            };
        };
        // ./src/studies/scaler.js
        function Qe(t) {
            return function(t) {
                if (Array.isArray(t)) return er(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || tr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function We(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = tr(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Xe(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            /* General Scaler: supports "minmax" and "zscore" types */ (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || tr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function tr(t, e) {
            if (t) {
                if ("string" == typeof t) return er(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? er(t, e) : void 0;
            }
        }
        function er(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/core-functions/mainLoop.js
        function rr(t) {
            return function(t) {
                if (Array.isArray(t)) return ar(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || ir(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function nr(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = ir(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function or(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            // Map indicator keys to their respective functions
            (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || ir(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function ir(t, e) {
            if (t) {
                if ("string" == typeof t) return ar(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? ar(t, e) : void 0;
            }
        }
        function ar(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var ur = {
            dateTime: function(t, e, r) {
                var n = r.lag, o = t.instances, i = t.verticalOhlcv;
                if (0 === e) {
                    var a = t.len, u = t.dateType, c = t.arrayTypes;
                    if (!u) throw Error('dateTime method found and invalid "date" in input ohlcv');
                    Object.assign(o, {
                        dateTime: {
                            prevDateStr: i.date[0],
                            sessionDailyIndexCount: 0,
                            sessionIntradayIndexCount: 0,
                            cachedDayInfo: i.date[0]
                        }
                    });
                    for (var l = [ "day_of_the_week", "day_of_the_month", "week_of_the_month", "hour", "month", "year", "session_daily_index", "session_intraday_index" ], s = 0, f = l; s < f.length; s++) {
                        c[f[s]] = "Int32Array";
                    }
                    Object.assign(i, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? Ke(Object(r), !0).forEach((function(e) {
                                Je(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Ke(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, Object.fromEntries(l.map((function(t) {
                        return [ t, new Int32Array(a).fill(NaN) ];
                    }))))), n > 0 && t.lag(l, n);
                }
                var y = i.date[e], h = Ze(y), p = h.day_of_the_week, v = h.day_of_the_month, m = h.week_of_the_month, d = h.month, b = h.year, g = h.hour, w = y;
                w !== o.dateTime.prevDateStr && (o.dateTime.prevDateStr = w, o.dateTime.sessionDailyIndexCount++, 
                o.dateTime.sessionIntradayIndexCount = 0), t.pushToMain({
                    index: e,
                    key: "session_daily_index",
                    value: o.dateTime.sessionDailyIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "session_intraday_index",
                    value: o.dateTime.sessionIntradayIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_week",
                    value: p
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_month",
                    value: v
                }), t.pushToMain({
                    index: e,
                    key: "week_of_the_month",
                    value: m
                }), t.pushToMain({
                    index: e,
                    key: "month",
                    value: d
                }), t.pushToMain({
                    index: e,
                    key: "year",
                    value: b
                }), t.pushToMain({
                    index: e,
                    key: "hour",
                    value: g
                }), o.dateTime.sessionIntradayIndexCount++;
            },
            rsi: function(t, e, r, n) {
                var o = n.target, i = n.lag, a = t.verticalOhlcv, u = t.instances, c = "close" === o ? "" : "_".concat(o), l = "rsi_".concat(r).concat(c), s = "rsi_sma_".concat(r).concat(c);
                // Initialization on the first index.
                if (0 === e) {
                    var f = t.crossPairsList, y = t.len, h = t.arrayTypes;
                    if (!a.hasOwnProperty(o)) throw new Error("Target property ".concat(o, " not found in verticalOhlcv for rsi."));
                    f.push({
                        fast: l,
                        slow: s,
                        isDefault: !0
                    }), Object.assign(u, ae(ae({}, l, new oe(r)), s, new ut(r))), Object.assign(a, ae(ae({}, l, new Float64Array(y).fill(NaN)), s, new Float64Array(y).fill(NaN)));
                    var p = [ l, s ];
                    i > 0 && t.lag(p, i);
                    for (var v = 0, m = p; v < m.length; v++) {
                        h[m[v]] = "Float64Array";
                    }
                }
                var d = a[o][e], b = NaN, g = NaN;
                // Update the RSI indicator.
                u[l].update(d);
                try {
                    b = u[l].getResult();
                } catch (t) {
                    b = NaN;
                }
                // Always push the RSI value, using NaN as a fallback.
                                t.pushToMain({
                    index: e,
                    key: l,
                    value: b
                }), 
                // Update the SMA indicator only if a valid RSI value is available.
                Number.isNaN(b) || u[s].update(b);
                try {
                    g = u[s].getResult();
                } catch (t) {
                    g = NaN;
                }
                // Always push the smoothed RSI value.
                                t.pushToMain({
                    index: e,
                    key: s,
                    value: g
                });
            },
            ema: ce,
            sma: ce,
            macd: function(t, e, r, n, o, i) {
                var a = i.target, u = i.lag, c = t.verticalOhlcv, l = t.instances, s = "".concat(r, "_").concat(n, "_").concat(o).concat(a === fe ? "" : "_".concat(a));
                // Initialization on the first index.
                if (0 === e) {
                    var f = t.inputParams, y = t.crossPairsList, h = t.priceBased, p = t.len, v = t.arrayTypes;
                    if (!c.hasOwnProperty(a)) throw new Error("Target property ".concat(a, " not found in verticalOhlcv for macd."));
                    var m = f.filter((function(t) {
                        return "macd" === t.key;
                    })).length, d = m > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", b = a === fe ? "".concat(d, "_diff") : "".concat(d, "_diff_").concat(a), g = a === fe ? "".concat(d, "_dea") : "".concat(d, "_dea_").concat(a), w = a === fe ? "".concat(d, "_histogram") : "".concat(d, "_histogram_").concat(a);
                    // Choose a display prefix based on the number of indicators.
                                        y.push({
                        fast: b,
                        slow: g,
                        isDefault: !0
                    }), l.hasOwnProperty("macd") || (l.macd = {
                        numberOfIndicators: m,
                        settings: {}
                    }), l.macd.settings[s] = new Gt(new Bt(r), new Bt(n), new Bt(o)), Object.assign(c, se(se(se({}, b, new Float64Array(p).fill(NaN)), g, new Float64Array(p).fill(NaN)), w, new Float64Array(p).fill(NaN))), 
                    [ b, g, w ].forEach((function(t) {
                        h.add(t);
                    }));
                    var O = [ b, g, w ];
                    u > 0 && t.lag(O, u);
                    for (var S = 0, j = O; S < j.length; S++) {
                        v[j[S]] = "Float64Array";
                    }
                }
                var P = l.macd, _ = P.numberOfIndicators, N = P.settings, T = _ > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", A = a === fe ? "".concat(T, "_diff") : "".concat(T, "_diff_").concat(a), E = a === fe ? "".concat(T, "_dea") : "".concat(T, "_dea_").concat(a), k = a === fe ? "".concat(T, "_histogram") : "".concat(T, "_histogram_").concat(a), x = N[s], M = c[a][e];
                x.update(M);
                var I = {};
                try {
                    I = x.getResult();
                } catch (t) {
                    // If the result is unavailable, macdResult remains NaN.
                }
                // Always push values; use NaN as fallback when macdResult is missing.
                                return t.pushToMain({
                    index: e,
                    key: A,
                    value: I ? I.macd : NaN
                }), t.pushToMain({
                    index: e,
                    key: E,
                    value: I ? I.signal : NaN
                }), t.pushToMain({
                    index: e,
                    key: k,
                    value: I ? I.histogram : NaN
                }), !0;
            },
            relativeVolume: function(t, e, r, n) {
                var o = n.lag, i = "relative_volume_".concat(r), a = t.instances, u = t.verticalOhlcv;
                if (0 === e) {
                    var c = t.len, l = t.arrayTypes;
                    a[i] = {
                        instance: new ut(r),
                        prevRelativeVolumeSma: NaN
                    }, u[i] = new Float64Array(c).fill(NaN), o > 0 && t.lag([ i ], o), l[i] = "Float64Array";
                }
                var s = u.volume[e], f = a[i].instance;
                f.update(s);
                var y = NaN;
                try {
                    y = f.getResult();
                } catch (t) {}
                var h = a[i].prevRelativeVolumeSma, p = NaN;
                // Only calculate relative volume if both current SMA and previous SMA are valid numbers and prevSma is not zero.
                return Number.isNaN(y) || Number.isNaN(h) || (p = s / h), t.pushToMain({
                    index: e,
                    key: i,
                    value: p
                }), a[i].prevRelativeVolumeSma = y, !0;
            },
            donchianChannels: function(t, e, r, n, o) {
                var i = o.height, a = o.range, u = o.lag, c = "".concat(r, "_").concat(n), l = t.verticalOhlcv, s = t.instances, f = t.len;
                // Initialization: create output arrays and indicator instance on the first call.
                if (0 === e) {
                    var y = t.inputParams, h = t.priceBased, p = t.arrayTypes, v = y.filter((function(t) {
                        return "donchianChannels" === t.key;
                    })).length, m = v > 1 ? "donchian_channel_".concat(c) : "donchian_channel", d = [ "".concat(m, "_upper"), "".concat(m, "_basis"), "".concat(m, "_lower") ];
                    i && d.push("".concat(m, "_height")), s.hasOwnProperty("donchian_channel") || (s.donchian_channel = {
                        numberOfIndicators: v,
                        settings: {}
                    });
                    // Set up additional arrays for each range property.
                    var b, g = ve(a);
                    try {
                        for (g.s(); !(b = g.n()).done; ) {
                            var w = b.value;
                            if (!(w in l) || !h.has(w)) throw new Error('Invalid range item value "'.concat(w, '" property for donchianChannels. Only price based key names are accepted:\n').concat(JSON.stringify(h)));
                            d.push("".concat(m, "_range_").concat(w));
                        }
                    } catch (t) {
                        g.e(t);
                    } finally {
                        g.f();
                    }
                    var O = Object.fromEntries(d.map((function(t) {
                        return [ t, new Float64Array(f).fill(NaN) ];
                    })));
                    Object.assign(l, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? he(Object(r), !0).forEach((function(e) {
                                pe(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : he(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, O)), u > 0 && t.lag(d, u), [ "".concat(m, "_upper"), "".concat(m, "_basis"), "".concat(m, "_lower") ].forEach((function(t) {
                        h.add(t);
                    })), s.donchian_channel.settings[c] = {
                        maxDeque: [],
                        // will hold indices for highs in descending order
                        minDeque: []
                    };
                    for (var S = 0, j = d; S < j.length; S++) {
                        p[j[S]] = "Float64Array";
                    }
                }
                var P = s.donchian_channel.numberOfIndicators > 1 ? "donchian_channel_".concat(c) : "donchian_channel", _ = s.donchian_channel.settings[c], N = _.maxDeque, T = _.minDeque, A = e - n, E = A + 1, k = E - r;
                // window: [startIdx, endIdx)
                // If the window is not fully available, push NaN values for all computed outputs.
                if (k < 0 || E > f) {
                    t.pushToMain({
                        index: e,
                        key: "".concat(P, "_upper"),
                        value: NaN
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(P, "_basis"),
                        value: NaN
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(P, "_lower"),
                        value: NaN
                    }), i && t.pushToMain({
                        index: e,
                        key: "".concat(P, "_height"),
                        value: NaN
                    });
                    var x, M = ve(a);
                    try {
                        for (M.s(); !(x = M.n()).done; ) {
                            var I = x.value;
                            t.pushToMain({
                                index: e,
                                key: "".concat(P, "_range_").concat(I),
                                value: NaN
                            });
                        }
                    } catch (t) {
                        M.e(t);
                    } finally {
                        M.f();
                    }
                    return !0;
                }
                // **Update the maximum deque:**
                for (var D = l.high, R = l.low; N.length && N[0] < k; ) N.shift();
                for (;N.length && D[N[N.length - 1]] <= D[A]; ) N.pop();
                // **Update the minimum deque:**
                for (N.push(A); T.length && T[0] < k; ) T.shift();
                for (;T.length && R[T[T.length - 1]] >= R[A]; ) T.pop();
                T.push(A);
                // Retrieve computed values with safety checks.
                var C = N.length ? D[N[0]] : NaN, F = T.length ? R[T[0]] : NaN, L = Number.isNaN(C) || Number.isNaN(F) ? NaN : (C + F) / 2;
                // Process height if enabled.
                if (
                // Always push the main indicator values.
                t.pushToMain({
                    index: e,
                    key: "".concat(P, "_upper"),
                    value: C
                }), t.pushToMain({
                    index: e,
                    key: "".concat(P, "_basis"),
                    value: L
                }), t.pushToMain({
                    index: e,
                    key: "".concat(P, "_lower"),
                    value: F
                }), i) {
                    var B = NaN;
                    Number.isNaN(C) || Number.isNaN(F) || (B = (C - F) / F), t.pushToMain({
                        index: e,
                        key: "".concat(P, "_height"),
                        value: B
                    });
                }
                // Process each range property.
                                var H, V = ve(a);
                try {
                    for (V.s(); !(H = V.n()).done; ) {
                        var U = H.value, q = NaN, $ = l[U][e];
                        Number.isNaN($) || Number.isNaN(C) || Number.isNaN(F) || (q = ($ - F) / (C - F)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(P, "_range_").concat(U),
                            value: q
                        });
                    }
                } catch (t) {
                    V.e(t);
                } finally {
                    V.f();
                }
                return !0;
            },
            bollingerBands: function(t, e, r, n, o) {
                var i, a, u, c, l, s, f, y = o.height, h = o.range, p = void 0 === h ? [] : h, v = o.target, m = o.lag, d = t.verticalOhlcv, b = t.instances, g = "close" === v ? "" : "_".concat(v), w = "".concat(r, "_").concat(n).concat(g);
                // Initialization on the first call.
                if (0 === e) {
                    var O = t.priceBased, S = t.inputParams, j = t.verticalOhlcv, P = t.len, _ = t.arrayTypes;
                    if (!(v in j)) throw new Error('bollingerBands could not find target "'.concat(v, '"'));
                    var N = S.filter((function(t) {
                        return "bollingerBands" === t.key;
                    })).length;
                    f = N > 1 ? "bollinger_bands_".concat(w) : "bollinger_bands".concat(g), 
                    // Only create the container if it doesn't already exist.
                    b.bollinger_bands || (b.bollinger_bands = {
                        numberOfIndicators: N,
                        settings: {}
                    }), 
                    // Add (or override) the indicator instance keyed by indicatorKey.
                    b.bollinger_bands.settings[w] = new Tt(r, n);
                    var T = [ "".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower") ];
                    y && T.push("".concat(f, "_height"));
                    // Set up additional arrays for each range property.
                                        var A, E = we(p);
                    try {
                        for (E.s(); !(A = E.n()).done; ) {
                            var k = A.value;
                            if (!(k in j) || !O.has(k)) throw new Error('Invalid range item value "'.concat(k, '" property for bollingerBands. Only price based key names are accepted:\n').concat(JSON.stringify(O)));
                            T.push("".concat(f, "_range_").concat(k));
                        }
                    } catch (t) {
                        E.e(t);
                    } finally {
                        E.f();
                    }
                    var x = Object.fromEntries(T.map((function(t) {
                        return [ t, new Float64Array(P).fill(NaN) ];
                    })));
                    Object.assign(j, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? be(Object(r), !0).forEach((function(e) {
                                ge(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : be(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, x)), m > 0 && t.lag(T, m), [ "".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower") ].forEach((function(t) {
                        O.add(t);
                    }));
                    for (var M = 0, I = T; M < I.length; M++) {
                        _[I[M]] = "Float64Array";
                    }
                }
                // Derive prefix for subsequent calls if not set.
                                f || (f = b.bollinger_bands.numberOfIndicators > 1 ? "bollinger_bands_".concat(w) : "bollinger_bands".concat(g));
                var D = f, R = b.bollinger_bands.settings[w], C = d[v][e];
                // Update the indicator with the current value.
                                R.update(C);
                // Attempt to retrieve the result.
                var F = {};
                try {
                    F = R.getResult();
                } catch (t) {
                    // If not available, result stays {}.
                }
                // Use NaN fallbacks for the primary values.
                                var L = null !== (i = null === (a = F) || void 0 === a ? void 0 : a.upper) && void 0 !== i ? i : NaN, B = null !== (u = null === (c = F) || void 0 === c ? void 0 : c.middle) && void 0 !== u ? u : NaN, H = null !== (l = null === (s = F) || void 0 === s ? void 0 : s.lower) && void 0 !== l ? l : NaN;
                // Process height if requested.
                if (
                // Always push the indicator outputs.
                t.pushToMain({
                    index: e,
                    key: "".concat(D, "_upper"),
                    value: L
                }), t.pushToMain({
                    index: e,
                    key: "".concat(D, "_middle"),
                    value: B
                }), t.pushToMain({
                    index: e,
                    key: "".concat(D, "_lower"),
                    value: H
                }), y) {
                    var V = NaN;
                    Number.isNaN(H) || Number.isNaN(L) || (V = (L - H) / H), t.pushToMain({
                        index: e,
                        key: "".concat(D, "_height"),
                        value: V
                    });
                }
                // Process each range property.
                                var U, q = we(p);
                try {
                    for (q.s(); !(U = q.n()).done; ) {
                        var $ = U.value, z = NaN, G = d[$][e];
                        Number.isNaN(G) || Number.isNaN(H) || Number.isNaN(L) || (z = (G - H) / (L - H)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(D, "_range_").concat($),
                            value: z
                        });
                    }
                } catch (t) {
                    q.e(t);
                } finally {
                    q.f();
                }
                return !0;
            },
            volumeOscillator: function(t, e, r, n, o) {
                var i = o.lag, a = t.verticalOhlcv, u = t.instances, c = a.volume[e], l = "volume_oscillator";
                if (0 === e) {
                    var s = t.crossPairsList, f = t.len, y = t.arrayTypes;
                    Object.assign(u, {
                        volume_oscillator: {
                            fastEMA: new Bt(r),
                            slowEMA: new Bt(n)
                        }
                    }), a[l] = new Float64Array(f).fill(NaN), s.push({
                        fast: l,
                        slow: 0,
                        isDefault: !0
                    }), i > 0 && t.lag([ l ], i), y[l] = "Float64Array";
                }
                var h = u[l], p = h.fastEMA, v = h.slowEMA;
                p.update(c), v.update(c);
                var m = NaN, d = NaN;
                try {
                    m = p.getResult();
                } catch (t) {}
                try {
                    d = v.getResult();
                } catch (t) {}
                var b = NaN;
                return Number.isNaN(m) || Number.isNaN(d) || (b = 100 * (m - d) / d), t.pushToMain({
                    index: e,
                    key: l,
                    value: b
                }), !0;
            },
            Scaler: function(t, e, r, n, o, i, a, 
            // used for minmax: [validMin, validMax]
            u) {
                var c = t.verticalOhlcv, l = t.instances, s = t.arrayTypes, f = "".concat(o, "_").concat(r), y = "";
                if (0 === e) {
                    var h = t.len, p = t.priceBased;
                    t.groups;
                    y = "".concat(f, "_group_").concat(n.join("_")), l.scaler = {
                        groupKeyLen: n.length,
                        groupKey: y,
                        windows: {}
                    };
                    var v, m = We(n);
                    try {
                        var d = function() {
                            var e = v.value;
                            if (!c.hasOwnProperty(e)) throw new Error('Target property "'.concat(e, '" not found in verticalOhlcv'));
                            if (!p.has(e)) throw new Error('Column "'.concat(e, '" is not priceBased and cannot be scaled.'));
                            var r = "".concat(f, "_").concat(e);
                            c[r] = new Float64Array(h).fill(NaN), s[r] = "Float64Array";
                            var n = i ? y : e;
                            if (l.scaler.windows[n] = [], i && (t.ScaledGroups[y] || (t.ScaledGroups[y] = []), 
                            t.ScaledGroups[y].push(r)), u > 0) {
                                if (i) {
                                    var o, a = Array.from({
                                        length: u
                                    }).map((function(t, e) {
                                        return "".concat(r, "_lag_").concat(e + 1);
                                    }));
                                    (o = t.ScaledGroups[y]).push.apply(o, Qe(a));
                                }
                                t.lag([ r ], u);
                            }
                        };
                        for (m.s(); !(v = m.n()).done; ) d();
                    } catch (t) {
                        m.e(t);
                    } finally {
                        m.f();
                    }
                }
                var b = l.scaler.windows;
                y = l.scaler.groupKey;
                // update windows with current values
                var g, w = We(n);
                try {
                    for (w.s(); !(g = w.n()).done; ) {
                        var O = g.value, S = c[O][e], j = b[i ? y : O];
                        j.push(S), j.length > (i ? r * l.scaler.groupKeyLen : r) && j.shift();
                    }
                } catch (t) {
                    w.e(t);
                } finally {
                    w.f();
                }
                var P, _ = e + 1 >= r, N = We(n);
                // scale values once enough data
                                try {
                    var T = function() {
                        var r, n, u, l, s, h, p = P.value, v = c[p][e], m = "".concat(f, "_").concat(p), d = null;
                        if (_) {
                            var g = b[i ? y : p];
                            if ("minmax" === o) {
                                var w = Math.min.apply(Math, Qe(g)), O = Math.max.apply(Math, Qe(g));
                                r = v, n = w, u = O, l = Xe(a, 2), s = l[0], h = l[1], d = (Math.min(Math.max(r, n), u) - n) / (u - n) * (h - s) + s;
                            } else {
                                if ("zscore" !== o) throw new Error('Unknown scaler type "'.concat(o, '"'));
                                var S = g.reduce((function(t, e) {
                                    return t + e;
                                }), 0) / g.length, j = g.reduce((function(t, e) {
                                    return t + Math.pow(e - S, 2);
                                }), 0) / g.length, N = Math.sqrt(j);
                                d = function(t, e, r) {
                                    return 0 === r ? 0 : (t - e) / r;
                                }(v, S, N);
                            }
                        }
                        t.pushToMain({
                            index: e,
                            key: m,
                            value: d
                        });
                    };
                    for (N.s(); !(P = N.n()).done; ) T();
                } catch (t) {
                    N.e(t);
                } finally {
                    N.f();
                }
            }
        }, cr = function(t, e) {
            var r = e.len, o = e.inputParams, i = e.priceBased, a = e.precisionMultiplier, u = e.arrayTypes, c = e.verticalOhlcv, l = e.verticalOhlcvKeyNames, s = e.inputTypes;
            !function(t) {
                var e, r = t.inputParams, o = t.len, i = n(r);
                try {
                    for (i.s(); !(e = i.n()).done; ) {
                        var a, u = n(e.value.params);
                        try {
                            for (u.s(); !(a = u.n()).done; ) {
                                var c = a.value;
                                if ("number" == typeof c && c > o) throw console.log(c, o), new Error("At least one of the params of the indicator is greater than the input OHLCV length. Make sure to have enough datapoints in the input OHLCV.");
                            }
                        } catch (t) {
                            u.e(t);
                        } finally {
                            u.f();
                        }
                    }
                } catch (t) {
                    i.e(t);
                } finally {
                    i.f();
                }
            }({
                inputParams: o,
                len: r
            });
            for (var f = 0, y = Object.keys(s); f < y.length; f++) {
                var h = y[f];
                c[h] = xe(u[h], r);
            }
            // Process each row in the input
                        for (var p = 0; p < r; p++) {
                for (var v = t[p], m = 0, d = Object.entries(s); m < d.length; m++) {
                    var b = or(d[m], 2), g = b[0], w = b[1], O = v[g];
                    if (je.hasOwnProperty(w)) {
                        var S = je[w](O);
                        a > 1 && i.has(g) && (S *= a), e.pushToMain({
                            index: p,
                            key: g,
                            value: S
                        });
                    } else Ne.hasOwnProperty(w) ? e.pushToMain({
                        index: p,
                        key: g,
                        value: Ne[w](O)
                    }) : e.pushToMain({
                        index: p,
                        key: g,
                        value: O
                    });
                }
                // Run all indicator functions except for the ones processed later
                                var j, P = nr(o);
                try {
                    for (P.s(); !(j = P.n()).done; ) {
                        var _ = j.value, N = _.key, T = _.params;
                        "lag" !== N && "crossPairs" !== N && 
                        // resolve fn on-demand, no per-item object allocation here
                        ur[N].apply(ur, [ e, p ].concat(rr(T)));
                    }
                    // Process these indicators separately (ensuring their execution order)
                                } catch (t) {
                    P.e(t);
                } finally {
                    P.f();
                }
                Fe(e, p), Ge(e, p);
            }
            l.push.apply(l, rr(Object.keys(c)));
        }, lr = function(t, e) {
            for (var r = t.length, n = new ut(e), o = new Array(r), i = 0, a = 0, u = 0, c = 0; c < r; c++) if (n.update(t[c]), 
            n.isStable) {
                var l = n.getResult();
                o[c] = l, i += l, a += l * l, u++;
            } else o[c] = null;
            var s = i / u, f = a / u - s * s, y = Math.sqrt(f);
            return o.map((function(t) {
                return null !== t ? (t - s) / y : null;
            }));
        }, sr = function(t, e) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5;
            if (t.length !== e.length) throw new Error("Both arrays must have the same length");
            for (var n = lr(t, r), o = lr(e, r), i = t.length, a = [], u = 0, c = 0, l = 0, s = 0, f = 0, y = 0, h = -1, p = 0; p < i; p++) {
                if (null !== n[p] && null !== o[p]) {
                    h = p;
                    break;
                }
                a.push(0);
            }
            if (-1 === h) 
            // No valid data points
            return new Array(i).fill(0);
            for (var v = h; v < i; v++) {
                var m = n[v], d = o[v];
                if (null !== m && null !== d) if (u += m, c += d, l += m * d, s += m * m, f += d * d, 
                ++y < 2) a.push(0); else {
                    var b = y * l - u * c, g = Math.sqrt((y * s - u * u) * (y * f - c * c)), w = 0 === g ? 0 : b / g;
                    a.push(w);
                } else 
                // Reset sums and counts when encountering null values
                u = c = l = s = f = y = 0, a.push(0);
            }
            return a;
        }, fr = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = arguments.length > 1 ? arguments[1] : void 0, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = e.precisionMultiplier, o = e.priceBased, i = e.precision, a = e.verticalOhlcv, u = e.invalidValueIndex, c = e.len, l = e.verticalOhlcvKeyNames;
            if (0 === l.length) return [];
            for (var s = t && u >= 0 ? u + 1 : 0, f = Math.max(s, r), y = new Array(c - f), h = f; h < c; h++) {
                for (var p = {}, v = 0; v < l.length; v++) {
                    var m = l[v], d = a[m][h];
                    p[m] = i && o.has(m) ? d / n : d;
                }
                y[h - f] = p;
            }
            return y;
        };
        function yr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || hr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function hr(t, e) {
            if (t) {
                if ("string" == typeof t) return pr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? pr(t, e) : void 0;
            }
        }
        function pr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var vr = function(t, e) {
            var r = t.precision, n = t.priceBased;
            if (!1 === r) return 1;
            var o, i = 1, a = // ./src/utilities/precisionMultiplier.js
            function(t, e) {
                var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (!r) {
                    if (Array.isArray(t) || (r = hr(t)) || e && t && "number" == typeof t.length) {
                        r && (t = r);
                        var n = 0, o = function() {};
                        return {
                            s: o,
                            n: function() {
                                return n >= t.length ? {
                                    done: !0
                                } : {
                                    done: !1,
                                    value: t[n++]
                                };
                            },
                            e: function(t) {
                                throw t;
                            },
                            f: o
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var i, a = !0, u = !1;
                return {
                    s: function() {
                        r = r.call(t);
                    },
                    n: function() {
                        var t = r.next();
                        return a = t.done, t;
                    },
                    e: function(t) {
                        u = !0, i = t;
                    },
                    f: function() {
                        try {
                            a || null == r.return || r.return();
                        } finally {
                            if (u) throw i;
                        }
                    }
                };
            }(Object.entries(e).filter((function(t) {
                var e = yr(t, 2), r = e[0];
                e[1];
                return n.has(r);
            })).map((function(t) {
                var e = yr(t, 2);
                e[0];
                return e[1];
            })));
            try {
                for (a.s(); !(o = a.n()).done; ) {
                    var u = o.value, c = yr(String(u).split("."), 2)[1], l = void 0 === c ? "" : c, s = Math.max(4, l.length), f = s > 1 ? Math.pow(10, s - 1) : 1;
                    f > i && (i = f);
                }
            } catch (t) {
                a.e(t);
            } finally {
                a.f();
            }
            return i;
        };
        // ./index.js
        function mr(t) {
            return mr = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, mr(t);
        }
        function dr(t) {
            return function(t) {
                if (Array.isArray(t)) return wr(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || gr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function br(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], c = !0, l = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            c = !1;
                        } else for (;!(c = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); c = !0) ;
                    } catch (t) {
                        l = !0, o = t;
                    } finally {
                        try {
                            if (!c && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (l) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || gr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function gr(t, e) {
            if (t) {
                if ("string" == typeof t) return wr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? wr(t, e) : void 0;
            }
        }
        function wr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function Or(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Sr(n.key), n);
            }
        }
        function Sr(t) {
            var e = function(t, e) {
                if ("object" != mr(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != mr(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }
            /**
 * Class OHLCV_INDICATORS
 *
 * This class provides methods for calculating and managing technical indicators 
 * on financial OHLCV (Open, High, Low, Close, Volume) data. It enables users 
 * to parallel compute various technical indicators in 1 single loop.
 * OHLCV datasets.
 */ (t, "string");
            return "symbol" == mr(e) ? e : e + "";
        }
        var jr =  function() {
            return t = function t(e) {
                var r = this, n = e.input, o = e.ticker, i = void 0 === o ? null : o, u = e.precision, l = void 0 === u || u, s = e.inputParams, f = void 0 === s ? null : s;
                if (function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), a(n, "input", null !== i ? "contructor ".concat(i) : "constuctor"), 
                0 === n.length) throw Error("input OHLCV must not be empty: " + i);
                c(l, "precision", "constructor"), this.firstRow = n[0];
                var y = function(t) {
                    for (var e = {}, r = {}, n = 0, o = Object.entries(t); n < o.length; n++) {
                        var i = Ae(o[n], 2), a = i[0], u = i[1];
                        if ("date" === a) e[a] = Te(u), r[a] = "Array"; else if ("volume" === a) e[a] = Pe(u, !0), 
                        r[a] = "Int32Array"; else if (ke.has(a)) e[a] = Pe(u, !0), r[a] = "Float64Array"; else {
                            var c = Pe(u, !1);
                            e[a] = c, r[a] = "number" === c ? "Float64Array" : "Array";
                        }
                    }
                    return {
                        inputTypes: e,
                        arrayTypes: r
                    };
                }(this.firstRow), h = y.inputTypes, p = y.arrayTypes;
                if (this.inputTypes = h, this.arrayTypes = p, !this.firstRow.hasOwnProperty("close")) throw Error('input OHLCV array objects require at least "close" property: '.concat(i));
                return this.dateType = this.inputTypes.date ? this.inputTypes.date : null, this.isComputed = !1, 
                this.input = n, this.priceBased = new Set([ "open", "high", "low", "close" ]), this.len = n.length, 
                this.instances = {}, this.crossPairsList = [], this.verticalOhlcv = {}, this.verticalOhlcvKeyNames = [], 
                this.utilities = {
                    correlation: sr
                }, this.invalidValueIndex = -1, this.precision = l, this.precisionMultiplier = vr(this, this.firstRow), 
                this.ScaledGroups = {}, null !== f && (a(f, "inputParams", "constructor"), this.inputParams = f, 
                this.compute()), this.inputParams = [], this.pushToMain = function(t) {
                    var e = t.index, n = t.key, o = t.value;
                    return function(t) {
                        var e = t.main, r = t.index, n = t.key, o = t.value, i = e.verticalOhlcv;
                        return null == o || Number.isNaN(o) ? (e.invalidValueIndex = r, i[n][r] = o, !1) : (i[n][r] = o, 
                        !0);
                    }({
                        main: r,
                        index: e,
                        key: n,
                        value: o
                    });
                }, this;
            }, e = [ {
                key: "getDataAsCols",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.compute();
                    for (var e = this.precisionMultiplier, r = this.precision, n = this.invalidValueIndex, o = this.len, i = this.verticalOhlcv, a = this.priceBased, u = {}, c = n >= 0 && t, l = o - (n + 1), s = 0, f = Object.entries(i); s < f.length; s++) {
                        var y = br(f[s], 2), h = y[0], p = y[1], v = c ? p.slice(-l) : p;
                        // If slicing is needed, create a sliced copy, otherwise re-use the array.
                                                // If this key is price based and precision is enabled, map over the array.
                        r && a.has(h) && (v = v.map((function(t) {
                            return null == t ? null : t / e;
                        }))), u[h] = v;
                    }
                    return u;
                }
            }, {
                key: "getData",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    //getData method returns the last object (row) of the new OHLCV with indicators: {open, high, low, close, rsi_14, bollinger_bands_upper}
                                        return this.compute(), fr(t, this, 0);
                }
            }, {
                key: "getLastValues",
                value: function() {
                    return this.compute(), fr(!1, this, this.len - 1)[0];
                }
            }, {
                key: "compute",
                value: function() {
                    // If we've already computed, bail out immediately
                    return this.isComputed || (
                    // Mark as “in progress”
                    this.isComputed = !1, 
                    // Figure out whether there’s a date field in the inputs
                    // Only run the full loop once (or when new data appears later,
                    // if you extend this to reset isComputed elsewhere)
                    this.len > 0 && (cr(this.input, this), this.isComputed = !0, 
                    //flushing after mainLoop
                    this.input = [], this.instances = {}, this.firstRow = [])), this;
                }
            }, {
                key: "crossPairs",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = "crossPairs";
                    return i(this), a(t, "arr", e), this.crossPairsList = [].concat(dr(this.crossPairsList), dr(t)), 
                    this.inputParams.push({
                        key: e,
                        params: [ this.crossPairsList ]
                    }), this;
                }
            }, {
                key: "lag",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [ "close" ], e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, r = "lag";
                    i(this), a(t, "colKeys", r), l(e, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "lookback", r), this.inputParams.push({
                        key: r,
                        params: [ t, e ]
                    });
                    var n, o = function(t, e) {
                        var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!r) {
                            if (Array.isArray(t) || (r = gr(t)) || e && t && "number" == typeof t.length) {
                                r && (t = r);
                                var n = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return n >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[n++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var i, a = !0, u = !1;
                        return {
                            s: function() {
                                r = r.call(t);
                            },
                            n: function() {
                                var t = r.next();
                                return a = t.done, t;
                            },
                            e: function(t) {
                                u = !0, i = t;
                            },
                            f: function() {
                                try {
                                    a || null == r.return || r.return();
                                } finally {
                                    if (u) throw i;
                                }
                            }
                        };
                    }(t);
                    try {
                        for (o.s(); !(n = o.n()).done; ) {
                            var u = n.value;
                            this.priceBased.has(u) && this.priceBased.add(u);
                        }
                    } catch (t) {
                        o.e(t);
                    } finally {
                        o.f();
                    }
                    return this;
                }
            }, {
                key: "relativeVolume",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "relativeVolume";
                    if (!this.inputTypes.hasOwnProperty("volume")) throw new Error('If "relativeVolume" is called the input ohlcv must contain valid volume properties.');
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), u(e, "options", r);
                    var n = e.lag, o = void 0 === n ? 0 : n;
                    return l(o, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            lag: o
                        } ]
                    }), this;
                }
            }, {
                key: "ema",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "ema";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), u(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, a = e.lag, c = void 0 === a ? 0 : a;
                    return l(c, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: c
                        } ]
                    }), this;
                }
            }, {
                key: "sma",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "sma";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), u(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, a = e.lag, c = void 0 === a ? 0 : a;
                    return l(c, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: c
                        } ]
                    }), this;
                }
            }, {
                key: "macd",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 12, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 26, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 9, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o = "macd";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fast", o), l(e, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "slow", o), l(r, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "signal", o), u(n, "options", o);
                    var a = n.target, c = void 0 === a ? "close" : a, s = n.lag, f = void 0 === s ? 0 : s;
                    return l(f, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", o), this.inputParams.push({
                        key: o,
                        params: [ t, e, r, {
                            target: c,
                            lag: f
                        } ]
                    }), this;
                }
            }, {
                key: "bollingerBands",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "bollingerBands";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), l(e, {
                        min: .01,
                        max: 50,
                        allowDecimals: !0
                    }, "stdDev", n), u(r, "options", n);
                    var o = r.target, s = void 0 === o ? "close" : o, f = r.height, y = void 0 !== f && f, h = r.range, p = void 0 === h ? [] : h, v = r.lag, m = void 0 === v ? 0 : v;
                    return a(p, "range", n), l(m, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), c(y, "height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            target: s,
                            height: y,
                            range: p,
                            lag: m
                        } ]
                    }), this;
                }
            }, {
                key: "rsi",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 14, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "rsi";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), u(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, a = e.lag, c = void 0 === a ? 0 : a;
                    return l(c, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            target: o,
                            lag: c
                        } ]
                    }), this;
                }
            }, {
                key: "donchianChannels",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "donchianChannels";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), l(e, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "offset", n), u(r, "options", n);
                    var o = r.height, s = void 0 !== o && o, f = r.range, y = void 0 === f ? [] : f, h = r.lag, p = void 0 === h ? 0 : h;
                    return a(y, "range", n), l(p, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), c(s, "height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            height: s,
                            range: y,
                            lag: p
                        } ]
                    }), this;
                }
            }, {
                key: "volumeOscillator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "volumeOscillator";
                    if (!this.inputTypes.hasOwnProperty("volume")) throw new Error('If "volumeOscillator" is called the input ohlcv must contain valid volume properties.');
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fastSize", n), l(e, {
                        min: t,
                        max: this.len,
                        allowDecimals: !1
                    }, "slowSize", n), u(r, "options", n);
                    var o = r.lag, a = void 0 === o ? 0 : o;
                    return l(a, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            lag: a
                        } ]
                    }), this;
                }
            }, {
                key: "dateTime",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = "dateTime";
                    i(this), u(t, "options", e);
                    var r = t.lag, n = void 0 === r ? 0 : r;
                    return l(n, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", e), this.inputParams.push({
                        key: e,
                        params: [ {
                            lag: n
                        } ]
                    }), this;
                }
            }, {
                key: "Scaler",
                value: function(t, e, r) {
                    var n = "Scaler";
                    i(this), l(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), a(e, "colKeys", n);
                    var o = r.group, u = void 0 !== o && o, s = r.range, f = void 0 === s ? [ 0, 1 ] : s, y = r.lag, h = void 0 === y ? 0 : y, p = r.type, v = void 0 === p ? "minmax" : p;
                    return c(u, "group", n), a(f, "range", n), function(t, e, r, n) {
                        if (a(t, "arrayOptions", "".concat(n, ".").concat(r, ".validateArrayOptions")), 
                        !t.includes(e.toString())) throw new Error('Param "'.concat(r, '" must be any of the following values [').concat(t.join(", "), '] in "').concat(n, '".'));
                    }([ "minmax", "zscore" ], v, "type", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, v, u, f, h ]
                    }), this;
                }
            } ], e && Or(t.prototype, e), r && Or(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, r;
        }();
    })(), OHLCV_INDICATORS = e;
})
/******/ ();