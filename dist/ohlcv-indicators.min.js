var OHLCV_INDICATORS;

/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var t = {
        /******/ // define getter functions for harmony exports
        /******/ d: (e, r) => {
            /******/ for (var n in r) 
            /******/ t.o(r, n) && !t.o(e, n) && 
            /******/ Object.defineProperty(e, n, {
                enumerable: !0,
                get: r[n]
            })
            /******/;
            /******/        },
        /******/ o: (t, e) => Object.prototype.hasOwnProperty.call(t, e)
        /******/ ,
        /******/ // define __esModule on exports
        /******/ r: t => {
            /******/ "undefined" != typeof Symbol && Symbol.toStringTag && 
            /******/ Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            })
            /******/ , Object.defineProperty(t, "__esModule", {
                value: !0
            });
        }
        /******/    }, e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/define property getters */
    /******/    
    // This entry need to be wrapped in an IIFE because it declares 'OHLCV_INDICATORS' on top-level, which conflicts with the current library output.
    (() => {
        // ./src/utilities/validators.js
        function r(t) {
            return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, r(t);
        }
        function n(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return o(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, i = function() {};
                    return {
                        s: i,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: i
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a, u = !0, l = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return u = t.done, t;
                },
                e: function(t) {
                    l = !0, a = t;
                },
                f: function() {
                    try {
                        u || null == r.return || r.return();
                    } finally {
                        if (l) throw a;
                    }
                }
            };
        }
        function o(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ESM COMPAT FLAG
        t.r(e), 
        // EXPORTS
        t.d(e, {
            default: () => /* binding */ Rr
        });
        var i = function(t) {
            return "string" == typeof t && /^\d{4}-\d{2}-\d{2}/.test(t);
        }, a = function(t) {
            if (0 !== t.lastComputedIndex) throw Error('ohlcv is already computed, you can not add new indicators after "compute", "getLastValues" , "getDataAsCols" or "getData" methods are called.');
        }, u = function(t, e, r) {
            if (!Array.isArray(t)) throw new Error('Param "'.concat(e, '" must be an array in "').concat(r, '".'));
            return !0;
        }, l = function(t, e, n) {
            if (!Boolean(t) || "object" == !r(t)) throw new Error('Param "'.concat(e, '" must be an object in "').concat(n, '".'));
            return !0;
        }, c = function(t, e, r) {
            if ("boolean" != typeof t) throw new Error('Param "'.concat(e, '" must be an boolean in "').concat(r, '".'));
            return !0;
        }, s = function(t, e, r, n) {
            l(e, "options", "".concat(n, ".").concat(r, ".validateNumber"));
            var o = e.allowDecimals, i = void 0 !== o && o, a = e.min, u = e.max, c = i ? "number" : "integer";
            if ("number" != typeof t || !1 === i && !Number.isInteger(t)) throw new Error('Param "'.concat(r, '" must be an integer in "').concat(n, '".'));
            if ("number" != typeof a || "number" != typeof u || a >= u) throw new Error('Param "min" must be a valid '.concat(c, ' lower than "max" "').concat(n, ".").concat(r, '.validateNumber".'));
            if (t < a) throw new Error('Param "'.concat(r, '" must be an ').concat(c, " greater than or equal to ").concat(a, ' in "').concat(n, '".'));
            if (t > u) throw new Error('Param "'.concat(r, '" must be an ').concat(c, " lower than or equal to ").concat(u, ' in "').concat(n, '".'));
            return !0;
        }, // 0, 1, 2 or 3
        // The maximum value of DP and Big.DP.
        f = 1e6, // 0 to 1000000
        // The maximum magnitude of the exponent argument to the pow method.
        h = 1e6, // true or false
        /**************************************************************************************************/
        // Error messages.
        p = "[big.js] ", y = p + "Invalid ", v = y + "decimal places", m = y + "rounding mode", d = p + "Division by zero", 
        // The shared prototype object.
        b = {}, g = void 0, w = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
        /*
 * Round Big x to a maximum of sd significant digits using rounding mode rm.
 *
 * x {Big} The Big to round.
 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 * [more] {boolean} Whether the result of division was truncated.
 */
        function S(t, e, r, n) {
            var o = t.c;
            if (r === g && (r = t.constructor.RM), 0 !== r && 1 !== r && 2 !== r && 3 !== r) throw Error(m);
            if (e < 1) n = 3 === r && (n || !!o[0]) || 0 === e && (1 === r && o[0] >= 5 || 2 === r && (o[0] > 5 || 5 === o[0] && (n || o[1] !== g))), 
            o.length = 1, n ? (
            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            t.e = t.e - e + 1, o[0] = 1) : 
            // Zero.
            o[0] = t.e = 0; else if (e < o.length) {
                // Round up?
                if (
                // xc[sd] is the digit after the digit that may be rounded up.
                n = 1 === r && o[e] >= 5 || 2 === r && (o[e] > 5 || 5 === o[e] && (n || o[e + 1] !== g || 1 & o[e - 1])) || 3 === r && (n || !!o[0]), 
                // Remove any digits after the required precision.
                o.length = e, n) 
                // Rounding up may mean the previous digit has to be rounded up.
                for (;++o[--e] > 9; ) if (o[e] = 0, 0 === e) {
                    ++t.e, o.unshift(1);
                    break;
                }
                // Remove trailing zeros.
                                for (e = o.length; !o[--e]; ) o.pop();
            }
            return t;
        }
        /*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 */        function O(t, e, r) {
            var n = t.e, o = t.c.join(""), i = o.length;
            // Exponential notation?
                        if (e) o = o.charAt(0) + (i > 1 ? "." + o.slice(1) : "") + (n < 0 ? "e" : "e+") + n;
            // Normal notation.
             else if (n < 0) {
                for (;++n; ) o = "0" + o;
                o = "0." + o;
            } else if (n > 0) if (++n > i) for (n -= i; n--; ) o += "0"; else n < i && (o = o.slice(0, n) + "." + o.slice(n)); else i > 1 && (o = o.charAt(0) + "." + o.slice(1));
            return t.s < 0 && r ? "-" + o : o;
        }
        // Prototype/instance methods
        /*
 * Return a new Big whose value is the absolute value of this Big.
 */        b.abs = function() {
            var t = new this.constructor(this);
            return t.s = 1, t;
        }, 
        /*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
 */
        b.cmp = function(t) {
            var e, r = this, n = r.c, o = (t = new r.constructor(t)).c, i = r.s, a = t.s, u = r.e, l = t.e;
            // Either zero?
                        if (!n[0] || !o[0]) return n[0] ? i : o[0] ? -a : 0;
            // Signs differ?
                        if (i != a) return i;
            // Compare exponents.
            if (e = i < 0, u != l) return u > l ^ e ? 1 : -1;
            // Compare digit by digit.
            for (a = (u = n.length) < (l = o.length) ? u : l, i = -1; ++i < a; ) if (n[i] != o[i]) return n[i] > o[i] ^ e ? 1 : -1;
            // Compare lengths.
                        return u == l ? 0 : u > l ^ e ? 1 : -1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        b.div = function(t) {
            var e = this, r = e.constructor, n = e.c, // dividend
            o = (t = new r(t)).c, // divisor
            i = e.s == t.s ? 1 : -1, a = r.DP;
            if (a !== ~~a || a < 0 || a > f) throw Error(v);
            // Divisor is zero?
                        if (!o[0]) throw Error(d);
            // Dividend is 0? Return +-0.
                        if (!n[0]) return t.s = i, t.c = [ t.e = 0 ], t;
            var u, l, c, s, h, p = o.slice(), y = u = o.length, m = n.length, b = n.slice(0, u), // remainder
            w = b.length, O = t, // quotient
            j = O.c = [], P = 0, _ = a + (O.e = e.e - t.e) + 1;
 // precision of the result
                        // Add zeros to make remainder as long as divisor.
            for (O.s = i, i = _ < 0 ? 0 : _, 
            // Create version of divisor with leading zero.
            p.unshift(0); w++ < u; ) b.push(0);
            do {
                // n is how many times the divisor goes into current remainder.
                for (c = 0; c < 10; c++) {
                    // Compare divisor and remainder.
                    if (u != (w = b.length)) s = u > w ? 1 : -1; else for (h = -1, s = 0; ++h < u; ) if (o[h] != b[h]) {
                        s = o[h] > b[h] ? 1 : -1;
                        break;
                    }
                    // If divisor < remainder, subtract divisor from remainder.
                                        if (!(s < 0)) break;
                    // Remainder can't be more than 1 digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for (l = w == u ? o : p; w; ) {
                        if (b[--w] < l[w]) {
                            for (h = w; h && !b[--h]; ) b[h] = 9;
                            --b[h], b[w] += 10;
                        }
                        b[w] -= l[w];
                    }
                    for (;!b[0]; ) b.shift();
                }
                // Add the digit n to the result array.
                                j[P++] = s ? c : ++c, 
                // Update the remainder.
                b[0] && s ? b[w] = n[y] || 0 : b = [ n[y] ];
            } while ((y++ < m || b[0] !== g) && i--);
            // Leading zero? Do not remove if result is simply zero (qi == 1).
                        return j[0] || 1 == P || (
            // There can't be more than one zero.
            j.shift(), O.e--, _--), 
            // Round?
            P > _ && S(O, _, r.RM, b[0] !== g), O;
        }, 
        /*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */
        b.eq = function(t) {
            return 0 === this.cmp(t);
        }, 
        /*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */
        b.gt = function(t) {
            return this.cmp(t) > 0;
        }, 
        /*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */
        b.gte = function(t) {
            return this.cmp(t) > -1;
        }, 
        /*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */
        b.lt = function(t) {
            return this.cmp(t) < 0;
        }, 
        /*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */
        b.lte = function(t) {
            return this.cmp(t) < 1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */
        b.minus = b.sub = function(t) {
            var e, r, n, o, i = this, a = i.constructor, u = i.s, l = (t = new a(t)).s;
            // Signs differ?
                        if (u != l) return t.s = -l, i.plus(t);
            var c = i.c.slice(), s = i.e, f = t.c, h = t.e;
            // Either zero?
                        if (!c[0] || !f[0]) return f[0] ? t.s = -l : c[0] ? t = new a(i) : t.s = 1, 
            t;
            // Determine which is the bigger number. Prepend zeros to equalise exponents.
                        if (u = s - h) {
                for ((o = u < 0) ? (u = -u, n = c) : (h = s, n = f), n.reverse(), l = u; l--; ) n.push(0);
                n.reverse();
            } else for (
            // Exponents equal. Check digit by digit.
            r = ((o = c.length < f.length) ? c : f).length, u = l = 0; l < r; l++) if (c[l] != f[l]) {
                o = c[l] < f[l];
                break;
            }
            // x < y? Point xc to the array of the bigger number.
                        /*
   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
   * needs to start at yc.length.
   */
            if (o && (n = c, c = f, f = n, t.s = -t.s), (l = (r = f.length) - (e = c.length)) > 0) for (;l--; ) c[e++] = 0;
            // Subtract yc from xc.
                        for (l = e; r > u; ) {
                if (c[--r] < f[r]) {
                    for (e = r; e && !c[--e]; ) c[e] = 9;
                    --c[e], c[r] += 10;
                }
                c[r] -= f[r];
            }
            // Remove trailing zeros.
                        for (;0 === c[--l]; ) c.pop();
            // Remove leading zeros and adjust exponent accordingly.
                        for (;0 === c[0]; ) c.shift(), --h;
            return c[0] || (
            // n - n = +0
            t.s = 1, 
            // Result must be zero.
            c = [ h = 0 ]), t.c = c, t.e = h, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */
        b.mod = function(t) {
            var e, r = this, n = r.constructor, o = r.s, i = (t = new n(t)).s;
            if (!t.c[0]) throw Error(d);
            return r.s = t.s = 1, e = 1 == t.cmp(r), r.s = o, t.s = i, e ? new n(r) : (o = n.DP, 
            i = n.RM, n.DP = n.RM = 0, r = r.div(t), n.DP = o, n.RM = i, this.minus(r.times(t)));
        }, 
        /*
 * Return a new Big whose value is the value of this Big negated.
 */
        b.neg = function() {
            var t = new this.constructor(this);
            return t.s = -t.s, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */
        b.plus = b.add = function(t) {
            var e, r, n, o = this, i = o.constructor;
            // Signs differ?
            if (t = new i(t), o.s != t.s) return t.s = -t.s, o.minus(t);
            var a = o.e, u = o.c, l = t.e, c = t.c;
            // Either zero?
                        if (!u[0] || !c[0]) return c[0] || (u[0] ? t = new i(o) : t.s = o.s), 
            t;
            // Prepend zeros to equalise exponents.
            // Note: reverse faster than unshifts.
            if (u = u.slice(), e = a - l) {
                for (e > 0 ? (l = a, n = c) : (e = -e, n = u), n.reverse(); e--; ) n.push(0);
                n.reverse();
            }
            // Point xc to the longer array.
                        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
            for (u.length - c.length < 0 && (n = c, c = u, u = n), e = c.length, r = 0; e; u[e] %= 10) r = (u[--e] = u[e] + c[e] + r) / 10 | 0;
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                        // Remove trailing zeros.
            for (r && (u.unshift(r), ++l), e = u.length; 0 === u[--e]; ) u.pop();
            return t.c = u, t.e = l, t;
        }, 
        /*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */
        b.pow = function(t) {
            var e = this, r = new e.constructor("1"), n = r, o = t < 0;
            if (t !== ~~t || t < -1e6 || t > h) throw Error(y + "exponent");
            for (o && (t = -t); 1 & t && (n = n.times(e)), t >>= 1; ) e = e.times(e);
            return o ? r.div(n) : n;
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        b.prec = function(t, e) {
            if (t !== ~~t || t < 1 || t > f) throw Error(y + "precision");
            return S(new this.constructor(this), t, e);
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
 * using rounding mode rm, or Big.RM if rm is not specified.
 * If dp is negative, round to an integer which is a multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        b.round = function(t, e) {
            if (t === g) t = 0; else if (t !== ~~t || t < -f || t > f) throw Error(v);
            return S(new this.constructor(this), t + this.e + 1, e);
        }, 
        /*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        b.sqrt = function() {
            var t, e, r, n = this, o = n.constructor, i = n.s, a = n.e, u = new o("0.5");
            // Zero?
                        if (!n.c[0]) return new o(n);
            // Negative?
                        if (i < 0) throw Error(p + "No square root");
            // Estimate.
                        // Math.sqrt underflow/overflow?
            // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
            0 === (i = Math.sqrt(n + "")) || i === 1 / 0 ? ((e = n.c.join("")).length + a & 1 || (e += "0"), 
            a = ((a + 1) / 2 | 0) - (a < 0 || 1 & a), t = new o(((i = Math.sqrt(e)) == 1 / 0 ? "5e" : (i = i.toExponential()).slice(0, i.indexOf("e") + 1)) + a)) : t = new o(i + ""), 
            a = t.e + (o.DP += 4);
            // Newton-Raphson iteration.
            do {
                r = t, t = u.times(r.plus(n.div(r)));
            } while (r.c.slice(0, a).join("") !== t.c.slice(0, a).join(""));
            return S(t, (o.DP -= 4) + t.e + 1, o.RM);
        }, 
        /*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */
        b.times = b.mul = function(t) {
            var e, r = this, n = r.constructor, o = r.c, i = (t = new n(t)).c, a = o.length, u = i.length, l = r.e, c = t.e;
            // Determine sign of result.
                        // Return signed 0 if either 0.
            if (t.s = r.s == t.s ? 1 : -1, !o[0] || !i[0]) return t.c = [ t.e = 0 ], t;
            // Initialise exponent of result as x.e + y.e.
                        // Initialise coefficient array of result with zeros.
            for (t.e = l + c, 
            // If array xc has fewer digits than yc, swap xc and yc, and lengths.
            a < u && (e = o, o = i, i = e, c = a, a = u, u = c), e = new Array(c = a + u); c--; ) e[c] = 0;
            // Multiply.
            // i is initially xc.length.
                        for (l = u; l--; ) {
                // a is yc.length.
                for (u = 0, c = a + l; c > l; ) 
                // Current sum of products at this digit position, plus carry.
                u = e[c] + i[l] * o[c - l - 1] + u, e[c--] = u % 10, 
                // carry
                u = u / 10 | 0;
                e[c] = u;
            }
            // Increment result exponent if there is a final carry, otherwise remove leading zero.
                        // Remove trailing zeros.
            for (u ? ++t.e : e.shift(), l = e.length; !e[--l]; ) e.pop();
            return t.c = e, t;
        }, 
        /*
 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        b.toExponential = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== g) {
                if (t !== ~~t || t < 0 || t > f) throw Error(v);
                for (r = S(new r.constructor(r), ++t, e); r.c.length < t; ) r.c.push(0);
            }
            return O(r, !0, !!n);
        }, 
        /*
 * Return a string representing the value of this Big in normal notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */
        b.toFixed = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== g) {
                if (t !== ~~t || t < 0 || t > f) throw Error(v);
                // x.e may have changed if the value is rounded up.
                for (t = t + (r = S(new r.constructor(r), t + r.e + 1, e)).e + 1; r.c.length < t; ) r.c.push(0);
            }
            return O(r, !1, !!n);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */
        b[Symbol.for("nodejs.util.inspect.custom")] = b.toJSON = b.toString = function() {
            var t = this, e = t.constructor;
            return O(t, t.e <= e.NE || t.e >= e.PE, !!t.c[0]);
        }, 
        /*
 * Return the value of this Big as a primitve number.
 */
        b.toNumber = function() {
            var t = Number(O(this, !0, !0));
            if (!0 === this.constructor.strict && !this.eq(t.toString())) throw Error(p + "Imprecise conversion");
            return t;
        }, 
        /*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * rounding mode rm, or Big.RM if rm is not specified.
 * Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        b.toPrecision = function(t, e) {
            var r = this, n = r.constructor, o = r.c[0];
            if (t !== g) {
                if (t !== ~~t || t < 1 || t > f) throw Error(y + "precision");
                for (r = S(new n(r), t, e); r.c.length < t; ) r.c.push(0);
            }
            return O(r, t <= r.e || r.e <= n.NE || r.e >= n.PE, !!o);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */
        b.valueOf = function() {
            var t = this, e = t.constructor;
            if (!0 === e.strict) throw Error(p + "valueOf disallowed");
            return O(t, t.e <= e.NE || t.e >= e.PE, !0);
        };
        // Export
        (
        /*
 * Create and return a Big constructor.
 */
        function t() {
            /*
   * The Big constructor and exported function.
   * Create and return a new instance of a Big number object.
   *
   * n {number|string|Big} A numeric value.
   */
            function e(r) {
                var n = this;
                // Enable constructor usage without new.
                                if (!(n instanceof e)) return r === g ? t() : new e(r);
                // Duplicate.
                                if (r instanceof e) n.s = r.s, n.e = r.e, n.c = r.c.slice(); else {
                    if ("string" != typeof r) {
                        if (!0 === e.strict && "bigint" != typeof r) throw TypeError(y + "value");
                        // Minus zero?
                                                r = 0 === r && 1 / r < 0 ? "-0" : String(r);
                    }
                    !
                    /*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */
                    function(t, e) {
                        var r, n, o;
                        if (!w.test(e)) throw Error(y + "number");
                        // Determine sign.
                                                // Decimal point?
                        t.s = "-" == e.charAt(0) ? (e = e.slice(1), -1) : 1, (r = e.indexOf(".")) > -1 && (e = e.replace(".", ""));
                        // Exponential form?
                                                (n = e.search(/e/i)) > 0 ? (
                        // Determine exponent.
                        r < 0 && (r = n), r += +e.slice(n + 1), e = e.substring(0, n)) : r < 0 && (
                        // Integer.
                        r = e.length);
                        // Determine leading zeros.
                        for (o = e.length, n = 0; n < o && "0" == e.charAt(n); ) ++n;
                        if (n == o) 
                        // Zero.
                        t.c = [ t.e = 0 ]; else {
                            // Determine trailing zeros.
                            for (;o > 0 && "0" == e.charAt(--o); ) ;
                            // Convert string to array of digits without leading/trailing zeros.
                            for (t.e = r - n - 1, t.c = [], r = 0; n <= o; ) t.c[r++] = +e.charAt(n++);
                        }
                    }(n, r);
                }
                // Retain a reference to this Big constructor.
                // Shadow Big.prototype.constructor which points to Object.
                                n.constructor = e;
            }
            return e.prototype = b, e.DP = 20, e.RM = 1, e.NE = -7, e.PE = 21, e.strict = false, 
            e.roundDown = 0, e.roundHalfUp = 1, e.roundHalfEven = 2, e.roundUp = 3, e;
        })();
        /// <reference types="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts" />
        /* harmony default export */        // ./node_modules/trading-signals/dist/error/NotEnoughDataError.js
        function j(t) {
            return j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, j(t);
        }
        function P(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, _(n.key), n);
            }
        }
        function _(t) {
            var e = function(t, e) {
                if ("object" != j(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != j(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == j(e) ? e : e + "";
        }
        function A(t, e, r) {
            return e = T(e), function(t, e) {
                if (e && ("object" == j(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, E() ? Reflect.construct(e, r || [], T(t).constructor) : e.apply(t, r));
        }
        function x(t) {
            var e = "function" == typeof Map ? new Map : void 0;
            return x = function(t) {
                if (null === t || !function(t) {
                    try {
                        return -1 !== Function.toString.call(t).indexOf("[native code]");
                    } catch (e) {
                        return "function" == typeof t;
                    }
                }(t)) return t;
                if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, r);
                }
                function r() {
                    return function(t, e, r) {
                        if (E()) return Reflect.construct.apply(null, arguments);
                        var n = [ null ];
                        n.push.apply(n, e);
                        var o = new (t.bind.apply(t, n));
                        return r && k(o, r.prototype), o;
                    }(t, arguments, T(this).constructor);
                }
                return r.prototype = Object.create(t.prototype, {
                    constructor: {
                        value: r,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), k(r, t);
            }, x(t);
        }
        function E() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (E = function() {
                return !!t;
            })();
        }
        function k(t, e) {
            return k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, k(t, e);
        }
        function T(t) {
            return T = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, T(t);
        }
        var I =  function(t) {
            function e() {
                var t, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Not enough data";
                return function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, e), t = A(this, e, [ r ]), Object.setPrototypeOf(t, (this instanceof e ? this.constructor : void 0).prototype), 
                t.name = "NotEnoughDataError", t;
            }
            return function(t, e) {
                if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                t.prototype = Object.create(e && e.prototype, {
                    constructor: {
                        value: t,
                        writable: !0,
                        configurable: !0
                    }
                }), Object.defineProperty(t, "prototype", {
                    writable: !1
                }), e && k(t, e);
            }(e, t), r = e, n && P(r.prototype, n), o && P(r, o), Object.defineProperty(r, "prototype", {
                writable: !1
            }), r;
            var r, n, o;
        }( x(Error));
        // ./node_modules/trading-signals/dist/Indicator.js
        function M(t) {
            return M = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, M(t);
        }
        function D(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function R(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, B(n.key), n);
            }
        }
        function C(t, e, r) {
            return e && R(t.prototype, e), r && R(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function L(t, e, r) {
            return (e = B(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function B(t) {
            var e = function(t, e) {
                if ("object" != M(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != M(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == M(e) ? e : e + "";
        }
        var N =  function() {
            return C((function t() {
                D(this, t), L(this, "previousHighest", void 0), L(this, "highest", void 0), L(this, "previousLowest", void 0), 
                L(this, "lowest", void 0), L(this, "previousResult", void 0), L(this, "result", void 0);
            }), [ {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "setResult",
                value: function(t, e) {
                    return e && (this.highest = this.previousHighest, this.lowest = this.previousLowest, 
                    this.result = this.previousResult), void 0 === this.highest ? this.highest = t : t > this.highest ? (this.previousHighest = this.highest, 
                    this.highest = t) : this.previousHighest = this.highest, void 0 === this.lowest ? this.lowest = t : t < this.lowest ? (this.previousLowest = this.lowest, 
                    this.lowest = t) : this.previousLowest = this.lowest, this.previousResult = this.result, 
                    this.result = t;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/MA/MovingAverage.js
        function V(t) {
            return V = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, V(t);
        }
        function H(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function U(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Y(n.key), n);
            }
        }
        function q(t, e, r) {
            return e && U(t.prototype, e), r && U(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function $(t, e, r) {
            return e = z(e), function(t, e) {
                if (e && ("object" == V(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, F() ? Reflect.construct(e, r || [], z(t).constructor) : e.apply(t, r));
        }
        function F() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (F = function() {
                return !!t;
            })();
        }
        function z(t) {
            return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, z(t);
        }
        function G(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && K(t, e);
        }
        function K(t, e) {
            return K = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, K(t, e);
        }
        function J(t, e, r) {
            return (e = Y(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Y(t) {
            var e = function(t, e) {
                if ("object" != V(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != V(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == V(e) ? e : e + "";
        }
        var Q =  function(t) {
            function e(t) {
                var r;
                return H(this, e), J(r = $(this, e), "interval", void 0), r.interval = t, r;
            }
            return G(e, t), q(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }(N);
        // ./node_modules/trading-signals/dist/SMA/SMA.js
        function W(t) {
            return W = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, W(t);
        }
        function X(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Z(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, ut(n.key), n);
            }
        }
        function tt(t, e, r) {
            return e && Z(t.prototype, e), r && Z(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function et(t, e, r) {
            return e = nt(e), function(t, e) {
                if (e && ("object" == W(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, rt() ? Reflect.construct(e, r || [], nt(t).constructor) : e.apply(t, r));
        }
        function rt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (rt = function() {
                return !!t;
            })();
        }
        function nt(t) {
            return nt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, nt(t);
        }
        function ot(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && it(t, e);
        }
        function it(t, e) {
            return it = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, it(t, e);
        }
        function at(t, e, r) {
            return (e = ut(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function ut(t) {
            var e = function(t, e) {
                if ("object" != W(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != W(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == W(e) ? e : e + "";
        }
        var lt =  function(t) {
            function e() {
                var t;
                X(this, e);
                for (var r = arguments.length, n = new Array(r), o = 0; o < r; o++) n[o] = arguments[o];
                return at(t = et(this, e, [].concat(n)), "prices", []), t;
            }
            return ot(e, t), tt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t), 
                    this.prices.length > this.interval && this.prices.shift(), this.prices.length === this.interval) {
                        var r = this.prices.reduce((function(t, e) {
                            return t + e;
                        }), 0);
                        return this.setResult(r / this.prices.length, e);
                    }
                }
            } ]);
        }(Q);
        // ./node_modules/trading-signals/dist/WSMA/WSMA.js
        function ct(t) {
            return ct = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ct(t);
        }
        function st(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function ft(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, gt(n.key), n);
            }
        }
        function ht(t, e, r) {
            return e && ft(t.prototype, e), r && ft(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function pt(t, e, r) {
            return e = vt(e), function(t, e) {
                if (e && ("object" == ct(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, yt() ? Reflect.construct(e, r || [], vt(t).constructor) : e.apply(t, r));
        }
        function yt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (yt = function() {
                return !!t;
            })();
        }
        function vt(t) {
            return vt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, vt(t);
        }
        function mt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && dt(t, e);
        }
        function dt(t, e) {
            return dt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, dt(t, e);
        }
        function bt(t, e, r) {
            return (e = gt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function gt(t) {
            var e = function(t, e) {
                if ("object" != ct(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != ct(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == ct(e) ? e : e + "";
        }
        var wt =  function(t) {
            function e(t) {
                var r;
                return st(this, e), bt(r = pt(this, e), "interval", void 0), bt(r, "indicator", void 0), 
                bt(r, "smoothingFactor", void 0), r.interval = t, r.indicator = new lt(t), r.smoothingFactor = 1 / r.interval, 
                r;
            }
            return mt(e, t), ht(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = this.indicator.update(t);
                    if (e && void 0 !== this.previousResult) {
                        var n = (t - this.previousResult) * this.smoothingFactor;
                        return this.setResult(n + this.previousResult, e);
                    }
                    if (!e && void 0 !== this.result) {
                        var o = (t - this.result) * this.smoothingFactor;
                        return this.setResult(o + this.result, e);
                    }
                    if (void 0 === this.result && void 0 !== r) return this.setResult(r, e);
                }
            } ]);
        }(N);
        function St(t) {
            return t.length ? t.reduce((function(t, e) {
                return t + e;
            }), 0) / t.length : 0;
        }
        // ./node_modules/trading-signals/dist/BBANDS/BollingerBands.js
        function Ot(t) {
            return Ot = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ot(t);
        }
        function jt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Pt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, xt(n.key), n);
            }
        }
        function _t(t, e, r) {
            return e && Pt(t.prototype, e), r && Pt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function At(t, e, r) {
            return (e = xt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function xt(t) {
            var e = function(t, e) {
                if ("object" != Ot(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ot(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ot(e) ? e : e + "";
        }
        var Et =  function() {
            return _t((function t(e) {
                var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                jt(this, t), At(this, "interval", void 0), At(this, "deviationMultiplier", void 0), 
                At(this, "prices", []), At(this, "result", void 0), this.interval = e, this.deviationMultiplier = r;
            }), [ {
                key: "update",
                value: function(t) {
                    if (this.prices.push(t), this.prices.length > this.interval) {
                        this.prices.shift();
                        var e = St(this.prices), r = function(t, e) {
                            var r = e || St(t), n = St(t.map((function(t) {
                                return t - r;
                            })).map((function(t) {
                                return t * t;
                            })));
                            return Math.sqrt(n);
                        }(this.prices, e);
                        return this.result = {
                            lower: e - r * this.deviationMultiplier,
                            middle: e,
                            upper: e + r * this.deviationMultiplier
                        };
                    }
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/EMA/EMA.js
        function kt(t) {
            return kt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, kt(t);
        }
        function Tt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function It(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Vt(n.key), n);
            }
        }
        function Mt(t, e, r) {
            return e && It(t.prototype, e), r && It(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Dt(t, e, r) {
            return e = Ct(e), function(t, e) {
                if (e && ("object" == kt(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, Rt() ? Reflect.construct(e, r || [], Ct(t).constructor) : e.apply(t, r));
        }
        function Rt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (Rt = function() {
                return !!t;
            })();
        }
        function Ct(t) {
            return Ct = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, Ct(t);
        }
        function Lt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && Bt(t, e);
        }
        function Bt(t, e) {
            return Bt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, Bt(t, e);
        }
        function Nt(t, e, r) {
            return (e = Vt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Vt(t) {
            var e = function(t, e) {
                if ("object" != kt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != kt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == kt(e) ? e : e + "";
        }
        var Ht =  function(t) {
            function e(t) {
                var r;
                return Tt(this, e), Nt(r = Dt(this, e, [ t ]), "interval", void 0), Nt(r, "pricesCounter", 0), 
                Nt(r, "weightFactor", void 0), r.interval = t, r.weightFactor = 2 / (r.interval + 1), 
                r;
            }
            return Lt(e, t), Mt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return e ? e && 0 === this.pricesCounter && this.pricesCounter++ : this.pricesCounter++, 
                    e && void 0 !== this.previousResult ? this.setResult(t * this.weightFactor + this.previousResult * (1 - this.weightFactor), e) : this.setResult(t * this.weightFactor + (void 0 !== this.result ? this.result : t) * (1 - this.weightFactor), e);
                }
            }, {
                key: "getResult",
                value: function() {
                    if (this.pricesCounter < this.interval) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    try {
                        return this.getResult(), !0;
                    } catch (t) {
                        return !1;
                    }
                }
            } ]);
        }(Q);
        // ./node_modules/trading-signals/dist/MACD/MACD.js
        function Ut(t) {
            return Ut = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ut(t);
        }
        function qt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function $t(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Gt(n.key), n);
            }
        }
        function Ft(t, e, r) {
            return e && $t(t.prototype, e), r && $t(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function zt(t, e, r) {
            return (e = Gt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Gt(t) {
            var e = function(t, e) {
                if ("object" != Ut(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ut(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ut(e) ? e : e + "";
        }
        var Kt =  function() {
            return Ft((function t(e, r, n) {
                qt(this, t), zt(this, "short", void 0), zt(this, "long", void 0), zt(this, "signal", void 0), 
                zt(this, "prices", []), zt(this, "result", void 0), this.short = e, this.long = r, 
                this.signal = n;
            }), [ {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t);
                    var r = this.short.update(t, e), n = this.long.update(t, e);
                    if (this.prices.length > this.long.interval && this.prices.shift(), this.prices.length === this.long.interval) {
                        var o = r - n, i = this.signal.update(o, e);
                        return this.result = {
                            histogram: o - i,
                            macd: o,
                            signal: i
                        };
                    }
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/RSI/RSI.js
        function Jt(t) {
            return Jt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Jt(t);
        }
        function Yt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Qt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, oe(n.key), n);
            }
        }
        function Wt(t, e, r) {
            return e && Qt(t.prototype, e), r && Qt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Xt(t, e, r) {
            return e = te(e), function(t, e) {
                if (e && ("object" == Jt(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, Zt() ? Reflect.construct(e, r || [], te(t).constructor) : e.apply(t, r));
        }
        function Zt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (Zt = function() {
                return !!t;
            })();
        }
        function te(t) {
            return te = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, te(t);
        }
        function ee(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && re(t, e);
        }
        function re(t, e) {
            return re = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, re(t, e);
        }
        function ne(t, e, r) {
            return (e = oe(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function oe(t) {
            var e = function(t, e) {
                if ("object" != Jt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Jt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Jt(e) ? e : e + "";
        }
        var ie =  function(t) {
            function e(t) {
                var r, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : wt;
                return Yt(this, e), ne(r = Xt(this, e), "interval", void 0), ne(r, "previousPrices", []), 
                ne(r, "avgGain", void 0), ne(r, "avgLoss", void 0), ne(r, "maxValue", 100), r.interval = t, 
                r.avgGain = new n(r.interval), r.avgLoss = new n(r.interval), r;
            }
            return ee(e, t), Wt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.previousPrices.length && e ? this.previousPrices[this.previousPrices.length - 1] = t : this.previousPrices.push(t), 
                    !(this.previousPrices.length < 2)) {
                        var r = t, n = this.previousPrices[this.previousPrices.length - 2];
                        if (r > n ? (this.avgLoss.update(0, e), this.avgGain.update(t - n, e)) : (this.avgLoss.update(n - r, e), 
                        this.avgGain.update(0, e)), this.avgGain.isStable) {
                            var o = this.avgLoss.getResult();
                            if (0 === o) return this.setResult(100, e);
                            var i = this.avgGain.getResult() / o;
                            return this.setResult(this.maxValue - this.maxValue / (i + 1), e);
                        }
                    }
                }
            } ]);
        }(N);
        // ./src/oscillators/rsi.js
        function ae(t) {
            return ae = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ae(t);
        }
        function ue(t) {
            return function(t) {
                if (Array.isArray(t)) return le(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return le(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? le(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function le(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function ce(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != ae(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != ae(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == ae(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        // ./src/moving-averages/movingAverages.js
        function se(t) {
            return function(t) {
                if (Array.isArray(t)) return fe(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return fe(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? fe(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function fe(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var he = {
            ema: Ht,
            sma: lt
        }, pe = function(t, e, r, n, o) {
            var i = o.target, a = o.lag, u = t.verticalOhlcv, l = t.instances, c = t.priceBased, s = t.lastIndexReplace, f = "string" == typeof i && u.hasOwnProperty(i) && "close" !== i ? "_".concat(i) : "", h = "".concat(r, "_").concat(n).concat(f);
            if (0 === e) {
                var p = t.nullArray;
                if (!u.hasOwnProperty(i)) throw new Error("Target property ".concat(i, " not found in verticalOhlcv for ").concat(r, "."));
                // Create the main moving average instance.
                                l[h] = {
                    maInstance: new he[r](n)
                }, u[h] = se(p), c.push(h), a > 0 && t.lag([ h ], a);
            }
            // Retrieve the current price value.
                        var y = u[i][e], v = l[h].maInstance;
            // Update the moving average instance.
            v.update(y, s);
            var m = null;
            try {
                m = v.getResult();
            } catch (t) {
                m = null;
            }
            // Always push the MA value (even if null).
                        return t.pushToMain({
                index: e,
                key: h,
                value: m
            }), !0;
        };
        // ./src/moving-averages/macd.js
        function ye(t) {
            return ye = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ye(t);
        }
        function ve(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != ye(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != ye(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == ye(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function me(t) {
            return function(t) {
                if (Array.isArray(t)) return de(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return de(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? de(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function de(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var be = "close";
        // ./src/moving-averages/relativeVolume.js
        function ge(t) {
            return function(t) {
                if (Array.isArray(t)) return we(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return we(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? we(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function we(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/moving-averages/donchianChannel.js
        function Se(t) {
            return Se = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Se(t);
        }
        function Oe(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function je(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != Se(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != Se(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == Se(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Pe(t) {
            return function(t) {
                if (Array.isArray(t)) return xe(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || Ae(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function _e(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = Ae(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Ae(t, e) {
            if (t) {
                if ("string" == typeof t) return xe(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? xe(t, e) : void 0;
            }
        }
        function xe(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/moving-averages/bollingerBands.js
        function Ee(t) {
            return Ee = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ee(t);
        }
        function ke(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function Te(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != Ee(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != Ee(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == Ee(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Ie(t) {
            return function(t) {
                if (Array.isArray(t)) return Re(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || De(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Me(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = De(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function De(t, e) {
            if (t) {
                if ("string" == typeof t) return Re(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Re(t, e) : void 0;
            }
        }
        function Re(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/oscillators/volumeOscillator.js
        function Ce(t) {
            return function(t) {
                if (Array.isArray(t)) return Le(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return Le(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Le(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Le(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/studies/lag.js
        function Be(t) {
            return function(t) {
                if (Array.isArray(t)) return Ue(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || He(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Ne(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || He(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Ve(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = He(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function He(t, e) {
            if (t) {
                if ("string" == typeof t) return Ue(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Ue(t, e) : void 0;
            }
        }
        function Ue(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function qe(t) {
            return qe = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, qe(t);
        }
        var $e = function(t, e) {
            var r = t.instances, n = t.verticalOhlcv, o = t.nullArray;
            if (0 === e) {
                var i = t.inputParams, a = t.priceBased, u = i.filter((function(t) {
                    return "lag" === t.key;
                }));
                if ("object" !== qe(u)) return;
                var l, c = u.map((function(t) {
                    return t.params;
                })), s = Ve(c);
                try {
                    for (s.s(); !(l = s.n()).done; ) {
                        var f, h = Ne(l.value, 2), p = h[0], y = h[1], v = Ve(p);
                        try {
                            for (v.s(); !(f = v.n()).done; ) {
                                var m = f.value;
                                if (a.includes(m)) for (var d = 1; d <= y; d++) a.push("".concat(m, "_lag_").concat(d));
                            }
                        } catch (t) {
                            v.e(t);
                        } finally {
                            v.f();
                        }
                    }
                } catch (t) {
                    s.e(t);
                } finally {
                    s.f();
                }
                r.lag = {
                    lagParams: c
                };
            }
            var b, g = Ve(r.lag.lagParams);
            try {
                for (g.s(); !(b = g.n()).done; ) {
                    var w, S = Ne(b.value, 2), O = S[0], j = S[1], P = Ve(O);
                    try {
                        for (P.s(); !(w = P.n()).done; ) {
                            var _ = w.value, A = n[_];
                            // Initialize lagged arrays only on the first index
                            if (0 === e) for (var x = 1; x <= j; x++) {
                                n["".concat(_, "_lag_").concat(x)] = Be(o);
                            }
                            // Populate lagged values
                                                        for (var E = 1; E <= j; E++) {
                                var k = "".concat(_, "_lag_").concat(E), T = e - E, I = T <= 0 || void 0 === A[T] ? null : A[T];
                                t.pushToMain({
                                    index: e,
                                    key: k,
                                    value: I
                                });
                            }
                        }
                    } catch (t) {
                        P.e(t);
                    } finally {
                        P.f();
                    }
                }
            } catch (t) {
                g.e(t);
            } finally {
                g.f();
            }
            return !0;
        };
        // ./src/studies/findCrosses.js
        function Fe(t) {
            return function(t) {
                if (Array.isArray(t)) return Ge(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || ze(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function ze(t, e) {
            if (t) {
                if ("string" == typeof t) return Ge(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Ge(t, e) : void 0;
            }
        }
        function Ge(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function Ke(t) {
            return Ke = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ke(t);
        }
        function Je(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Ye(n.key), n);
            }
        }
        function Ye(t) {
            var e = function(t, e) {
                if ("object" != Ke(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ke(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ke(e) ? e : e + "";
        }
        var Qe = function(t, e) {
            return t > e;
        }, We = function(t, e) {
            return t < e;
        }, Xe =  function() {
            return t = function t() {
                !function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), Object.assign(this, {
                    interval: 0,
                    prevState: .5,
                    prevFast: null,
                    prevSlow: null,
                    prevHigh: null,
                    prevLow: null,
                    areHighAndLowUndefined: !1,
                    index: 0,
                    crossIndexes: {
                        up: [],
                        down: []
                    }
                });
            }, (e = [ {
                key: "update",
                value: function(t) {
                    var e = t.fast, r = t.high, n = t.slow, o = t.low, i = this.prevState;
                    this.areHighAndLowUndefined || void 0 !== r && void 0 !== o || (this.areHighAndLowUndefined = !0), 
                    null === e || null === n || function(t, e) {
                        return t === e;
                    }(e, n) ? i = .5 : Qe(e, n) ? i = this.areHighAndLowUndefined ? 1 : [ o, n, this.prevLow, this.prevSlow ].every((function(t) {
                        return null !== t;
                    })) && We(o, n) && Qe(this.prevLow, this.prevSlow) ? 0 : 1 : We(e, n) && (i = this.areHighAndLowUndefined ? 0 : [ r, n, this.prevHigh, this.prevSlow ].every((function(t) {
                        return null !== t;
                    })) && Qe(r, n) && We(this.prevHigh, this.prevSlow) ? 1 : 0), .5 === i ? this.interval = 0 : 1 === i ? this.prevState <= .5 ? this.interval = 1 : this.interval++ : 0 === i && (this.prevState >= .5 ? this.interval = -1 : this.interval--), 
                    1 === this.interval && this.crossIndexes.up.push(this.index), -1 === this.interval && this.crossIndexes.down.push(this.index), 
                    //save prev state
                    Object.assign(this, {
                        index: this.index + 1,
                        prevState: i,
                        prevFast: e,
                        prevSlow: n,
                        prevHigh: r,
                        prevLow: o
                    });
                }
            }, {
                key: "getResult",
                value: function() {
                    return this.interval;
                }
            } ]) && Je(t.prototype, e), r && Je(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, r;
        }(), Ze = function(t, e) {
            var r = t.nullArray, n = t.verticalOhlcv, o = t.instances, i = t.len;
            if (0 === e) {
                var a = t.inputParams.filter((function(t) {
                    return "crossPairs" === t.key;
                }));
                if ("object" !== Ke(a)) return;
                o.crossPairs = {
                    crossPairsList: a.flatMap((function(t) {
                        return t.params.flat();
                    }))
                };
            }
            var u, l = function(t, e) {
                var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (!r) {
                    if (Array.isArray(t) || (r = ze(t)) || e && t && "number" == typeof t.length) {
                        r && (t = r);
                        var n = 0, o = function() {};
                        return {
                            s: o,
                            n: function() {
                                return n >= t.length ? {
                                    done: !0
                                } : {
                                    done: !1,
                                    value: t[n++]
                                };
                            },
                            e: function(t) {
                                throw t;
                            },
                            f: o
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var i, a = !0, u = !1;
                return {
                    s: function() {
                        r = r.call(t);
                    },
                    n: function() {
                        var t = r.next();
                        return a = t.done, t;
                    },
                    e: function(t) {
                        u = !0, i = t;
                    },
                    f: function() {
                        try {
                            a || null == r.return || r.return();
                        } finally {
                            if (u) throw i;
                        }
                    }
                };
            }(o.crossPairs.crossPairsList);
            try {
                for (l.s(); !(u = l.n()).done; ) {
                    var c = u.value, s = c.fast, f = c.slow;
                    if (null != s && null != f) {
                        var h = "".concat(s, "_x_").concat(f);
                        if (0 === e) {
                            if ("number" == typeof f && (n[f] = new Array(i).fill(f)), "price" !== s && !n.hasOwnProperty(s)) throw Error('fast "'.concat(s, ' not found in crossPairs"'));
                            if (!n.hasOwnProperty(f)) throw Error('slow "'.concat(f, ' not found in crossPairs"'));
                            o[h] = new Xe, n[h] = Fe(r);
                        }
                        var p = void 0, y = void 0, v = void 0, m = void 0, d = void 0;
                        "price" === s ? (y = n.close[e], v = n.high[e], m = n.low[e], d = n[f][e], o[h].update({
                            fast: y,
                            slow: d,
                            high: v,
                            low: m
                        })) : (p = n[s][e], d = n[f][e], o[h].update({
                            fast: p,
                            slow: d
                        })), t.pushToMain({
                            index: e,
                            key: h,
                            value: o[h].getResult()
                        });
                    }
                }
            } catch (t) {
                l.e(t);
            } finally {
                l.f();
            }
        };
        // ./src/studies/dateTime.js
        function tr(t) {
            return tr = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, tr(t);
        }
        function er(t) {
            return function(t) {
                if (Array.isArray(t)) return rr(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return rr(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? rr(t, e) : void 0;
                }
            }(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function rr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function nr(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function or(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != tr(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != tr(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == tr(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var ir = function(t) {
            var e = new Date(t), r = e.getMonth(), n = e.getFullYear(), o = e.getHours(), i = e.getMinutes(), a = e.getDay(), u = e.getDate(), l = new Date(e.getFullYear(), e.getMonth(), 1).getDay();
            return {
                month: r,
                year: n,
                hour: o,
                minute: i,
                day_of_the_week: a,
                day_of_the_month: u,
                week_of_the_month: Math.ceil((u + l) / 7)
            };
        };
        // ./src/studies/scaler.js
        function ar(t) {
            return function(t) {
                if (Array.isArray(t)) return sr(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || cr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function ur(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = cr(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function lr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            /* General Scaler: supports "minmax" and "zscore" types */ (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || cr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function cr(t, e) {
            if (t) {
                if ("string" == typeof t) return sr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? sr(t, e) : void 0;
            }
        }
        function sr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/utilities/numberUtilities.js
        function fr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            // Helper to clean non-numeric characters (except "-" at the start and decimal point)
            (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return hr(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? hr(t, e) : void 0;
                }
            }(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function hr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var pr = function(t) {
            return t.replace(/(?!^-)[^0-9.]/g, "");
        }, yr = [ "open", "high", "low", "close" ];
        function vr(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = gr(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function mr(t, e) {
            if (null == t) return {};
            var r, n, o = function(t, e) {
                if (null == t) return {};
                var r = {};
                for (var n in t) if ({}.hasOwnProperty.call(t, n)) {
                    if (e.includes(n)) continue;
                    r[n] = t[n];
                }
                return r;
            }(t, e);
            if (Object.getOwnPropertySymbols) {
                var i = Object.getOwnPropertySymbols(t);
                for (n = 0; n < i.length; n++) r = i[n], e.includes(r) || {}.propertyIsEnumerable.call(t, r) && (o[r] = t[r]);
            }
            return o;
        }
        function dr(t) {
            return function(t) {
                if (Array.isArray(t)) return wr(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || gr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function br(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            // Map indicator keys to their respective functions
            (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || gr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function gr(t, e) {
            if (t) {
                if ("string" == typeof t) return wr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? wr(t, e) : void 0;
            }
        }
        function wr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var Sr = {
            dateTime: function(t, e, r) {
                var n = r.lag, o = t.instances, i = t.verticalOhlcv;
                if (0 === e) {
                    var a = t.nullArray;
                    if (!t.isValidDate) throw Error('dateTime method found and invalid "date" in input ohlcv');
                    var u = i.date[0].slice(0, 10);
                    Object.assign(o, {
                        dateTime: {
                            prevDateStr: u,
                            sessionDailyIndexCount: 0,
                            sessionIntradayIndexCount: 0,
                            cachedDayInfo: u
                        }
                    });
                    var l = [ "day_of_the_week", "day_of_the_month", "week_of_the_month", "hour", "month", "year", "session_daily_index", "session_intraday_index" ];
                    Object.assign(i, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? nr(Object(r), !0).forEach((function(e) {
                                or(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : nr(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, Object.fromEntries(l.map((function(t) {
                        return [ t, er(a) ];
                    }))))), n > 0 && t.lag(l, n);
                }
                var c = i.date[e], s = ir(c), f = s.day_of_the_week, h = s.day_of_the_month, p = s.week_of_the_month, y = s.month, v = s.year, m = s.hour, d = c.slice(0, 10);
                d !== o.dateTime.prevDateStr && (o.dateTime.prevDateStr = d, o.dateTime.sessionDailyIndexCount++, 
                o.dateTime.sessionIntradayIndexCount = 0), t.pushToMain({
                    index: e,
                    key: "session_daily_index",
                    value: o.dateTime.sessionDailyIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "session_intraday_index",
                    value: o.dateTime.sessionIntradayIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_week",
                    value: f
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_month",
                    value: h
                }), t.pushToMain({
                    index: e,
                    key: "week_of_the_month",
                    value: p
                }), t.pushToMain({
                    index: e,
                    key: "month",
                    value: y
                }), t.pushToMain({
                    index: e,
                    key: "year",
                    value: v
                }), t.pushToMain({
                    index: e,
                    key: "hour",
                    value: m
                }), o.dateTime.sessionIntradayIndexCount++;
            },
            rsi: function(t, e, r, n) {
                var o = n.target, i = n.lag, a = t.verticalOhlcv, u = t.instances, l = t.lastIndexReplace, c = "close" === o ? "" : "_".concat(o), s = "rsi_".concat(r).concat(c), f = "rsi_sma_".concat(r).concat(c);
                // Initialization on the first index.
                if (0 === e) {
                    var h = t.crossPairsList, p = t.nullArray;
                    if (!a.hasOwnProperty(o)) throw new Error("Target property ".concat(o, " not found in verticalOhlcv for rsi."));
                    h.push({
                        fast: s,
                        slow: f,
                        isDefault: !0
                    }), Object.assign(u, ce(ce({}, s, new ie(r)), f, new lt(r))), Object.assign(a, ce(ce({}, s, ue(p)), f, ue(p))), 
                    i > 0 && t.lag([ s, f ], i);
                }
                var y = a[o][e], v = null, m = null;
                // Update the RSI indicator.
                u[s].update(y, l);
                try {
                    v = u[s].getResult();
                } catch (t) {
                    v = null;
                }
                // Always push the RSI value, using null as a fallback.
                                t.pushToMain({
                    index: e,
                    key: s,
                    value: v
                }), 
                // Update the SMA indicator only if a valid RSI value is available.
                null !== v && "number" == typeof v && u[f].update(v, l);
                try {
                    m = u[f].getResult();
                } catch (t) {
                    m = null;
                }
                // Always push the smoothed RSI value.
                                t.pushToMain({
                    index: e,
                    key: f,
                    value: m
                });
            },
            ema: pe,
            sma: pe,
            macd: function(t, e, r, n, o, i) {
                var a = i.target, u = i.lag, l = t.verticalOhlcv, c = t.instances, s = t.lastIndexReplace, f = "".concat(r, "_").concat(n, "_").concat(o).concat(a === be ? "" : "_".concat(a));
                // Initialization on the first index.
                if (0 === e) {
                    var h = t.inputParams, p = t.crossPairsList, y = t.nullArray, v = t.priceBased;
                    if (!l.hasOwnProperty(a)) throw new Error("Target property ".concat(a, " not found in verticalOhlcv for macd."));
                    var m = h.filter((function(t) {
                        return "macd" === t.key;
                    })).length, d = m > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", b = a === be ? "".concat(d, "_diff") : "".concat(d, "_diff_").concat(a), g = a === be ? "".concat(d, "_dea") : "".concat(d, "_dea_").concat(a), w = a === be ? "".concat(d, "_histogram") : "".concat(d, "_histogram_").concat(a);
                    // Choose a display prefix based on the number of indicators.
                                        p.push({
                        fast: b,
                        slow: g,
                        isDefault: !0
                    }), c.hasOwnProperty("macd") || (c.macd = {
                        numberOfIndicators: m,
                        settings: {}
                    }), c.macd.settings[f] = new Kt(new Ht(r), new Ht(n), new Ht(o)), Object.assign(l, ve(ve(ve({}, b, me(y)), g, me(y)), w, me(y))), 
                    v.push(b, g, w), u > 0 && t.lag([ b, g, w ], u);
                }
                var S = c.macd, O = S.numberOfIndicators, j = S.settings, P = O > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", _ = a === be ? "".concat(P, "_diff") : "".concat(P, "_diff_").concat(a), A = a === be ? "".concat(P, "_dea") : "".concat(P, "_dea_").concat(a), x = a === be ? "".concat(P, "_histogram") : "".concat(P, "_histogram_").concat(a), E = j[f], k = l[a][e];
                E.update(k, s);
                var T = null;
                try {
                    T = E.getResult();
                } catch (t) {
                    // If the result is unavailable, macdResult remains null.
                    T = null;
                }
                // Always push values; use null as fallback when macdResult is missing.
                                return t.pushToMain({
                    index: e,
                    key: _,
                    value: T ? T.macd : null
                }), t.pushToMain({
                    index: e,
                    key: A,
                    value: T ? T.signal : null
                }), t.pushToMain({
                    index: e,
                    key: x,
                    value: T ? T.histogram : null
                }), !0;
            },
            relativeVolume: function(t, e, r, n) {
                var o = n.lag, i = "relative_volume_".concat(r), a = t.instances, u = t.verticalOhlcv, l = t.lastIndexReplace;
                if (0 === e) {
                    var c = t.nullArray;
                    a[i] = {
                        instance: new lt(r),
                        prevRelativeVolumeSma: null
                    }, u[i] = ge(c), o > 0 && t.lag([ i ], o);
                }
                var s = u.volume[e], f = a[i].instance;
                f.update(s, l);
                var h = null;
                try {
                    h = f.getResult();
                } catch (t) {
                    h = null;
                }
                var p = a[i].prevRelativeVolumeSma, y = null;
                // Only calculate relative volume if both current SMA and previous SMA are valid numbers and prevSma is not zero.
                return "number" == typeof h && "number" == typeof p && 0 !== p && (y = s / p), t.pushToMain({
                    index: e,
                    key: i,
                    value: y
                }), a[i].prevRelativeVolumeSma = h, !0;
            },
            donchianChannels: function(t, e, r, n, o) {
                var i = o.height, a = o.range, u = o.lag, l = "".concat(r, "_").concat(n), c = t.verticalOhlcv, s = t.instances, f = t.len;
                t.lastIndexReplace;
                // Initialization: create output arrays and indicator instance on the first call.
                if (0 === e) {
                    var h = t.inputParams, p = t.priceBased, y = t.nullArray, v = h.filter((function(t) {
                        return "donchianChannels" === t.key;
                    })).length, m = v > 1 ? "donchian_channel_".concat(l) : "donchian_channel", d = [ "".concat(m, "_upper"), "".concat(m, "_basis"), "".concat(m, "_lower") ];
                    i && d.push("".concat(m, "_height")), s.hasOwnProperty("donchian_channel") || (s.donchian_channel = {
                        numberOfIndicators: v,
                        settings: {}
                    });
                    // Set up additional arrays for each range property.
                    var b, g = _e(a);
                    try {
                        for (g.s(); !(b = g.n()).done; ) {
                            var w = b.value;
                            if (!(w in c) || !p.includes(w)) throw new Error('Invalid range item value "'.concat(w, '" property for donchianChannels. Only price based key names are accepted:\n').concat(JSON.stringify(p)));
                            d.push("".concat(m, "_range_").concat(w));
                        }
                    } catch (t) {
                        g.e(t);
                    } finally {
                        g.f();
                    }
                    var S = Object.fromEntries(d.map((function(t) {
                        return [ t, Pe(y) ];
                    })));
                    Object.assign(c, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? Oe(Object(r), !0).forEach((function(e) {
                                je(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Oe(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, S)), u > 0 && t.lag(d, u), p.push("".concat(m, "_upper"), "".concat(m, "_basis"), "".concat(m, "_lower")), 
                    s.donchian_channel.settings[l] = {
                        maxDeque: [],
                        // will hold indices for highs in descending order
                        minDeque: []
                    };
                }
                var O = s.donchian_channel.numberOfIndicators > 1 ? "donchian_channel_".concat(l) : "donchian_channel", j = s.donchian_channel.settings[l], P = j.maxDeque, _ = j.minDeque, A = e - n, x = A + 1, E = x - r;
                // window: [startIdx, endIdx)
                // If the window is not fully available, push null values for all computed outputs.
                if (E < 0 || x > f) {
                    t.pushToMain({
                        index: e,
                        key: "".concat(O, "_upper"),
                        value: null
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(O, "_basis"),
                        value: null
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(O, "_lower"),
                        value: null
                    }), i && t.pushToMain({
                        index: e,
                        key: "".concat(O, "_height"),
                        value: null
                    });
                    var k, T = _e(a);
                    try {
                        for (T.s(); !(k = T.n()).done; ) {
                            var I = k.value;
                            t.pushToMain({
                                index: e,
                                key: "".concat(O, "_range_").concat(I),
                                value: null
                            });
                        }
                    } catch (t) {
                        T.e(t);
                    } finally {
                        T.f();
                    }
                    return !0;
                }
                // **Update the maximum deque:**
                for (var M = c.high, D = c.low; P.length && P[0] < E; ) P.shift();
                for (;P.length && M[P[P.length - 1]] <= M[A]; ) P.pop();
                // **Update the minimum deque:**
                for (P.push(A); _.length && _[0] < E; ) _.shift();
                for (;_.length && D[_[_.length - 1]] >= D[A]; ) _.pop();
                _.push(A);
                // Retrieve computed values with safety checks.
                var R = P.length ? M[P[0]] : null, C = _.length ? D[_[0]] : null, L = "number" == typeof R && "number" == typeof C ? (R + C) / 2 : null;
                // Process height if enabled.
                if (
                // Always push the main indicator values.
                t.pushToMain({
                    index: e,
                    key: "".concat(O, "_upper"),
                    value: R
                }), t.pushToMain({
                    index: e,
                    key: "".concat(O, "_basis"),
                    value: L
                }), t.pushToMain({
                    index: e,
                    key: "".concat(O, "_lower"),
                    value: C
                }), i) {
                    var B = null;
                    "number" == typeof R && "number" == typeof C && 0 !== C && (B = (R - C) / C), t.pushToMain({
                        index: e,
                        key: "".concat(O, "_height"),
                        value: B
                    });
                }
                // Process each range property.
                                var N, V = _e(a);
                try {
                    for (V.s(); !(N = V.n()).done; ) {
                        var H = N.value, U = null, q = c[H][e];
                        "number" == typeof q && "number" == typeof R && "number" == typeof C && R - C != 0 && (U = (q - C) / (R - C)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(O, "_range_").concat(H),
                            value: U
                        });
                    }
                } catch (t) {
                    V.e(t);
                } finally {
                    V.f();
                }
                return !0;
            },
            bollingerBands: function(t, e, r, n, o) {
                var i, a, u, l, c, s, f, h = o.height, p = o.range, y = void 0 === p ? [] : p, v = o.target, m = o.lag, d = t.verticalOhlcv, b = t.instances, g = t.lastIndexReplace, w = "close" === v ? "" : "_".concat(v), S = "".concat(r, "_").concat(n).concat(w);
                // Initialization on the first call.
                if (0 === e) {
                    var O = t.priceBased, j = t.inputParams, P = t.nullArray, _ = t.verticalOhlcv;
                    if (!(v in _)) throw new Error('bollingerBands could not find target "'.concat(v, '"'));
                    var A = j.filter((function(t) {
                        return "bollingerBands" === t.key;
                    })).length;
                    f = A > 1 ? "bollinger_bands_".concat(S) : "bollinger_bands".concat(w), 
                    // Only create the container if it doesn't already exist.
                    b.bollinger_bands || (b.bollinger_bands = {
                        numberOfIndicators: A,
                        settings: {}
                    }), 
                    // Add (or override) the indicator instance keyed by indicatorKey.
                    b.bollinger_bands.settings[S] = new Et(r, n);
                    var x = [ "".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower") ];
                    h && x.push("".concat(f, "_height"));
                    // Set up additional arrays for each range property.
                                        var E, k = Me(y);
                    try {
                        for (k.s(); !(E = k.n()).done; ) {
                            var T = E.value;
                            if (!(T in _) || !O.includes(T)) throw new Error('Invalid range item value "'.concat(T, '" property for bollingerBands. Only price based key names are accepted:\n').concat(JSON.stringify(O)));
                            x.push("".concat(f, "_range_").concat(T));
                        }
                    } catch (t) {
                        k.e(t);
                    } finally {
                        k.f();
                    }
                    var I = Object.fromEntries(x.map((function(t) {
                        return [ t, Ie(P) ];
                    })));
                    Object.assign(_, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? ke(Object(r), !0).forEach((function(e) {
                                Te(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : ke(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, I)), m > 0 && t.lag(x, m), O.push("".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower"));
                }
                // Derive prefix for subsequent calls if not set.
                                f || (f = b.bollinger_bands.numberOfIndicators > 1 ? "bollinger_bands_".concat(S) : "bollinger_bands".concat(w));
                var M = f, D = b.bollinger_bands.settings[S], R = d[v][e];
                // Update the indicator with the current value.
                                D.update(R, g);
                // Attempt to retrieve the result.
                var C = null;
                try {
                    C = D.getResult();
                } catch (t) {
                    // If not available, result stays null.
                }
                // Use null fallbacks for the primary values.
                                var L = null !== (i = null === (a = C) || void 0 === a ? void 0 : a.upper) && void 0 !== i ? i : null, B = null !== (u = null === (l = C) || void 0 === l ? void 0 : l.middle) && void 0 !== u ? u : null, N = null !== (c = null === (s = C) || void 0 === s ? void 0 : s.lower) && void 0 !== c ? c : null;
                // Process height if requested.
                if (
                // Always push the indicator outputs.
                t.pushToMain({
                    index: e,
                    key: "".concat(M, "_upper"),
                    value: L
                }), t.pushToMain({
                    index: e,
                    key: "".concat(M, "_middle"),
                    value: B
                }), t.pushToMain({
                    index: e,
                    key: "".concat(M, "_lower"),
                    value: N
                }), h) {
                    var V = null;
                    "number" == typeof L && "number" == typeof N && 0 !== N && (V = (L - N) / N), t.pushToMain({
                        index: e,
                        key: "".concat(M, "_height"),
                        value: V
                    });
                }
                // Process each range property.
                                var H, U = Me(y);
                try {
                    for (U.s(); !(H = U.n()).done; ) {
                        var q = H.value, $ = null, F = d[q][e];
                        "number" == typeof F && "number" == typeof N && "number" == typeof L && L - N != 0 && ($ = (F - N) / (L - N)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(M, "_range_").concat(q),
                            value: $
                        });
                    }
                } catch (t) {
                    U.e(t);
                } finally {
                    U.f();
                }
                return !0;
            },
            volumeOscillator: function(t, e, r, n, o) {
                var i = o.lag, a = t.verticalOhlcv, u = t.instances, l = t.lastIndexReplace, c = a.volume[e], s = "volume_oscillator";
                if (0 === e) {
                    var f = t.crossPairsList, h = t.nullArray;
                    Object.assign(u, {
                        volume_oscillator: {
                            fastEMA: new Ht(r),
                            slowEMA: new Ht(n)
                        }
                    }), a[s] = Ce(h), f.push({
                        fast: s,
                        slow: 0,
                        isDefault: !0
                    }), i > 0 && t.lag([ s ], i);
                }
                var p = u[s], y = p.fastEMA, v = p.slowEMA;
                y.update(c, l), v.update(c, l);
                var m = null, d = null;
                try {
                    m = y.getResult();
                } catch (t) {
                    m = null;
                }
                try {
                    d = v.getResult();
                } catch (t) {
                    d = null;
                }
                var b = null;
                return "number" == typeof m && "number" == typeof d && 0 !== d && (b = 100 * (m - d) / d), 
                t.pushToMain({
                    index: e,
                    key: s,
                    value: b
                }), !0;
            },
            Scaler: function(t, e, r, n, o, i, a, 
            // used for minmax: [validMin, validMax]
            u) {
                var l = t.verticalOhlcv, c = t.instances, s = t.lastIndexReplace, f = "".concat(o, "_").concat(r), h = "";
                if (0 === e) {
                    var p = t.nullArray, y = t.priceBased;
                    t.groups;
                    h = "".concat(f, "_group_").concat(n.join("_")), c.scaler = {
                        groupKeyLen: n.length,
                        groupKey: h,
                        windows: {}
                    };
                    var v, m = ur(n);
                    try {
                        var d = function() {
                            var e = v.value;
                            if (!l.hasOwnProperty(e)) throw new Error('Target property "'.concat(e, '" not found in verticalOhlcv'));
                            if (!y.includes(e)) throw new Error('Column "'.concat(e, '" is not priceBased and cannot be scaled.'));
                            var r = "".concat(f, "_").concat(e);
                            l[r] = ar(p);
                            var n = i ? h : e;
                            if (c.scaler.windows[n] = [], i && (t.ScaledGroups[h] || (t.ScaledGroups[h] = []), 
                            t.ScaledGroups[h].push(r)), u > 0) {
                                if (i) {
                                    var o, a = Array.from({
                                        length: u
                                    }).map((function(t, e) {
                                        return "".concat(r, "_lag_").concat(e + 1);
                                    }));
                                    (o = t.ScaledGroups[h]).push.apply(o, ar(a));
                                }
                                t.lag([ r ], u);
                            }
                        };
                        for (m.s(); !(v = m.n()).done; ) d();
                    } catch (t) {
                        m.e(t);
                    } finally {
                        m.f();
                    }
                }
                var b = c.scaler.windows;
                h = c.scaler.groupKey;
                // update windows with current values
                var g, w = ur(n);
                try {
                    for (w.s(); !(g = w.n()).done; ) {
                        var S = g.value, O = l[S][e], j = b[i ? h : S];
                        s ? j[j.length - 1] = O : (j.push(O), j.length > (i ? r * c.scaler.groupKeyLen : r) && j.shift());
                    }
                } catch (t) {
                    w.e(t);
                } finally {
                    w.f();
                }
                var P, _ = e + 1 >= r, A = ur(n);
                // scale values once enough data
                                try {
                    var x = function() {
                        var r, n, u, c, s, p, y = P.value, v = l[y][e], m = "".concat(f, "_").concat(y), d = null;
                        if (_) {
                            var g = b[i ? h : y];
                            if ("minmax" === o) {
                                var w = Math.min.apply(Math, ar(g)), S = Math.max.apply(Math, ar(g));
                                r = v, n = w, u = S, c = lr(a, 2), s = c[0], p = c[1], d = (Math.min(Math.max(r, n), u) - n) / (u - n) * (p - s) + s;
                            } else {
                                if ("zscore" !== o) throw new Error('Unknown scaler type "'.concat(o, '"'));
                                var O = g.reduce((function(t, e) {
                                    return t + e;
                                }), 0) / g.length, j = g.reduce((function(t, e) {
                                    return t + Math.pow(e - O, 2);
                                }), 0) / g.length, A = Math.sqrt(j);
                                d = function(t, e, r) {
                                    return 0 === r ? 0 : (t - e) / r;
                                }(v, O, A);
                            }
                        }
                        t.pushToMain({
                            index: e,
                            key: m,
                            value: d
                        });
                    };
                    for (A.s(); !(P = A.n()).done; ) x();
                } catch (t) {
                    A.e(t);
                } finally {
                    A.f();
                }
            }
        }, Or = function(t, e, r) {
            var n = function(t) {
                return r > 1 ? t * r : t;
            };
            if ("number" === e) return n(t);
            if ("string" === e) {
                var o = pr(t);
                return n(Number(o));
            }
            return 0;
 // Optionally: throw an error if type is not recognized
                }, jr = function(t, e) {
            return "number" === e ? t : "string" === e ? Number(pr(t)) : 0;
        }, Pr = function(t, e) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o = e.len, i = e.inputParams, a = e.hasVolume;
            //do not move nullArray from here
            e.nullArray = new Array(o).fill(null);
            var u = [ "open", "high", "low", "close" ];
            a && u.push("volume");
            var l = new Set(u);
            if (0 === r) {
                // Validate parameters and initialize base keys in verticalOhlcv
                !function(t) {
                    var e, r = t.inputParams, o = t.len, i = n(r);
                    try {
                        for (i.s(); !(e = i.n()).done; ) {
                            var a, u = n(e.value.params);
                            try {
                                for (u.s(); !(a = u.n()).done; ) {
                                    var l = a.value;
                                    if ("number" == typeof l && l > o) throw console.log(l, o), new Error("At least one of the params of the indicator is greater than the input OHLCV length. Make sure to have enough datapoints in the input OHLCV.");
                                }
                            } catch (t) {
                                u.e(t);
                            } finally {
                                u.f();
                            }
                        }
                    } catch (t) {
                        i.e(t);
                    } finally {
                        i.f();
                    }
                }(e), u.forEach((function(t) {
                    e.verticalOhlcv[t] = dr(e.nullArray);
                }));
                // Identify any additional keys from the first input row and initialize them
                var c = Object.keys(t[0]).filter((function(t) {
                    return !l.has(t);
                }));
                c.forEach((function(t) {
                    e.verticalOhlcv[t] = dr(e.nullArray);
                })), e.otherKeys = c, 
                // Set the input types once using the first row
                function(t, e) {
                    for (var r = 0, n = Object.keys(e.inputTypes); r < n.length; r++) {
                        var o = n[r];
                        if (!(o in t)) throw new Error('Property "'.concat(o, '" not found in ohlcv array. ').concat(e.ticker));
                        var i = t[o];
                        if ("number" == typeof i && i > 0) e.inputTypes[o] = "number"; else {
                            if ("string" != typeof i || !/^(\d+(\.\d*)?|\.\d+)$/.test(i)) throw new Error('Invalid property "'.concat(o, '" in ohlcv array. ').concat(e.ticker));
                            // Determine precisionMultiplier if not already set
                                                        e.inputTypes[o] = "string", i = pr(i);
                        }
                        if (0 === e.precisionMultiplier && !0 === e.precision) {
                            var a = br(String(i).split("."), 2)[1], u = void 0 === a ? "" : a, l = Math.max(4, u.length);
                            e.precisionMultiplier = l > 1 ? Math.pow(10, l - 1) : 1;
                        }
                    }
                }(t[0], e);
            } else if (!e.otherKeys) throw new Error("otherKeys not found in main. Ensure you run with startIndex=0 first to initialize.");
            // Prepare the list of indicator function calls
                        // Process each row in the input
            for (var s = function(t) {
                return Array.isArray(t) ? t.map((function(t) {
                    var e = t.key, r = t.params;
                    return {
                        key: e,
                        fn: Sr[e],
                        args: r
                    };
                })) : [];
            }(i), f = r; f < o; f++) {
                var h = t[f], p = h.open, y = h.high, v = h.low, m = h.close, d = mr(h, yr), b = e.precisionMultiplier, g = Or(p, e.inputTypes.open, b), w = Or(y, e.inputTypes.high, b), S = Or(v, e.inputTypes.low, b), O = Or(m, e.inputTypes.close, b);
                // Destructure the base keys and use the rest for other properties
                //sets volume to 0
                                if (e.pushToMain({
                    index: f,
                    key: "open",
                    value: g
                }), e.pushToMain({
                    index: f,
                    key: "high",
                    value: w
                }), e.pushToMain({
                    index: f,
                    key: "low",
                    value: S
                }), e.pushToMain({
                    index: f,
                    key: "close",
                    value: O
                }), a) {
                    var j = h.volume, P = jr(j, e.inputTypes.volume);
                    e.pushToMain({
                        index: f,
                        key: "volume",
                        value: P
                    });
                } else delete d.volume;
                // Populate any extra keys identified during initialization
                                var _, A = vr(e.otherKeys);
                try {
                    for (A.s(); !(_ = A.n()).done; ) {
                        var x = _.value;
                        e.pushToMain({
                            index: f,
                            key: x,
                            value: d[x]
                        });
                    }
                    // Run all indicator functions except for the ones processed later
                                } catch (t) {
                    A.e(t);
                } finally {
                    A.f();
                }
                var E, k = vr(s);
                try {
                    for (k.s(); !(E = k.n()).done; ) {
                        var T = E.value, I = T.key, M = T.fn, D = T.args;
                        [ "crossPairs", "lag" ].includes(I) || M.apply(void 0, [ e, f ].concat(dr(D)));
                    }
                    // Process these indicators separately (ensuring their execution order)
                                } catch (t) {
                    k.e(t);
                } finally {
                    k.f();
                }
                $e(e, f), Ze(e, f), e.lastComputedIndex++;
            }
        }, _r = function(t, e) {
            for (var r = t.length, n = new lt(e), o = new Array(r), i = 0, a = 0, u = 0, l = 0; l < r; l++) if (n.update(t[l]), 
            n.isStable) {
                var c = n.getResult();
                o[l] = c, i += c, a += c * c, u++;
            } else o[l] = null;
            var s = i / u, f = a / u - s * s, h = Math.sqrt(f);
            return o.map((function(t) {
                return null !== t ? (t - s) / h : null;
            }));
        }, Ar = function(t, e) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5;
            if (t.length !== e.length) throw new Error("Both arrays must have the same length");
            for (var n = _r(t, r), o = _r(e, r), i = t.length, a = [], u = 0, l = 0, c = 0, s = 0, f = 0, h = 0, p = -1, y = 0; y < i; y++) {
                if (null !== n[y] && null !== o[y]) {
                    p = y;
                    break;
                }
                a.push(0);
            }
            if (-1 === p) 
            // No valid data points
            return new Array(i).fill(0);
            for (var v = p; v < i; v++) {
                var m = n[v], d = o[v];
                if (null !== m && null !== d) if (u += m, l += d, c += m * d, s += m * m, f += d * d, 
                ++h < 2) a.push(0); else {
                    var b = h * c - u * l, g = Math.sqrt((h * s - u * u) * (h * f - l * l)), w = 0 === g ? 0 : b / g;
                    a.push(w);
                } else 
                // Reset sums and counts when encountering null values
                u = l = c = s = f = h = 0, a.push(0);
            }
            return a;
        };
        // Processes the inputParams into a list of indicator calls
                // ./index.js
        function xr(t) {
            return function(t) {
                if (Array.isArray(t)) return Ir(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || Tr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Er(t) {
            return Er = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Er(t);
        }
        function kr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || Tr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Tr(t, e) {
            if (t) {
                if ("string" == typeof t) return Ir(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Ir(t, e) : void 0;
            }
        }
        function Ir(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function Mr(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Dr(n.key), n);
            }
        }
        function Dr(t) {
            var e = function(t, e) {
                if ("object" != Er(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Er(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }
            /**
 * Class OHLCV_INDICATORS
 *
 * This class provides methods for calculating and managing technical indicators 
 * on financial OHLCV (Open, High, Low, Close, Volume) data. It enables users 
 * to parallel compute various technical indicators in 1 single loop.
 * OHLCV datasets.
 */ (t, "string");
            return "symbol" == Er(e) ? e : e + "";
        }
        var Rr =  function() {
            return t = function t(e) {
                var r = this, n = e.input, o = e.ticker, i = void 0 === o ? null : o, a = e.precision, l = void 0 === a || a, s = e.inputParams, f = void 0 === s ? null : s;
                if (function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), u(n, "input", null !== i ? "contructor ".concat(i) : "constuctor"), 
                c(l, "precision", "constructor"), 0 === n.length) throw Error("input OHLCV must not be empty: " + i);
                if (!n[0].hasOwnProperty("close")) throw Error("input OHLCV array objects require at least close property: " + i);
                return this.hasVolume = !!("number" == typeof n[0].volume && n[0].volume > 0 || "string" == typeof n[0].volume && n[0].volume), 
                this.isComputed = !1, this.lastComputedIndex = 0, this.input = n, this.inputTypes = this.hasVolume ? {
                    open: "",
                    high: "",
                    low: "",
                    close: "",
                    volume: ""
                } : {
                    open: "",
                    high: "",
                    low: "",
                    close: ""
                }, this.priceBased = [ "open", "high", "low", "close" ], this.len = n.length, this.lastIndexReplace = !1, 
                this.instances = {}, this.crossPairsList = [], this.verticalOhlcv = {}, this.studies = {}, 
                this.utilities = {
                    correlation: Ar
                }, this.invalidValueIndex = -1, this.precision = l, this.precisionMultiplier = !0 === this.precision ? 0 : 1, 
                this.minMaxRanges = {}, this.ScaledGroups = {}, null !== f && (u(f, "inputParams", "constructor"), 
                this.inputParams = f, this.compute()), this.inputParams = [], this.pushToMain = function(t) {
                    var e = t.index, n = t.key, o = t.value;
                    return function(t) {
                        var e = t.main, r = t.index, n = t.key, o = t.value, i = e.precision, a = e.priceBased, u = e.minMaxRanges, l = e.verticalOhlcv, c = e.precisionMultiplier;
                        if (null == o) {
                            e.invalidValueIndex = r;
                            //do not use let for main.invalidValueIndex
                            for (var s = 0, f = Object.keys(u); s < f.length; s++) u[f[s]] = {
                                min: 1 / 0,
                                max: -1 / 0
                            };
                            return l[n][r] = null, !1;
                        }
                        if (l[n][r] = o, "number" == typeof o && !n.includes("_x_")) {
                            var h = i && a.includes(n) ? o / c : o;
                            u.hasOwnProperty(n) || (u[n] = {
                                min: 1 / 0,
                                max: -1 / 0
                            }), h < u[n].min && (u[n].min = h), h > u[n].max && (u[n].max = h);
                        }
                        return !0;
                    }({
                        main: r,
                        index: e,
                        key: n,
                        value: o
                    });
                }, this;
            }, e = [ {
                key: "getDataAsCols",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.compute();
                    for (var e = this.precisionMultiplier, r = this.precision, n = this.invalidValueIndex, o = this.len, i = this.verticalOhlcv, a = this.priceBased, u = {}, l = n >= 0 && t, c = o - (n + 1), s = 0, f = Object.entries(i); s < f.length; s++) {
                        var h = kr(f[s], 2), p = h[0], y = h[1], v = l ? y.slice(-c) : y;
                        // If slicing is needed, create a sliced copy, otherwise re-use the array.
                                                // If this key is price based and precision is enabled, map over the array.
                        r && a.includes(p) && (v = v.map((function(t) {
                            return null == t ? null : t / e;
                        }))), u[p] = v;
                    }
                    return u;
                }
            }, {
                key: "getData",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    //getData method returns the last object (row) of the new OHLCV with indicators: {open, high, low, close, rsi_14, bollinger_bands_upper}
                                        this.compute();
                    var e = this.precisionMultiplier, r = this.priceBased, n = this.precision;
                    return function(t) {
                        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = arguments.length > 2 ? arguments[2] : void 0, n = arguments.length > 3 ? arguments[3] : void 0, o = arguments.length > 4 ? arguments[4] : void 0, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, a = Object.keys(t);
                        if (0 === a.length) return [];
                        for (var u = e && i >= 0 ? i + 1 : 0, l = t[a[0]].length, c = new Array(l - u), s = u; s < l; s++) {
                            for (var f = {}, h = 0; h < a.length; h++) {
                                var p = a[h], y = t[p][s];
                                f[p] = r && o.includes(p) ? y / n : y;
                            }
                            c[s - u] = f;
                        }
                        return c;
                    }(this.verticalOhlcv, t, n, e, r, this.invalidValueIndex);
                }
            }, {
                key: "getLastValues",
                value: function() {
                    this.compute();
                    for (var t = this.precisionMultiplier, e = this.priceBased, r = this.precision, n = this.verticalOhlcv, o = this.len, i = {}, a = 0, u = Object.keys(n); a < u.length; a++) {
                        var l = u[a];
                        i[l] = n[l][o - 1];
                    }
                    return r ? function(t) {
                        for (var e = t.row, r = t.precisionMultiplier, n = t.priceBased, o = {}, i = 0, a = Object.entries(e); i < a.length; i++) {
                            var u = fr(a[i], 2), l = u[0], c = u[1];
                            n.includes(l) && (c /= r), o[l] = c;
                        }
                        return o;
                    }({
                        row: i,
                        precisionMultiplier: t,
                        priceBased: e
                    }) : i;
                }
            }, {
                key: "compute",
                value: function(t) {
                    //if change is a valid object and change.date is after the last row in this.input[this.input.length - 1].date pushes change to this.input using the parseOhlcvToVertical function.
                    //stops the compute if compute is called from getData, getDataAsCols or getLastValues an isComputed is false
                    if (!0 === this.isComputed && !t) return this;
                    //checks the first row in OHLCV input to verify if the date property is valid
                                        //compute method can be used to add new or update the last datapoints if a new OHLCV object is passed with a valid date property
                    //valid date properties: "2024-12-16 15:45:00" or "2024-12-16"
                    if (this.isComputed = !1, this.isValidDate = this.input[0].hasOwnProperty("date") && i(this.input[0].date), 
                    //compute method can be used to process indicators if no arguments are provided
                    //compute method can be called to access the .verticalOhlcv object
                    //compute method is called automatically if getLastValues or getDate methods are called
                    this.len > this.lastComputedIndex && !t && Pr(this.input, this, 0), t && "object" === Er(t)) {
                        var e;
                        if (![ "open", "high", "low", "close", "volume", "date" ].every((function(e) {
                            return Object.keys(t).includes(e);
                        }))) throw Error('Invalid OHLCV object sent in "compute". Correct usage: .compute({open: 108.25, high: 108.410004, low: 108.25, close: 99999999, volume: 875903, date: "2024-12-16 15:45:00" || "2024-12-16"})');
                        if (!this.isValidDate) throw Error('All the OHLCV rows require a valid date property to access the compute change method. Correct date format: "2024-12-16 15:45:00" or "2024-12-16"');
                        if (!i(t.date)) throw Error('The date in the new OHLCV row is invalid. Correct date format: "2024-12-16 15:45:00" or "2024-12-16"');
                        var r = t.date, n = this.len - 1, o = null === (e = this.input[n]) || void 0 === e ? void 0 : e.date;
                        //fallback if .compute(change) is triggered before .compute() alone
                        0 === this.lastComputedIndex && this.compute(), o !== r ? (
                        // Add new item
                        this.len++, this.input.push(t), Pr(this.input, this, this.len)) : (
                        // Modify the last item
                        this.input[n] = t, Pr(this.input, this, n));
                    }
                    return this;
                }
            }, {
                key: "crossPairs",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = "crossPairs";
                    return a(this), u(t, "arr", e), this.crossPairsList = [].concat(xr(this.crossPairsList), xr(t)), 
                    this.inputParams.push({
                        key: e,
                        params: [ this.crossPairsList ]
                    }), this;
                }
            }, {
                key: "lag",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [ "close" ], r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, n = "lag";
                    a(this), u(e, "colKeys", n), s(r, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "lookback", n), this.inputParams.push({
                        key: n,
                        params: [ e, r ]
                    });
                    for (var o = function() {
                        var r = e[i];
                        t.priceBased.find((function(t) {
                            return r === t;
                        })) && t.priceBased.push(r);
                    }, i = 0; i < e.length; i++) o();
                    return this;
                }
            }, {
                key: "relativeVolume",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "relativeVolume";
                    if (!1 === this.hasVolume) throw new Error('If "relativeVolume" is called the input ohlcv must contain valid volume properties.');
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), l(e, "options", r);
                    var n = e.lag, o = void 0 === n ? 0 : n;
                    return s(o, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            lag: o
                        } ]
                    }), this;
                }
            }, {
                key: "ema",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "ema";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), l(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, u = void 0 === i ? 0 : i;
                    return s(u, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: u
                        } ]
                    }), this;
                }
            }, {
                key: "sma",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "sma";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), l(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, u = void 0 === i ? 0 : i;
                    return s(u, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: u
                        } ]
                    }), this;
                }
            }, {
                key: "macd",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 12, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 26, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 9, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o = "macd";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fast", o), s(e, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "slow", o), s(r, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "signal", o), l(n, "options", o);
                    var i = n.target, u = void 0 === i ? "close" : i, c = n.lag, f = void 0 === c ? 0 : c;
                    return s(f, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", o), this.inputParams.push({
                        key: o,
                        params: [ t, e, r, {
                            target: u,
                            lag: f
                        } ]
                    }), this;
                }
            }, {
                key: "bollingerBands",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "bollingerBands";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), s(e, {
                        min: .01,
                        max: 50,
                        allowDecimals: !0
                    }, "stdDev", n), l(r, "options", n);
                    var o = r.target, i = void 0 === o ? "close" : o, f = r.height, h = void 0 !== f && f, p = r.range, y = void 0 === p ? [] : p, v = r.lag, m = void 0 === v ? 0 : v;
                    return u(y, "range", n), s(m, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), c(h, "height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            target: i,
                            height: h,
                            range: y,
                            lag: m
                        } ]
                    }), this;
                }
            }, {
                key: "rsi",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 14, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "rsi";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), l(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, u = void 0 === i ? 0 : i;
                    return s(u, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            target: o,
                            lag: u
                        } ]
                    }), this;
                }
            }, {
                key: "donchianChannels",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "donchianChannels";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), s(e, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "offset", n), l(r, "options", n);
                    var o = r.height, i = void 0 !== o && o, f = r.range, h = void 0 === f ? [] : f, p = r.lag, y = void 0 === p ? 0 : p;
                    return u(h, "range", n), s(y, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), c(i, "height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            height: i,
                            range: h,
                            lag: y
                        } ]
                    }), this;
                }
            }, {
                key: "volumeOscillator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "volumeOscillator";
                    if (!1 === this.hasVolume) throw new Error('If "volumeOscillator" is called the input ohlcv must contain valid volume properties.');
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fastSize", n), s(e, {
                        min: t,
                        max: this.len,
                        allowDecimals: !1
                    }, "slowSize", n), l(r, "options", n);
                    var o = r.lag, i = void 0 === o ? 0 : o;
                    return s(i, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            lag: i
                        } ]
                    }), this;
                }
            }, {
                key: "dateTime",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = "dateTime";
                    a(this), l(t, "options", e);
                    var r = t.lag, n = void 0 === r ? 0 : r;
                    return s(n, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "lag", e), this.inputParams.push({
                        key: e,
                        params: [ {
                            lag: n
                        } ]
                    }), this;
                }
            }, {
                key: "Scaler",
                value: function(t, e, r) {
                    var n = "Scaler";
                    a(this), s(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), u(e, "colKeys", n);
                    var o = r.group, i = void 0 !== o && o, l = r.range, f = void 0 === l ? [ 0, 1 ] : l, h = r.lag, p = void 0 === h ? 0 : h, y = r.type, v = void 0 === y ? "minmax" : y;
                    return c(i, "group", n), u(f, "range", n), function(t, e, r, n) {
                        if (u(t, "arrayOptions", "".concat(n, ".").concat(r, ".validateArrayOptions")), 
                        !t.includes(e.toString())) throw new Error('Param "'.concat(r, '" must be any of the following values [').concat(t.join(", "), '] in "').concat(n, '".'));
                    }([ "minmax", "zscore" ], v, "type", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, v, i, f, p ]
                    }), this;
                }
            } ], e && Mr(t.prototype, e), r && Mr(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, r;
        }();
    })(), OHLCV_INDICATORS = e;
})
/******/ ();