var OHLCV_INDICATORS;

/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var t = {
        /******/ // define getter functions for harmony exports
        /******/ d: (e, r) => {
            /******/ for (var n in r) 
            /******/ t.o(r, n) && !t.o(e, n) && 
            /******/ Object.defineProperty(e, n, {
                enumerable: !0,
                get: r[n]
            })
            /******/;
            /******/        },
        /******/ o: (t, e) => Object.prototype.hasOwnProperty.call(t, e)
        /******/ ,
        /******/ // define __esModule on exports
        /******/ r: t => {
            /******/ "undefined" != typeof Symbol && Symbol.toStringTag && 
            /******/ Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            })
            /******/ , Object.defineProperty(t, "__esModule", {
                value: !0
            });
        }
        /******/    }, e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/define property getters */
    /******/    
    // This entry need to be wrapped in an IIFE because it declares 'OHLCV_INDICATORS' on top-level, which conflicts with the current library output.
    (() => {
        // ./src/utilities/validators.js
        function r(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || i(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function n(t) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, n(t);
        }
        function o(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = i(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a, u = !0, l = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return u = t.done, t;
                },
                e: function(t) {
                    l = !0, a = t;
                },
                f: function() {
                    try {
                        u || null == r.return || r.return();
                    } finally {
                        if (l) throw a;
                    }
                }
            };
        }
        function i(t, e) {
            if (t) {
                if ("string" == typeof t) return a(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(t, e) : void 0;
            }
        }
        function a(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ESM COMPAT FLAG
        t.r(e), 
        // EXPORTS
        t.d(e, {
            default: () => /* binding */ Ar
        });
        var u = function(t) {
            if (!0 === t.isComputed) throw Error('ohlcv is already computed, you can not add new indicators after "compute", "getLastValues" , "getDataAsCols" or "getData" methods are called.');
        }, l = function(t, e, r) {
            if (!Array.isArray(t)) throw new Error('Param "'.concat(e, '" must be an array in "').concat(r, '".'));
            return !0;
        }, c = function(t, e, r) {
            if (!Boolean(t) || "object" == !n(t)) throw new Error('Param "'.concat(e, '" must be an object in "').concat(r, '".'));
            return !0;
        }, s = function(t, e, r) {
            if ("boolean" != typeof t) throw new Error('Param "'.concat(e, '" must be an boolean in "').concat(r, '".'));
            return !0;
        }, f = function(t, e, r, n) {
            c(e, "options", "".concat(n, ".").concat(r, ".validateNumber"));
            var o = e.allowDecimals, i = void 0 !== o && o, a = e.min, u = e.max, l = i ? "number" : "integer";
            if ("number" != typeof t || !1 === i && !Number.isInteger(t)) throw new Error('Param "'.concat(r, '" must be an integer in "').concat(n, '".'));
            if ("number" != typeof a || "number" != typeof u || a >= u) throw new Error('Param "min" must be a valid '.concat(l, ' lower than "max" "').concat(n, ".").concat(r, '.validateNumber".'));
            if (t < a) throw new Error('Param "'.concat(r, '" must be an ').concat(l, " greater than or equal to ").concat(a, ' in "').concat(n, '".'));
            if (t > u) throw new Error('Param "'.concat(r, '" must be an ').concat(l, " lower than or equal to ").concat(u, ' in "').concat(n, '".'));
            return !0;
        }, // 0, 1, 2 or 3
        // The maximum value of DP and Big.DP.
        y = 1e6, // 0 to 1000000
        // The maximum magnitude of the exponent argument to the pow method.
        h = 1e6, // true or false
        /**************************************************************************************************/
        // Error messages.
        p = "[big.js] ", v = p + "Invalid ", m = v + "decimal places", d = v + "rounding mode", b = p + "Division by zero", 
        // The shared prototype object.
        g = {}, w = void 0, O = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
        /*
 * Round Big x to a maximum of sd significant digits using rounding mode rm.
 *
 * x {Big} The Big to round.
 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 * [more] {boolean} Whether the result of division was truncated.
 */
        function S(t, e, r, n) {
            var o = t.c;
            if (r === w && (r = t.constructor.RM), 0 !== r && 1 !== r && 2 !== r && 3 !== r) throw Error(d);
            if (e < 1) n = 3 === r && (n || !!o[0]) || 0 === e && (1 === r && o[0] >= 5 || 2 === r && (o[0] > 5 || 5 === o[0] && (n || o[1] !== w))), 
            o.length = 1, n ? (
            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            t.e = t.e - e + 1, o[0] = 1) : 
            // Zero.
            o[0] = t.e = 0; else if (e < o.length) {
                // Round up?
                if (
                // xc[sd] is the digit after the digit that may be rounded up.
                n = 1 === r && o[e] >= 5 || 2 === r && (o[e] > 5 || 5 === o[e] && (n || o[e + 1] !== w || 1 & o[e - 1])) || 3 === r && (n || !!o[0]), 
                // Remove any digits after the required precision.
                o.length = e, n) 
                // Rounding up may mean the previous digit has to be rounded up.
                for (;++o[--e] > 9; ) if (o[e] = 0, 0 === e) {
                    ++t.e, o.unshift(1);
                    break;
                }
                // Remove trailing zeros.
                                for (e = o.length; !o[--e]; ) o.pop();
            }
            return t;
        }
        /*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 */        function j(t, e, r) {
            var n = t.e, o = t.c.join(""), i = o.length;
            // Exponential notation?
                        if (e) o = o.charAt(0) + (i > 1 ? "." + o.slice(1) : "") + (n < 0 ? "e" : "e+") + n;
            // Normal notation.
             else if (n < 0) {
                for (;++n; ) o = "0" + o;
                o = "0." + o;
            } else if (n > 0) if (++n > i) for (n -= i; n--; ) o += "0"; else n < i && (o = o.slice(0, n) + "." + o.slice(n)); else i > 1 && (o = o.charAt(0) + "." + o.slice(1));
            return t.s < 0 && r ? "-" + o : o;
        }
        // Prototype/instance methods
        /*
 * Return a new Big whose value is the absolute value of this Big.
 */        g.abs = function() {
            var t = new this.constructor(this);
            return t.s = 1, t;
        }, 
        /*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
 */
        g.cmp = function(t) {
            var e, r = this, n = r.c, o = (t = new r.constructor(t)).c, i = r.s, a = t.s, u = r.e, l = t.e;
            // Either zero?
                        if (!n[0] || !o[0]) return n[0] ? i : o[0] ? -a : 0;
            // Signs differ?
                        if (i != a) return i;
            // Compare exponents.
            if (e = i < 0, u != l) return u > l ^ e ? 1 : -1;
            // Compare digit by digit.
            for (a = (u = n.length) < (l = o.length) ? u : l, i = -1; ++i < a; ) if (n[i] != o[i]) return n[i] > o[i] ^ e ? 1 : -1;
            // Compare lengths.
                        return u == l ? 0 : u > l ^ e ? 1 : -1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        g.div = function(t) {
            var e = this, r = e.constructor, n = e.c, // dividend
            o = (t = new r(t)).c, // divisor
            i = e.s == t.s ? 1 : -1, a = r.DP;
            if (a !== ~~a || a < 0 || a > y) throw Error(m);
            // Divisor is zero?
                        if (!o[0]) throw Error(b);
            // Dividend is 0? Return +-0.
                        if (!n[0]) return t.s = i, t.c = [ t.e = 0 ], t;
            var u, l, c, s, f, h = o.slice(), p = u = o.length, v = n.length, d = n.slice(0, u), // remainder
            g = d.length, O = t, // quotient
            j = O.c = [], P = 0, _ = a + (O.e = e.e - t.e) + 1;
 // precision of the result
                        // Add zeros to make remainder as long as divisor.
            for (O.s = i, i = _ < 0 ? 0 : _, 
            // Create version of divisor with leading zero.
            h.unshift(0); g++ < u; ) d.push(0);
            do {
                // n is how many times the divisor goes into current remainder.
                for (c = 0; c < 10; c++) {
                    // Compare divisor and remainder.
                    if (u != (g = d.length)) s = u > g ? 1 : -1; else for (f = -1, s = 0; ++f < u; ) if (o[f] != d[f]) {
                        s = o[f] > d[f] ? 1 : -1;
                        break;
                    }
                    // If divisor < remainder, subtract divisor from remainder.
                                        if (!(s < 0)) break;
                    // Remainder can't be more than 1 digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for (l = g == u ? o : h; g; ) {
                        if (d[--g] < l[g]) {
                            for (f = g; f && !d[--f]; ) d[f] = 9;
                            --d[f], d[g] += 10;
                        }
                        d[g] -= l[g];
                    }
                    for (;!d[0]; ) d.shift();
                }
                // Add the digit n to the result array.
                                j[P++] = s ? c : ++c, 
                // Update the remainder.
                d[0] && s ? d[g] = n[p] || 0 : d = [ n[p] ];
            } while ((p++ < v || d[0] !== w) && i--);
            // Leading zero? Do not remove if result is simply zero (qi == 1).
                        return j[0] || 1 == P || (
            // There can't be more than one zero.
            j.shift(), O.e--, _--), 
            // Round?
            P > _ && S(O, _, r.RM, d[0] !== w), O;
        }, 
        /*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */
        g.eq = function(t) {
            return 0 === this.cmp(t);
        }, 
        /*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */
        g.gt = function(t) {
            return this.cmp(t) > 0;
        }, 
        /*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */
        g.gte = function(t) {
            return this.cmp(t) > -1;
        }, 
        /*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */
        g.lt = function(t) {
            return this.cmp(t) < 0;
        }, 
        /*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */
        g.lte = function(t) {
            return this.cmp(t) < 1;
        }, 
        /*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */
        g.minus = g.sub = function(t) {
            var e, r, n, o, i = this, a = i.constructor, u = i.s, l = (t = new a(t)).s;
            // Signs differ?
                        if (u != l) return t.s = -l, i.plus(t);
            var c = i.c.slice(), s = i.e, f = t.c, y = t.e;
            // Either zero?
                        if (!c[0] || !f[0]) return f[0] ? t.s = -l : c[0] ? t = new a(i) : t.s = 1, 
            t;
            // Determine which is the bigger number. Prepend zeros to equalise exponents.
                        if (u = s - y) {
                for ((o = u < 0) ? (u = -u, n = c) : (y = s, n = f), n.reverse(), l = u; l--; ) n.push(0);
                n.reverse();
            } else for (
            // Exponents equal. Check digit by digit.
            r = ((o = c.length < f.length) ? c : f).length, u = l = 0; l < r; l++) if (c[l] != f[l]) {
                o = c[l] < f[l];
                break;
            }
            // x < y? Point xc to the array of the bigger number.
                        /*
   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
   * needs to start at yc.length.
   */
            if (o && (n = c, c = f, f = n, t.s = -t.s), (l = (r = f.length) - (e = c.length)) > 0) for (;l--; ) c[e++] = 0;
            // Subtract yc from xc.
                        for (l = e; r > u; ) {
                if (c[--r] < f[r]) {
                    for (e = r; e && !c[--e]; ) c[e] = 9;
                    --c[e], c[r] += 10;
                }
                c[r] -= f[r];
            }
            // Remove trailing zeros.
                        for (;0 === c[--l]; ) c.pop();
            // Remove leading zeros and adjust exponent accordingly.
                        for (;0 === c[0]; ) c.shift(), --y;
            return c[0] || (
            // n - n = +0
            t.s = 1, 
            // Result must be zero.
            c = [ y = 0 ]), t.c = c, t.e = y, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */
        g.mod = function(t) {
            var e, r = this, n = r.constructor, o = r.s, i = (t = new n(t)).s;
            if (!t.c[0]) throw Error(b);
            return r.s = t.s = 1, e = 1 == t.cmp(r), r.s = o, t.s = i, e ? new n(r) : (o = n.DP, 
            i = n.RM, n.DP = n.RM = 0, r = r.div(t), n.DP = o, n.RM = i, this.minus(r.times(t)));
        }, 
        /*
 * Return a new Big whose value is the value of this Big negated.
 */
        g.neg = function() {
            var t = new this.constructor(this);
            return t.s = -t.s, t;
        }, 
        /*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */
        g.plus = g.add = function(t) {
            var e, r, n, o = this, i = o.constructor;
            // Signs differ?
            if (t = new i(t), o.s != t.s) return t.s = -t.s, o.minus(t);
            var a = o.e, u = o.c, l = t.e, c = t.c;
            // Either zero?
                        if (!u[0] || !c[0]) return c[0] || (u[0] ? t = new i(o) : t.s = o.s), 
            t;
            // Prepend zeros to equalise exponents.
            // Note: reverse faster than unshifts.
            if (u = u.slice(), e = a - l) {
                for (e > 0 ? (l = a, n = c) : (e = -e, n = u), n.reverse(); e--; ) n.push(0);
                n.reverse();
            }
            // Point xc to the longer array.
                        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
            for (u.length - c.length < 0 && (n = c, c = u, u = n), e = c.length, r = 0; e; u[e] %= 10) r = (u[--e] = u[e] + c[e] + r) / 10 | 0;
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                        // Remove trailing zeros.
            for (r && (u.unshift(r), ++l), e = u.length; 0 === u[--e]; ) u.pop();
            return t.c = u, t.e = l, t;
        }, 
        /*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */
        g.pow = function(t) {
            var e = this, r = new e.constructor("1"), n = r, o = t < 0;
            if (t !== ~~t || t < -1e6 || t > h) throw Error(v + "exponent");
            for (o && (t = -t); 1 & t && (n = n.times(e)), t >>= 1; ) e = e.times(e);
            return o ? r.div(n) : n;
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        g.prec = function(t, e) {
            if (t !== ~~t || t < 1 || t > y) throw Error(v + "precision");
            return S(new this.constructor(this), t, e);
        }, 
        /*
 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
 * using rounding mode rm, or Big.RM if rm is not specified.
 * If dp is negative, round to an integer which is a multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        g.round = function(t, e) {
            if (t === w) t = 0; else if (t !== ~~t || t < -y || t > y) throw Error(m);
            return S(new this.constructor(this), t + this.e + 1, e);
        }, 
        /*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
        g.sqrt = function() {
            var t, e, r, n = this, o = n.constructor, i = n.s, a = n.e, u = new o("0.5");
            // Zero?
                        if (!n.c[0]) return new o(n);
            // Negative?
                        if (i < 0) throw Error(p + "No square root");
            // Estimate.
                        // Math.sqrt underflow/overflow?
            // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
            0 === (i = Math.sqrt(n + "")) || i === 1 / 0 ? ((e = n.c.join("")).length + a & 1 || (e += "0"), 
            a = ((a + 1) / 2 | 0) - (a < 0 || 1 & a), t = new o(((i = Math.sqrt(e)) == 1 / 0 ? "5e" : (i = i.toExponential()).slice(0, i.indexOf("e") + 1)) + a)) : t = new o(i + ""), 
            a = t.e + (o.DP += 4);
            // Newton-Raphson iteration.
            do {
                r = t, t = u.times(r.plus(n.div(r)));
            } while (r.c.slice(0, a).join("") !== t.c.slice(0, a).join(""));
            return S(t, (o.DP -= 4) + t.e + 1, o.RM);
        }, 
        /*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */
        g.times = g.mul = function(t) {
            var e, r = this, n = r.constructor, o = r.c, i = (t = new n(t)).c, a = o.length, u = i.length, l = r.e, c = t.e;
            // Determine sign of result.
                        // Return signed 0 if either 0.
            if (t.s = r.s == t.s ? 1 : -1, !o[0] || !i[0]) return t.c = [ t.e = 0 ], t;
            // Initialise exponent of result as x.e + y.e.
                        // Initialise coefficient array of result with zeros.
            for (t.e = l + c, 
            // If array xc has fewer digits than yc, swap xc and yc, and lengths.
            a < u && (e = o, o = i, i = e, c = a, a = u, u = c), e = new Array(c = a + u); c--; ) e[c] = 0;
            // Multiply.
            // i is initially xc.length.
                        for (l = u; l--; ) {
                // a is yc.length.
                for (u = 0, c = a + l; c > l; ) 
                // Current sum of products at this digit position, plus carry.
                u = e[c] + i[l] * o[c - l - 1] + u, e[c--] = u % 10, 
                // carry
                u = u / 10 | 0;
                e[c] = u;
            }
            // Increment result exponent if there is a final carry, otherwise remove leading zero.
                        // Remove trailing zeros.
            for (u ? ++t.e : e.shift(), l = e.length; !e[--l]; ) e.pop();
            return t.c = e, t;
        }, 
        /*
 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        g.toExponential = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== w) {
                if (t !== ~~t || t < 0 || t > y) throw Error(m);
                for (r = S(new r.constructor(r), ++t, e); r.c.length < t; ) r.c.push(0);
            }
            return j(r, !0, !!n);
        }, 
        /*
 * Return a string representing the value of this Big in normal notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */
        g.toFixed = function(t, e) {
            var r = this, n = r.c[0];
            if (t !== w) {
                if (t !== ~~t || t < 0 || t > y) throw Error(m);
                // x.e may have changed if the value is rounded up.
                for (t = t + (r = S(new r.constructor(r), t + r.e + 1, e)).e + 1; r.c.length < t; ) r.c.push(0);
            }
            return j(r, !1, !!n);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */
        g[Symbol.for("nodejs.util.inspect.custom")] = g.toJSON = g.toString = function() {
            var t = this, e = t.constructor;
            return j(t, t.e <= e.NE || t.e >= e.PE, !!t.c[0]);
        }, 
        /*
 * Return the value of this Big as a primitve number.
 */
        g.toNumber = function() {
            var t = Number(j(this, !0, !0));
            if (!0 === this.constructor.strict && !this.eq(t.toString())) throw Error(p + "Imprecise conversion");
            return t;
        }, 
        /*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * rounding mode rm, or Big.RM if rm is not specified.
 * Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
        g.toPrecision = function(t, e) {
            var r = this, n = r.constructor, o = r.c[0];
            if (t !== w) {
                if (t !== ~~t || t < 1 || t > y) throw Error(v + "precision");
                for (r = S(new n(r), t, e); r.c.length < t; ) r.c.push(0);
            }
            return j(r, t <= r.e || r.e <= n.NE || r.e >= n.PE, !!o);
        }, 
        /*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */
        g.valueOf = function() {
            var t = this, e = t.constructor;
            if (!0 === e.strict) throw Error(p + "valueOf disallowed");
            return j(t, t.e <= e.NE || t.e >= e.PE, !0);
        };
        // Export
        (
        /*
 * Create and return a Big constructor.
 */
        function t() {
            /*
   * The Big constructor and exported function.
   * Create and return a new instance of a Big number object.
   *
   * n {number|string|Big} A numeric value.
   */
            function e(r) {
                var n = this;
                // Enable constructor usage without new.
                                if (!(n instanceof e)) return r === w ? t() : new e(r);
                // Duplicate.
                                if (r instanceof e) n.s = r.s, n.e = r.e, n.c = r.c.slice(); else {
                    if ("string" != typeof r) {
                        if (!0 === e.strict && "bigint" != typeof r) throw TypeError(v + "value");
                        // Minus zero?
                                                r = 0 === r && 1 / r < 0 ? "-0" : String(r);
                    }
                    !
                    /*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */
                    function(t, e) {
                        var r, n, o;
                        if (!O.test(e)) throw Error(v + "number");
                        // Determine sign.
                                                // Decimal point?
                        t.s = "-" == e.charAt(0) ? (e = e.slice(1), -1) : 1, (r = e.indexOf(".")) > -1 && (e = e.replace(".", ""));
                        // Exponential form?
                                                (n = e.search(/e/i)) > 0 ? (
                        // Determine exponent.
                        r < 0 && (r = n), r += +e.slice(n + 1), e = e.substring(0, n)) : r < 0 && (
                        // Integer.
                        r = e.length);
                        // Determine leading zeros.
                        for (o = e.length, n = 0; n < o && "0" == e.charAt(n); ) ++n;
                        if (n == o) 
                        // Zero.
                        t.c = [ t.e = 0 ]; else {
                            // Determine trailing zeros.
                            for (;o > 0 && "0" == e.charAt(--o); ) ;
                            // Convert string to array of digits without leading/trailing zeros.
                            for (t.e = r - n - 1, t.c = [], r = 0; n <= o; ) t.c[r++] = +e.charAt(n++);
                        }
                    }(n, r);
                }
                // Retain a reference to this Big constructor.
                // Shadow Big.prototype.constructor which points to Object.
                                n.constructor = e;
            }
            return e.prototype = g, e.DP = 20, e.RM = 1, e.NE = -7, e.PE = 21, e.strict = false, 
            e.roundDown = 0, e.roundHalfUp = 1, e.roundHalfEven = 2, e.roundUp = 3, e;
        })();
        /// <reference types="https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts" />
        /* harmony default export */        // ./node_modules/trading-signals/dist/error/NotEnoughDataError.js
        function P(t) {
            return P = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, P(t);
        }
        function _(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, N(n.key), n);
            }
        }
        function N(t) {
            var e = function(t, e) {
                if ("object" != P(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != P(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == P(e) ? e : e + "";
        }
        function T(t, e, r) {
            return e = k(e), function(t, e) {
                if (e && ("object" == P(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, E() ? Reflect.construct(e, r || [], k(t).constructor) : e.apply(t, r));
        }
        function A(t) {
            var e = "function" == typeof Map ? new Map : void 0;
            return A = function(t) {
                if (null === t || !function(t) {
                    try {
                        return -1 !== Function.toString.call(t).indexOf("[native code]");
                    } catch (e) {
                        return "function" == typeof t;
                    }
                }(t)) return t;
                if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, r);
                }
                function r() {
                    return function(t, e, r) {
                        if (E()) return Reflect.construct.apply(null, arguments);
                        var n = [ null ];
                        n.push.apply(n, e);
                        var o = new (t.bind.apply(t, n));
                        return r && x(o, r.prototype), o;
                    }(t, arguments, k(this).constructor);
                }
                return r.prototype = Object.create(t.prototype, {
                    constructor: {
                        value: r,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), x(r, t);
            }, A(t);
        }
        function E() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (E = function() {
                return !!t;
            })();
        }
        function x(t, e) {
            return x = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, x(t, e);
        }
        function k(t) {
            return k = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, k(t);
        }
        var I =  function(t) {
            function e() {
                var t, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Not enough data";
                return function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, e), t = T(this, e, [ r ]), Object.setPrototypeOf(t, (this instanceof e ? this.constructor : void 0).prototype), 
                t.name = "NotEnoughDataError", t;
            }
            return function(t, e) {
                if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                t.prototype = Object.create(e && e.prototype, {
                    constructor: {
                        value: t,
                        writable: !0,
                        configurable: !0
                    }
                }), Object.defineProperty(t, "prototype", {
                    writable: !1
                }), e && x(t, e);
            }(e, t), r = e, n && _(r.prototype, n), o && _(r, o), Object.defineProperty(r, "prototype", {
                writable: !1
            }), r;
            var r, n, o;
        }( A(Error));
        // ./node_modules/trading-signals/dist/Indicator.js
        function M(t) {
            return M = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, M(t);
        }
        function D(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function R(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, L(n.key), n);
            }
        }
        function C(t, e, r) {
            return e && R(t.prototype, e), r && R(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function F(t, e, r) {
            return (e = L(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function L(t) {
            var e = function(t, e) {
                if ("object" != M(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != M(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == M(e) ? e : e + "";
        }
        var B =  function() {
            return C((function t() {
                D(this, t), F(this, "previousHighest", void 0), F(this, "highest", void 0), F(this, "previousLowest", void 0), 
                F(this, "lowest", void 0), F(this, "previousResult", void 0), F(this, "result", void 0);
            }), [ {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "setResult",
                value: function(t, e) {
                    return e && (this.highest = this.previousHighest, this.lowest = this.previousLowest, 
                    this.result = this.previousResult), void 0 === this.highest ? this.highest = t : t > this.highest ? (this.previousHighest = this.highest, 
                    this.highest = t) : this.previousHighest = this.highest, void 0 === this.lowest ? this.lowest = t : t < this.lowest ? (this.previousLowest = this.lowest, 
                    this.lowest = t) : this.previousLowest = this.lowest, this.previousResult = this.result, 
                    this.result = t;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/MA/MovingAverage.js
        function H(t) {
            return H = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, H(t);
        }
        function V(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function U(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Z(n.key), n);
            }
        }
        function $(t, e, r) {
            return e && U(t.prototype, e), r && U(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function q(t, e, r) {
            return e = G(e), function(t, e) {
                if (e && ("object" == H(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, z() ? Reflect.construct(e, r || [], G(t).constructor) : e.apply(t, r));
        }
        function z() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (z = function() {
                return !!t;
            })();
        }
        function G(t) {
            return G = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, G(t);
        }
        function Y(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && K(t, e);
        }
        function K(t, e) {
            return K = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, K(t, e);
        }
        function J(t, e, r) {
            return (e = Z(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Z(t) {
            var e = function(t, e) {
                if ("object" != H(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != H(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == H(e) ? e : e + "";
        }
        var Q =  function(t) {
            function e(t) {
                var r;
                return V(this, e), J(r = q(this, e), "interval", void 0), r.interval = t, r;
            }
            return Y(e, t), $(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "replace",
                value: function(t) {
                    return this.update(t, !0);
                }
            } ]);
        }(B);
        // ./node_modules/trading-signals/dist/SMA/SMA.js
        function W(t) {
            return W = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, W(t);
        }
        function X(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function tt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, lt(n.key), n);
            }
        }
        function et(t, e, r) {
            return e && tt(t.prototype, e), r && tt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function rt(t, e, r) {
            return e = ot(e), function(t, e) {
                if (e && ("object" == W(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, nt() ? Reflect.construct(e, r || [], ot(t).constructor) : e.apply(t, r));
        }
        function nt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (nt = function() {
                return !!t;
            })();
        }
        function ot(t) {
            return ot = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, ot(t);
        }
        function it(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && at(t, e);
        }
        function at(t, e) {
            return at = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, at(t, e);
        }
        function ut(t, e, r) {
            return (e = lt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function lt(t) {
            var e = function(t, e) {
                if ("object" != W(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != W(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == W(e) ? e : e + "";
        }
        var ct =  function(t) {
            function e() {
                var t;
                X(this, e);
                for (var r = arguments.length, n = new Array(r), o = 0; o < r; o++) n[o] = arguments[o];
                return ut(t = rt(this, e, [].concat(n)), "prices", []), t;
            }
            return it(e, t), et(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t), 
                    this.prices.length > this.interval && this.prices.shift(), this.prices.length === this.interval) {
                        var r = this.prices.reduce((function(t, e) {
                            return t + e;
                        }), 0);
                        return this.setResult(r / this.prices.length, e);
                    }
                }
            } ]);
        }(Q);
        // ./node_modules/trading-signals/dist/WSMA/WSMA.js
        function st(t) {
            return st = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, st(t);
        }
        function ft(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function yt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, wt(n.key), n);
            }
        }
        function ht(t, e, r) {
            return e && yt(t.prototype, e), r && yt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function pt(t, e, r) {
            return e = mt(e), function(t, e) {
                if (e && ("object" == st(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, vt() ? Reflect.construct(e, r || [], mt(t).constructor) : e.apply(t, r));
        }
        function vt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (vt = function() {
                return !!t;
            })();
        }
        function mt(t) {
            return mt = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, mt(t);
        }
        function dt(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && bt(t, e);
        }
        function bt(t, e) {
            return bt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, bt(t, e);
        }
        function gt(t, e, r) {
            return (e = wt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function wt(t) {
            var e = function(t, e) {
                if ("object" != st(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != st(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == st(e) ? e : e + "";
        }
        var Ot =  function(t) {
            function e(t) {
                var r;
                return ft(this, e), gt(r = pt(this, e), "interval", void 0), gt(r, "indicator", void 0), 
                gt(r, "smoothingFactor", void 0), r.interval = t, r.indicator = new ct(t), r.smoothingFactor = 1 / r.interval, 
                r;
            }
            return dt(e, t), ht(e, [ {
                key: "updates",
                value: function(t) {
                    var e = this;
                    return t.forEach((function(t) {
                        return e.update(t);
                    })), this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], r = this.indicator.update(t);
                    if (e && void 0 !== this.previousResult) {
                        var n = (t - this.previousResult) * this.smoothingFactor;
                        return this.setResult(n + this.previousResult, e);
                    }
                    if (!e && void 0 !== this.result) {
                        var o = (t - this.result) * this.smoothingFactor;
                        return this.setResult(o + this.result, e);
                    }
                    if (void 0 === this.result && void 0 !== r) return this.setResult(r, e);
                }
            } ]);
        }(B);
        function St(t) {
            return t.length ? t.reduce((function(t, e) {
                return t + e;
            }), 0) / t.length : 0;
        }
        // ./node_modules/trading-signals/dist/BBANDS/BollingerBands.js
        function jt(t) {
            return jt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, jt(t);
        }
        function Pt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function _t(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, At(n.key), n);
            }
        }
        function Nt(t, e, r) {
            return e && _t(t.prototype, e), r && _t(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Tt(t, e, r) {
            return (e = At(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function At(t) {
            var e = function(t, e) {
                if ("object" != jt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != jt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == jt(e) ? e : e + "";
        }
        var Et =  function() {
            return Nt((function t(e) {
                var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                Pt(this, t), Tt(this, "interval", void 0), Tt(this, "deviationMultiplier", void 0), 
                Tt(this, "prices", []), Tt(this, "result", void 0), this.interval = e, this.deviationMultiplier = r;
            }), [ {
                key: "update",
                value: function(t) {
                    if (this.prices.push(t), this.prices.length > this.interval) {
                        this.prices.shift();
                        var e = St(this.prices), r = function(t, e) {
                            var r = e || St(t), n = St(t.map((function(t) {
                                return t - r;
                            })).map((function(t) {
                                return t * t;
                            })));
                            return Math.sqrt(n);
                        }(this.prices, e);
                        return this.result = {
                            lower: e - r * this.deviationMultiplier,
                            middle: e,
                            upper: e + r * this.deviationMultiplier
                        };
                    }
                }
            }, {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/EMA/EMA.js
        function xt(t) {
            return xt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, xt(t);
        }
        function kt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function It(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Ht(n.key), n);
            }
        }
        function Mt(t, e, r) {
            return e && It(t.prototype, e), r && It(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Dt(t, e, r) {
            return e = Ct(e), function(t, e) {
                if (e && ("object" == xt(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, Rt() ? Reflect.construct(e, r || [], Ct(t).constructor) : e.apply(t, r));
        }
        function Rt() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (Rt = function() {
                return !!t;
            })();
        }
        function Ct(t) {
            return Ct = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, Ct(t);
        }
        function Ft(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && Lt(t, e);
        }
        function Lt(t, e) {
            return Lt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, Lt(t, e);
        }
        function Bt(t, e, r) {
            return (e = Ht(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Ht(t) {
            var e = function(t, e) {
                if ("object" != xt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != xt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == xt(e) ? e : e + "";
        }
        var Vt =  function(t) {
            function e(t) {
                var r;
                return kt(this, e), Bt(r = Dt(this, e, [ t ]), "interval", void 0), Bt(r, "pricesCounter", 0), 
                Bt(r, "weightFactor", void 0), r.interval = t, r.weightFactor = 2 / (r.interval + 1), 
                r;
            }
            return Ft(e, t), Mt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return e ? e && 0 === this.pricesCounter && this.pricesCounter++ : this.pricesCounter++, 
                    e && void 0 !== this.previousResult ? this.setResult(t * this.weightFactor + this.previousResult * (1 - this.weightFactor), e) : this.setResult(t * this.weightFactor + (void 0 !== this.result ? this.result : t) * (1 - this.weightFactor), e);
                }
            }, {
                key: "getResult",
                value: function() {
                    if (this.pricesCounter < this.interval) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    try {
                        return this.getResult(), !0;
                    } catch (t) {
                        return !1;
                    }
                }
            } ]);
        }(Q);
        // ./node_modules/trading-signals/dist/MACD/MACD.js
        function Ut(t) {
            return Ut = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ut(t);
        }
        function $t(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function qt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Yt(n.key), n);
            }
        }
        function zt(t, e, r) {
            return e && qt(t.prototype, e), r && qt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Gt(t, e, r) {
            return (e = Yt(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Yt(t) {
            var e = function(t, e) {
                if ("object" != Ut(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Ut(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Ut(e) ? e : e + "";
        }
        var Kt =  function() {
            return zt((function t(e, r, n) {
                $t(this, t), Gt(this, "short", void 0), Gt(this, "long", void 0), Gt(this, "signal", void 0), 
                Gt(this, "prices", []), Gt(this, "result", void 0), this.short = e, this.long = r, 
                this.signal = n;
            }), [ {
                key: "getResult",
                value: function() {
                    if (void 0 === this.result) throw new I;
                    return this.result;
                }
            }, {
                key: "isStable",
                get: function() {
                    return void 0 !== this.result;
                }
            }, {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    this.prices.length && e ? this.prices[this.prices.length - 1] = t : this.prices.push(t);
                    var r = this.short.update(t, e), n = this.long.update(t, e);
                    if (this.prices.length > this.long.interval && this.prices.shift(), this.prices.length === this.long.interval) {
                        var o = r - n, i = this.signal.update(o, e);
                        return this.result = {
                            histogram: o - i,
                            macd: o,
                            signal: i
                        };
                    }
                }
            } ]);
        }();
        // ./node_modules/trading-signals/dist/RSI/RSI.js
        function Jt(t) {
            return Jt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Jt(t);
        }
        function Zt(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }
        function Qt(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, ie(n.key), n);
            }
        }
        function Wt(t, e, r) {
            return e && Qt(t.prototype, e), r && Qt(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
        }
        function Xt(t, e, r) {
            return e = ee(e), function(t, e) {
                if (e && ("object" == Jt(e) || "function" == typeof e)) return e;
                if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                return function(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }(t);
            }(t, te() ? Reflect.construct(e, r || [], ee(t).constructor) : e.apply(t, r));
        }
        function te() {
            try {
                var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            } catch (t) {}
            return (te = function() {
                return !!t;
            })();
        }
        function ee(t) {
            return ee = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                return t.__proto__ || Object.getPrototypeOf(t);
            }, ee(t);
        }
        function re(t, e) {
            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
            t.prototype = Object.create(e && e.prototype, {
                constructor: {
                    value: t,
                    writable: !0,
                    configurable: !0
                }
            }), Object.defineProperty(t, "prototype", {
                writable: !1
            }), e && ne(t, e);
        }
        function ne(t, e) {
            return ne = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                return t.__proto__ = e, t;
            }, ne(t, e);
        }
        function oe(t, e, r) {
            return (e = ie(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function ie(t) {
            var e = function(t, e) {
                if ("object" != Jt(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Jt(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == Jt(e) ? e : e + "";
        }
        var ae =  function(t) {
            function e(t) {
                var r, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ot;
                return Zt(this, e), oe(r = Xt(this, e), "interval", void 0), oe(r, "previousPrices", []), 
                oe(r, "avgGain", void 0), oe(r, "avgLoss", void 0), oe(r, "maxValue", 100), r.interval = t, 
                r.avgGain = new n(r.interval), r.avgLoss = new n(r.interval), r;
            }
            return re(e, t), Wt(e, [ {
                key: "update",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.previousPrices.length && e ? this.previousPrices[this.previousPrices.length - 1] = t : this.previousPrices.push(t), 
                    !(this.previousPrices.length < 2)) {
                        var r = t, n = this.previousPrices[this.previousPrices.length - 2];
                        if (r > n ? (this.avgLoss.update(0, e), this.avgGain.update(t - n, e)) : (this.avgLoss.update(n - r, e), 
                        this.avgGain.update(0, e)), this.avgGain.isStable) {
                            var o = this.avgLoss.getResult();
                            if (0 === o) return this.setResult(100, e);
                            var i = this.avgGain.getResult() / o;
                            return this.setResult(this.maxValue - this.maxValue / (i + 1), e);
                        }
                    }
                }
            } ]);
        }(B);
        // ./src/oscillators/rsi.js
        function ue(t) {
            return ue = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, ue(t);
        }
        function le(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != ue(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != ue(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == ue(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var ce = {
            ema: Vt,
            sma: ct
        }, se = function(t, e, r, n, o) {
            var i = o.target, a = o.lag, u = t.verticalOhlcv, l = t.instances, c = t.priceBased, s = "string" == typeof i && u.hasOwnProperty(i) && "close" !== i ? "_".concat(i) : "", f = "".concat(r, "_").concat(n).concat(s);
            if (0 === e) {
                var y = t.len, h = t.arrayTypes;
                if (!u.hasOwnProperty(i)) throw new Error("Target property ".concat(i, " not found in verticalOhlcv for ").concat(r, "."));
                // Create the main moving average instance.
                                l[f] = {
                    maInstance: new ce[r](n)
                }, u[f] = new Float64Array(y).fill(NaN), c.add(f), a > 0 && t.lag([ f ], a), h[f] = "Float64Array";
            }
            // Retrieve the current price value.
                        var p = u[i][e], v = l[f].maInstance;
            // Update the moving average instance.
            v.update(p);
            var m = NaN;
            try {
                m = v.getResult();
            } catch (t) {
                m = NaN;
            }
            // Always push the MA value (even if NaN).
                        return t.pushToMain({
                index: e,
                key: f,
                value: m
            }), !0;
        };
        // ./src/moving-averages/macd.js
        function fe(t) {
            return fe = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, fe(t);
        }
        function ye(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != fe(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != fe(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == fe(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function he(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return pe(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? pe(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function pe(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var ve = "close";
        // ./src/moving-averages/donchianChannel.js
        function me(t) {
            return me = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, me(t);
        }
        function de(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function be(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != me(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != me(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == me(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function ge(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return we(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? we(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function we(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/moving-averages/bollingerBands.js
        function Oe(t) {
            return Oe = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Oe(t);
        }
        function Se(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function je(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != Oe(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != Oe(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == Oe(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        function Pe(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return _e(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _e(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function _e(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/utilities/numberUtilities.js
        function Ne(t) {
            return Ne = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ne(t);
        }
        // Helper to clean non-numeric characters (except "-" at the start and decimal point)
        var Te = {
            number: function(t) {
                return t;
            },
            numberCleanString: function(t) {
                return Number(t);
            },
            numberDirtyString: function(t) {
                return Number(t.replace(/(?!^-)[^0-9.]/g, ""));
            }
        }, Ae = function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            // 1) true numbers
                        if ("number" == typeof t && !Number.isNaN(t)) return "number";
            // 2) strings
                        if ("string" == typeof t) {
                var r = t.trim(), n = /^-?\d+(\.\d+)?$/;
                // a) clean numeric string: only digits and an optional single period
                if (n.test(r)) return "numberCleanString";
                // b) dirty numeric string: contains non-digits (dollar, commas, letters, etc.)
                //    but once you strip those out, you're left with a valid number
                                var o = r.replace(/[^0-9.]/g, "");
                if (o && n.test(o)) return "numberDirtyString";
            }
            if (e) throw new TypeError("Invalid input: expected a number or numeric string");
            return Ne(t);
        };
        // ./src/utilities/dateUtilities.js
        function Ee(t) {
            return Ee = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ee(t);
        }
        var xe = {
            dateObject: function(t) {
                return t;
            },
            dateMilliseconds: function(t) {
                return new Date(t);
            },
            dateSeconds: function(t) {
                return new Date(1e3 * t);
            },
            dateIncompleteDayString: function(t) {
                return new Date("".concat(t, "  00:00:00"));
            },
            dateCompleteDateString: function(t) {
                return new Date(t);
            }
        }, ke = function(t) {
            // Regex for a UTC Time Format where the string ends with "Z".
            var e = [ "Date -> object", "Milliseconds Timestamp -> integer", "Seconds Timestamp -> integer", "UTC Time Format (ISO 8601) -> string", "Including a Timezone Offset (ISO 8601) -> string", "Local Time Format (ISO 8601) -> string", "YYYY/MM/DD or YYYY-MM-DD -> string" ], r = function() {
                throw new Error('Invalid "'.concat(Ee(t), '" date value passed in selectDateFormatter. Supported formats: \n-').concat(e.join("\n- ")));
            };
            // Regex for a Timezone Offset Format,
            // which includes a plus or minus sign followed by HH:MM at the end.
                        if ("object" === Ee(t)) {
                if (t instanceof Date && !isNaN(t.valueOf())) return "dateObject";
                r();
            } else {
                if ("number" == typeof t) 
                // Use a numeric threshold based on the absolute value: typically,
                // if the absolute value is below 1e11, then it's a seconds timestamp.
                // Otherwise, it's a milliseconds timestamp.
                return Math.abs(t) < 1e11 ? "dateSeconds" : "dateMillseconds";
                if ("string" == typeof t) {
                    if (/^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$/i.test(t) || /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?([+-]\d{2}:\d{2})$/.test(t) || /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(?:\.\d+)?$/.test(t) && t.length > 10 || /^\d{4}\/\d{2}\/\d{2}$/.test(t)) return "dateCompleteDateString";
                    if (/^\d{4}-\d{2}-\d{2}$/.test(t)) return "dateIncompleteDayString";
                    r();
                } else r();
            }
        };
        // ./src/utilities/assignTypes.js
        function Ie(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return Me(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Me(t, e) : void 0;
                }
            }(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Me(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var De = new Set([ "open", "high", "low", "close" ]), Re = function(t, e) {
            return "Array" === t ? new Array(e).fill(null) : "Float64Array" === t ? new Float64Array(e).fill(NaN) : "Int32Array" === t ? new Int32Array(e).fill(NaN) : void 0;
        };
        // ./src/studies/lag.js
        function Ce(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || Le(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Fe(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = Le(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Le(t, e) {
            if (t) {
                if ("string" == typeof t) return Be(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Be(t, e) : void 0;
            }
        }
        function Be(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var He = function(t, e) {
            var r = t.instances, n = t.verticalOhlcv, o = t.len, i = t.arrayTypes, a = t.priceBased;
            if (0 === e) {
                var u, l = [], c = Fe(t.inputParams);
                try {
                    for (c.s(); !(u = c.n()).done; ) {
                        var s = u.value;
                        "lag" === s.key && l.push(s.params);
                    }
                } catch (t) {
                    c.e(t);
                } finally {
                    c.f();
                }
                for (var f = 0, y = l; f < y.length; f++) {
                    var h, p = Ce(y[f], 2), v = p[0], m = p[1], d = Fe(v);
                    try {
                        for (d.s(); !(h = d.n()).done; ) {
                            var b = h.value;
                            if (a.has(b)) for (var g = 1; g <= m; g++) a.add("".concat(b, "_lag_").concat(g));
                        }
                    } catch (t) {
                        d.e(t);
                    } finally {
                        d.f();
                    }
                }
                r.lag = {
                    lagParams: l
                };
            }
            var w, O = Fe(r.lag.lagParams);
            try {
                for (O.s(); !(w = O.n()).done; ) {
                    var S, j = Ce(w.value, 2), P = j[0], _ = j[1], N = Fe(P);
                    try {
                        for (N.s(); !(S = N.n()).done; ) {
                            var T = S.value, A = n[T];
                            // Initialize lagged arrays only on the first index
                            if (0 === e) for (var E = 1; E <= _; E++) {
                                var x = "".concat(T, "_lag_").concat(E);
                                if (!i.hasOwnProperty(T)) throw new Error('Lag processing invoked by "'.concat(T, '" expected arrayTypes to have a "').concat(T, '" property, but it wasn’t found.'));
                                n[x] = Re(i[T], o), i[x] = i[T];
                            }
                            // Populate lagged values
                                                        for (var k = 1; k <= _; k++) {
                                var I = "".concat(T, "_lag_").concat(k), M = e - k, D = M <= 0 || void 0 === A[M] ? null : A[M];
                                t.pushToMain({
                                    index: e,
                                    key: I,
                                    value: D
                                });
                            }
                        }
                    } catch (t) {
                        N.e(t);
                    } finally {
                        N.f();
                    }
                }
            } catch (t) {
                O.e(t);
            } finally {
                O.f();
            }
            return !0;
        };
        // ./src/studies/findCrosses.js
        function Ve(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = function(t, e) {
                    if (t) {
                        if ("string" == typeof t) return Ue(t, e);
                        var r = {}.toString.call(t).slice(8, -1);
                        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? Ue(t, e) : void 0;
                    }
                }(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function Ue(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function $e(t) {
            return $e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, $e(t);
        }
        function qe(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, ze(n.key), n);
            }
        }
        function ze(t) {
            var e = function(t, e) {
                if ("object" != $e(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != $e(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }(t, "string");
            return "symbol" == $e(e) ? e : e + "";
        }
        var Ge = function(t, e) {
            return t > e;
        }, Ye = function(t, e) {
            return t < e;
        }, Ke =  function() {
            return t = function t() {
                !function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), Object.assign(this, {
                    interval: 0,
                    prevState: .5,
                    prevFast: NaN,
                    prevSlow: NaN,
                    prevHigh: NaN,
                    prevLow: NaN,
                    areHighAndLowUndefined: !1,
                    crossIndexes: {
                        up: [],
                        down: []
                    }
                });
            }, (e = [ {
                key: "update",
                value: function(t, e) {
                    var r = e.fast, n = e.high, o = e.slow, i = e.low, a = this.prevState;
                    this.areHighAndLowUndefined || void 0 !== n && void 0 !== i || (this.areHighAndLowUndefined = !0), 
                    Number.isNaN(r) || Number.isNaN(o) || function(t, e) {
                        return t === e;
                    }(r, o) ? a = .5 : Ge(r, o) ? a = this.areHighAndLowUndefined ? 1 : [ i, o, this.prevLow, this.prevSlow ].every((function(t) {
                        return !Number.isNaN(t);
                    })) && Ye(i, o) && Ge(this.prevLow, this.prevSlow) ? 0 : 1 : Ye(r, o) && (a = this.areHighAndLowUndefined ? 0 : [ n, o, this.prevHigh, this.prevSlow ].every((function(t) {
                        return !Number.isNaN(t);
                    })) && Ge(n, o) && Ye(this.prevHigh, this.prevSlow) ? 1 : 0), .5 === a ? this.interval = 0 : 1 === a ? this.prevState <= .5 ? this.interval = 1 : this.interval++ : 0 === a && (this.prevState >= .5 ? this.interval = -1 : this.interval--), 
                    1 === this.interval && this.crossIndexes.up.push(t), -1 === this.interval && this.crossIndexes.down.push(t), 
                    //save prev state
                    Object.assign(this, {
                        prevState: a,
                        prevFast: r,
                        prevSlow: o,
                        prevHigh: n,
                        prevLow: i
                    });
                }
            }, {
                key: "getResult",
                value: function() {
                    return this.interval;
                }
            } ]) && qe(t.prototype, e), r && qe(t, r), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, r;
        }(), Je = function(t, e) {
            var r = t.verticalOhlcv, n = t.instances, o = t.len, i = t.arrayTypes, a = t.verticalOhlcvTempCols;
            if (0 === e) {
                var u = t.inputParams;
                n.crossPairsList = u.reduce((function(t, e) {
                    var r = e.key, n = e.params;
                    if ("crossPairs" === r) {
                        var o, i = Ve(n);
                        try {
                            for (i.s(); !(o = i.n()).done; ) {
                                var a, u = Ve(o.value);
                                try {
                                    for (u.s(); !(a = u.n()).done; ) {
                                        var l = a.value;
                                        t.push(l);
                                    }
                                } catch (t) {
                                    u.e(t);
                                } finally {
                                    u.f();
                                }
                            }
                        } catch (t) {
                            i.e(t);
                        } finally {
                            i.f();
                        }
                    }
                    return t;
                }), []);
            }
            var l, c = Ve(n.crossPairsList);
            try {
                for (c.s(); !(l = c.n()).done; ) {
                    var s = l.value, f = s.fast, y = s.slow;
                    if (null != f && null != y) {
                        var h = "".concat(f, "_x_").concat(y);
                        if (0 === e) {
                            if ("number" == typeof y && (a.add(y.toString()), r[y.toString()] = new Int32Array(o).fill(y)), 
                            "price" !== f && !r.hasOwnProperty(f)) throw Error('fast "'.concat(f, ' not found in crossPairs"'));
                            if (!r.hasOwnProperty(y)) throw Error('slow "'.concat(y, ' not found in crossPairs"'));
                            n[h] = new Ke, r[h] = new Int32Array(o).fill(NaN), i[h] = "Int32Array";
                        }
                        var p = void 0, v = void 0, m = void 0, d = void 0, b = void 0;
                        "price" === f ? (v = r.close[e], m = r.high[e], d = r.low[e], b = r[y][e], n[h].update(e, {
                            fast: v,
                            slow: b,
                            high: m,
                            low: d
                        })) : (p = r[f][e], b = r[y][e], n[h].update(e, {
                            fast: p,
                            slow: b
                        })), t.pushToMain({
                            index: e,
                            key: h,
                            value: n[h].getResult()
                        });
                    }
                }
            } catch (t) {
                c.e(t);
            } finally {
                c.f();
            }
        };
        // ./src/studies/dateTime.js
        function Ze(t) {
            return Ze = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Ze(t);
        }
        function Qe(t, e) {
            var r = Object.keys(t);
            if (Object.getOwnPropertySymbols) {
                var n = Object.getOwnPropertySymbols(t);
                e && (n = n.filter((function(e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                }))), r.push.apply(r, n);
            }
            return r;
        }
        function We(t, e, r) {
            return (e = function(t) {
                var e = function(t, e) {
                    if ("object" != Ze(t) || !t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                        var n = r.call(t, e || "default");
                        if ("object" != Ze(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }(t, "string");
                return "symbol" == Ze(e) ? e : e + "";
            }(e)) in t ? Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = r, t;
        }
        var Xe = function(t) {
            var e = t.getMonth(), r = t.getFullYear(), n = t.getHours(), o = t.getMinutes(), i = t.getDay(), a = t.getDate(), u = new Date(t.getFullYear(), t.getMonth(), 1).getDay();
            return {
                month: e,
                year: r,
                hour: n,
                minute: o,
                day_of_the_week: i,
                day_of_the_month: a,
                week_of_the_month: Math.ceil((a + u) / 7)
            };
        };
        // ./src/studies/scaler.js
        function tr(t) {
            return function(t) {
                if (Array.isArray(t)) return or(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || nr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function er(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = nr(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function rr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            /* General Scaler: supports "minmax" and "zscore" types */ (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || nr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function nr(t, e) {
            if (t) {
                if ("string" == typeof t) return or(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? or(t, e) : void 0;
            }
        }
        function or(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        // ./src/core-functions/mainLoop.js
        function ir(t) {
            return function(t) {
                if (Array.isArray(t)) return cr(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || lr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function ar(t, e) {
            var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
            if (!r) {
                if (Array.isArray(t) || (r = lr(t)) || e && t && "number" == typeof t.length) {
                    r && (t = r);
                    var n = 0, o = function() {};
                    return {
                        s: o,
                        n: function() {
                            return n >= t.length ? {
                                done: !0
                            } : {
                                done: !1,
                                value: t[n++]
                            };
                        },
                        e: function(t) {
                            throw t;
                        },
                        f: o
                    };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var i, a = !0, u = !1;
            return {
                s: function() {
                    r = r.call(t);
                },
                n: function() {
                    var t = r.next();
                    return a = t.done, t;
                },
                e: function(t) {
                    u = !0, i = t;
                },
                f: function() {
                    try {
                        a || null == r.return || r.return();
                    } finally {
                        if (u) throw i;
                    }
                }
            };
        }
        function ur(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }
            // Map indicator keys to their respective functions
            (t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || lr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function lr(t, e) {
            if (t) {
                if ("string" == typeof t) return cr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? cr(t, e) : void 0;
            }
        }
        function cr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var sr = {
            dateTime: function(t, e, r) {
                var n = r.lag, o = t.instances, i = t.verticalOhlcv;
                if (0 === e) {
                    var a = t.len, u = t.dateType, l = t.arrayTypes;
                    if (!u) throw Error('dateTime method found and invalid "date" in input ohlcv');
                    Object.assign(o, {
                        dateTime: {
                            prevDateStr: i.date[0],
                            sessionDailyIndexCount: 0,
                            sessionIntradayIndexCount: 0,
                            cachedDayInfo: i.date[0]
                        }
                    });
                    for (var c = [ "day_of_the_week", "day_of_the_month", "week_of_the_month", "hour", "month", "year", "session_daily_index", "session_intraday_index" ], s = 0, f = c; s < f.length; s++) {
                        l[f[s]] = "Int32Array";
                    }
                    Object.assign(i, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? Qe(Object(r), !0).forEach((function(e) {
                                We(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Qe(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, Object.fromEntries(c.map((function(t) {
                        return [ t, new Int32Array(a).fill(NaN) ];
                    }))))), n > 0 && t.lag(c, n);
                }
                var y = i.date[e], h = Xe(y), p = h.day_of_the_week, v = h.day_of_the_month, m = h.week_of_the_month, d = h.month, b = h.year, g = h.hour, w = y;
                w !== o.dateTime.prevDateStr && (o.dateTime.prevDateStr = w, o.dateTime.sessionDailyIndexCount++, 
                o.dateTime.sessionIntradayIndexCount = 0), t.pushToMain({
                    index: e,
                    key: "session_daily_index",
                    value: o.dateTime.sessionDailyIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "session_intraday_index",
                    value: o.dateTime.sessionIntradayIndexCount
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_week",
                    value: p
                }), t.pushToMain({
                    index: e,
                    key: "day_of_the_month",
                    value: v
                }), t.pushToMain({
                    index: e,
                    key: "week_of_the_month",
                    value: m
                }), t.pushToMain({
                    index: e,
                    key: "month",
                    value: d
                }), t.pushToMain({
                    index: e,
                    key: "year",
                    value: b
                }), t.pushToMain({
                    index: e,
                    key: "hour",
                    value: g
                }), o.dateTime.sessionIntradayIndexCount++;
            },
            rsi: function(t, e, r, n) {
                var o = n.target, i = n.lag, a = t.verticalOhlcv, u = t.instances, l = "close" === o ? "" : "_".concat(o), c = "rsi_".concat(r).concat(l), s = "rsi_sma_".concat(r).concat(l);
                // Initialization on the first index.
                if (0 === e) {
                    var f = t.crossPairsList, y = t.len, h = t.arrayTypes;
                    if (!a.hasOwnProperty(o)) throw new Error("Target property ".concat(o, " not found in verticalOhlcv for rsi."));
                    f.push({
                        fast: c,
                        slow: s,
                        isDefault: !0
                    }), Object.assign(u, le(le({}, c, new ae(r)), s, new ct(r))), Object.assign(a, le(le({}, c, new Float64Array(y).fill(NaN)), s, new Float64Array(y).fill(NaN)));
                    var p = [ c, s ];
                    i > 0 && t.lag(p, i);
                    for (var v = 0, m = p; v < m.length; v++) {
                        h[m[v]] = "Float64Array";
                    }
                }
                var d = a[o][e], b = NaN, g = NaN;
                // Update the RSI indicator.
                u[c].update(d);
                try {
                    b = u[c].getResult();
                } catch (t) {
                    b = NaN;
                }
                // Always push the RSI value, using NaN as a fallback.
                                t.pushToMain({
                    index: e,
                    key: c,
                    value: b
                }), 
                // Update the SMA indicator only if a valid RSI value is available.
                Number.isNaN(b) || u[s].update(b);
                try {
                    g = u[s].getResult();
                } catch (t) {
                    g = NaN;
                }
                // Always push the smoothed RSI value.
                                t.pushToMain({
                    index: e,
                    key: s,
                    value: g
                });
            },
            ema: se,
            sma: se,
            macd: function(t, e, r, n, o, i) {
                var a = i.target, u = i.lag, l = t.verticalOhlcv, c = t.instances, s = "".concat(r, "_").concat(n, "_").concat(o).concat(a === ve ? "" : "_".concat(a));
                // Initialization on the first index.
                if (0 === e) {
                    var f = t.inputParams, y = t.crossPairsList, h = t.priceBased, p = t.len, v = t.arrayTypes;
                    if (!l.hasOwnProperty(a)) throw new Error("Target property ".concat(a, " not found in verticalOhlcv for macd."));
                    var m, d = 0, b = he(f);
                    try {
                        for (b.s(); !(m = b.n()).done; ) {
                            "macd" === m.value.key && d++;
                        }
                        // Choose a display prefix based on the number of indicators.
                                        } catch (t) {
                        b.e(t);
                    } finally {
                        b.f();
                    }
                    var g = d > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", w = a === ve ? "".concat(g, "_diff") : "".concat(g, "_diff_").concat(a), O = a === ve ? "".concat(g, "_dea") : "".concat(g, "_dea_").concat(a), S = a === ve ? "".concat(g, "_histogram") : "".concat(g, "_histogram_").concat(a);
                    // Build the keys.
                                        y.push({
                        fast: w,
                        slow: O,
                        isDefault: !0
                    }), c.hasOwnProperty("macd") || (c.macd = {
                        numberOfIndicators: d,
                        settings: {}
                    }), c.macd.settings[s] = new Kt(new Vt(r), new Vt(n), new Vt(o)), Object.assign(l, ye(ye(ye({}, w, new Float64Array(p).fill(NaN)), O, new Float64Array(p).fill(NaN)), S, new Float64Array(p).fill(NaN))), 
                    [ w, O, S ].forEach((function(t) {
                        h.add(t);
                    }));
                    var j = [ w, O, S ];
                    u > 0 && t.lag(j, u);
                    for (var P = 0, _ = j; P < _.length; P++) {
                        v[_[P]] = "Float64Array";
                    }
                }
                var N = c.macd, T = N.numberOfIndicators, A = N.settings, E = T > 1 ? "macd_".concat(r, "_").concat(n, "_").concat(o) : "macd", x = a === ve ? "".concat(E, "_diff") : "".concat(E, "_diff_").concat(a), k = a === ve ? "".concat(E, "_dea") : "".concat(E, "_dea_").concat(a), I = a === ve ? "".concat(E, "_histogram") : "".concat(E, "_histogram_").concat(a), M = A[s], D = l[a][e];
                M.update(D);
                var R = {};
                try {
                    R = M.getResult();
                } catch (t) {
                    // If the result is unavailable, macdResult remains NaN.
                }
                // Always push values; use NaN as fallback when macdResult is missing.
                                return t.pushToMain({
                    index: e,
                    key: x,
                    value: R ? R.macd : NaN
                }), t.pushToMain({
                    index: e,
                    key: k,
                    value: R ? R.signal : NaN
                }), t.pushToMain({
                    index: e,
                    key: I,
                    value: R ? R.histogram : NaN
                }), !0;
            },
            relativeVolume: function(t, e, r, n) {
                var o = n.lag, i = "relative_volume_".concat(r), a = t.instances, u = t.verticalOhlcv;
                if (0 === e) {
                    var l = t.len, c = t.arrayTypes;
                    a[i] = {
                        instance: new ct(r),
                        prevRelativeVolumeSma: NaN
                    }, u[i] = new Float64Array(l).fill(NaN), o > 0 && t.lag([ i ], o), c[i] = "Float64Array";
                }
                var s = u.volume[e], f = a[i].instance;
                f.update(s);
                var y = NaN;
                try {
                    y = f.getResult();
                } catch (t) {}
                var h = a[i].prevRelativeVolumeSma, p = NaN;
                // Only calculate relative volume if both current SMA and previous SMA are valid numbers and prevSma is not zero.
                return Number.isNaN(y) || Number.isNaN(h) || (p = s / h), t.pushToMain({
                    index: e,
                    key: i,
                    value: p
                }), a[i].prevRelativeVolumeSma = y, !0;
            },
            donchianChannels: function(t, e, r, n, o) {
                var i = o.height, a = o.range, u = o.lag, l = "".concat(r, "_").concat(n), c = t.verticalOhlcv, s = t.instances, f = t.len;
                // Initialization: create output arrays and indicator instance on the first call.
                if (0 === e) {
                    var y, h = t.inputParams, p = t.priceBased, v = t.arrayTypes, m = 0, d = ge(h);
                    try {
                        for (d.s(); !(y = d.n()).done; ) {
                            "donchianChannels" === y.value.key && m++;
                        }
                    } catch (t) {
                        d.e(t);
                    } finally {
                        d.f();
                    }
                    var b = m > 1 ? "donchian_channel_".concat(l) : "donchian_channel", g = [ "".concat(b, "_upper"), "".concat(b, "_basis"), "".concat(b, "_lower") ];
                    i && g.push("".concat(b, "_height")), s.hasOwnProperty("donchian_channel") || (s.donchian_channel = {
                        numberOfIndicators: m,
                        settings: {}
                    });
                    // Set up additional arrays for each range property.
                    var w, O = ge(a);
                    try {
                        for (O.s(); !(w = O.n()).done; ) {
                            var S = w.value;
                            if (!(S in c) || !p.has(S)) throw new Error('Invalid range item value "'.concat(S, '" property for donchianChannels. Only price based key names are accepted:\n').concat(JSON.stringify(p)));
                            g.push("".concat(b, "_range_").concat(S));
                        }
                    } catch (t) {
                        O.e(t);
                    } finally {
                        O.f();
                    }
                    var j = Object.fromEntries(g.map((function(t) {
                        return [ t, new Float64Array(f).fill(NaN) ];
                    })));
                    Object.assign(c, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? de(Object(r), !0).forEach((function(e) {
                                be(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : de(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, j)), u > 0 && t.lag(g, u), [ "".concat(b, "_upper"), "".concat(b, "_basis"), "".concat(b, "_lower") ].forEach((function(t) {
                        p.add(t);
                    })), s.donchian_channel.settings[l] = {
                        maxDeque: [],
                        // will hold indices for highs in descending order
                        minDeque: []
                    };
                    for (var P = 0, _ = g; P < _.length; P++) {
                        v[_[P]] = "Float64Array";
                    }
                }
                var N = s.donchian_channel.numberOfIndicators > 1 ? "donchian_channel_".concat(l) : "donchian_channel", T = s.donchian_channel.settings[l], A = T.maxDeque, E = T.minDeque, x = e - n, k = x + 1, I = k - r;
                // window: [startIdx, endIdx)
                // If the window is not fully available, push NaN values for all computed outputs.
                if (I < 0 || k > f) {
                    t.pushToMain({
                        index: e,
                        key: "".concat(N, "_upper"),
                        value: NaN
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(N, "_basis"),
                        value: NaN
                    }), t.pushToMain({
                        index: e,
                        key: "".concat(N, "_lower"),
                        value: NaN
                    }), i && t.pushToMain({
                        index: e,
                        key: "".concat(N, "_height"),
                        value: NaN
                    });
                    var M, D = ge(a);
                    try {
                        for (D.s(); !(M = D.n()).done; ) {
                            var R = M.value;
                            t.pushToMain({
                                index: e,
                                key: "".concat(N, "_range_").concat(R),
                                value: NaN
                            });
                        }
                    } catch (t) {
                        D.e(t);
                    } finally {
                        D.f();
                    }
                    return !0;
                }
                // **Update the maximum deque:**
                for (var C = c.high, F = c.low; A.length && A[0] < I; ) A.shift();
                for (;A.length && C[A[A.length - 1]] <= C[x]; ) A.pop();
                // **Update the minimum deque:**
                for (A.push(x); E.length && E[0] < I; ) E.shift();
                for (;E.length && F[E[E.length - 1]] >= F[x]; ) E.pop();
                E.push(x);
                // Retrieve computed values with safety checks.
                var L = A.length ? C[A[0]] : NaN, B = E.length ? F[E[0]] : NaN, H = Number.isNaN(L) || Number.isNaN(B) ? NaN : (L + B) / 2;
                // Process height if enabled.
                if (
                // Always push the main indicator values.
                t.pushToMain({
                    index: e,
                    key: "".concat(N, "_upper"),
                    value: L
                }), t.pushToMain({
                    index: e,
                    key: "".concat(N, "_basis"),
                    value: H
                }), t.pushToMain({
                    index: e,
                    key: "".concat(N, "_lower"),
                    value: B
                }), i) {
                    var V = NaN;
                    Number.isNaN(L) || Number.isNaN(B) || (V = (L - B) / B), t.pushToMain({
                        index: e,
                        key: "".concat(N, "_height"),
                        value: V
                    });
                }
                // Process each range property.
                                var U, $ = ge(a);
                try {
                    for ($.s(); !(U = $.n()).done; ) {
                        var q = U.value, z = NaN, G = c[q][e];
                        Number.isNaN(G) || Number.isNaN(L) || Number.isNaN(B) || (z = (G - B) / (L - B)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(N, "_range_").concat(q),
                            value: z
                        });
                    }
                } catch (t) {
                    $.e(t);
                } finally {
                    $.f();
                }
                return !0;
            },
            bollingerBands: function(t, e, r, n, o) {
                var i, a, u, l, c, s, f, y = o.height, h = o.range, p = void 0 === h ? [] : h, v = o.target, m = o.lag, d = t.verticalOhlcv, b = t.instances, g = "close" === v ? "" : "_".concat(v), w = "".concat(r, "_").concat(n).concat(g);
                // Initialization on the first call.
                if (0 === e) {
                    var O = t.priceBased, S = t.inputParams, j = t.verticalOhlcv, P = t.len, _ = t.arrayTypes;
                    if (!(v in j)) throw new Error('bollingerBands could not find target "'.concat(v, '"'));
                    var N, T = 0, A = Pe(S);
                    try {
                        for (A.s(); !(N = A.n()).done; ) {
                            "bollingerBands" === N.value.key && T++;
                        }
                    } catch (t) {
                        A.e(t);
                    } finally {
                        A.f();
                    }
                    f = T > 1 ? "bollinger_bands_".concat(w) : "bollinger_bands".concat(g), 
                    // Only create the container if it doesn't already exist.
                    b.bollinger_bands || (b.bollinger_bands = {
                        numberOfIndicators: T,
                        settings: {}
                    }), 
                    // Add (or override) the indicator instance keyed by indicatorKey.
                    b.bollinger_bands.settings[w] = new Et(r, n);
                    var E = [ "".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower") ];
                    y && E.push("".concat(f, "_height"));
                    // Set up additional arrays for each range property.
                                        var x, k = Pe(p);
                    try {
                        for (k.s(); !(x = k.n()).done; ) {
                            var I = x.value;
                            if (!(I in j) || !O.has(I)) throw new Error('Invalid range item value "'.concat(I, '" property for bollingerBands. Only price based key names are accepted:\n').concat(JSON.stringify(O)));
                            E.push("".concat(f, "_range_").concat(I));
                        }
                    } catch (t) {
                        k.e(t);
                    } finally {
                        k.f();
                    }
                    var M = Object.fromEntries(E.map((function(t) {
                        return [ t, new Float64Array(P).fill(NaN) ];
                    })));
                    Object.assign(j, function(t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var r = null != arguments[e] ? arguments[e] : {};
                            e % 2 ? Se(Object(r), !0).forEach((function(e) {
                                je(t, e, r[e]);
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : Se(Object(r)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e));
                            }));
                        }
                        return t;
                    }({}, M)), m > 0 && t.lag(E, m), [ "".concat(f, "_upper"), "".concat(f, "_middle"), "".concat(f, "_lower") ].forEach((function(t) {
                        O.add(t);
                    }));
                    for (var D = 0, R = E; D < R.length; D++) {
                        _[R[D]] = "Float64Array";
                    }
                }
                // Derive prefix for subsequent calls if not set.
                                f || (f = b.bollinger_bands.numberOfIndicators > 1 ? "bollinger_bands_".concat(w) : "bollinger_bands".concat(g));
                var C = f, F = b.bollinger_bands.settings[w], L = d[v][e];
                // Update the indicator with the current value.
                                F.update(L);
                // Attempt to retrieve the result.
                var B = {};
                try {
                    B = F.getResult();
                } catch (t) {
                    // If not available, result stays {}.
                }
                // Use NaN fallbacks for the primary values.
                                var H = null !== (i = null === (a = B) || void 0 === a ? void 0 : a.upper) && void 0 !== i ? i : NaN, V = null !== (u = null === (l = B) || void 0 === l ? void 0 : l.middle) && void 0 !== u ? u : NaN, U = null !== (c = null === (s = B) || void 0 === s ? void 0 : s.lower) && void 0 !== c ? c : NaN;
                // Process height if requested.
                if (
                // Always push the indicator outputs.
                t.pushToMain({
                    index: e,
                    key: "".concat(C, "_upper"),
                    value: H
                }), t.pushToMain({
                    index: e,
                    key: "".concat(C, "_middle"),
                    value: V
                }), t.pushToMain({
                    index: e,
                    key: "".concat(C, "_lower"),
                    value: U
                }), y) {
                    var $ = NaN;
                    Number.isNaN(U) || Number.isNaN(H) || ($ = (H - U) / U), t.pushToMain({
                        index: e,
                        key: "".concat(C, "_height"),
                        value: $
                    });
                }
                // Process each range property.
                                var q, z = Pe(p);
                try {
                    for (z.s(); !(q = z.n()).done; ) {
                        var G = q.value, Y = NaN, K = d[G][e];
                        Number.isNaN(K) || Number.isNaN(U) || Number.isNaN(H) || (Y = (K - U) / (H - U)), 
                        t.pushToMain({
                            index: e,
                            key: "".concat(C, "_range_").concat(G),
                            value: Y
                        });
                    }
                } catch (t) {
                    z.e(t);
                } finally {
                    z.f();
                }
                return !0;
            },
            volumeOscillator: function(t, e, r, n, o) {
                var i = o.lag, a = t.verticalOhlcv, u = t.instances, l = a.volume[e], c = "volume_oscillator";
                if (0 === e) {
                    var s = t.crossPairsList, f = t.len, y = t.arrayTypes;
                    Object.assign(u, {
                        volume_oscillator: {
                            fastEMA: new Vt(r),
                            slowEMA: new Vt(n)
                        }
                    }), a[c] = new Float64Array(f).fill(NaN), s.push({
                        fast: c,
                        slow: 0,
                        isDefault: !0
                    }), i > 0 && t.lag([ c ], i), y[c] = "Float64Array";
                }
                var h = u[c], p = h.fastEMA, v = h.slowEMA;
                p.update(l), v.update(l);
                var m = NaN, d = NaN;
                try {
                    m = p.getResult();
                } catch (t) {}
                try {
                    d = v.getResult();
                } catch (t) {}
                var b = NaN;
                return Number.isNaN(m) || Number.isNaN(d) || (b = 100 * (m - d) / d), t.pushToMain({
                    index: e,
                    key: c,
                    value: b
                }), !0;
            },
            Scaler: function(t, e, r, n, o, i, a, 
            // used for minmax: [validMin, validMax]
            u) {
                var l = t.verticalOhlcv, c = t.instances, s = t.arrayTypes, f = "".concat(o, "_").concat(r), y = "";
                if (0 === e) {
                    var h = t.len, p = t.priceBased;
                    t.groups;
                    y = "".concat(f, "_group_").concat(n.join("_")), c.scaler = {
                        groupKeyLen: n.length,
                        groupKey: y,
                        windows: {}
                    };
                    var v, m = er(n);
                    try {
                        var d = function() {
                            var e = v.value;
                            if (!l.hasOwnProperty(e)) throw new Error('Target property "'.concat(e, '" not found in verticalOhlcv'));
                            if (!p.has(e)) throw new Error('Column "'.concat(e, '" is not priceBased and cannot be scaled.'));
                            var r = "".concat(f, "_").concat(e);
                            l[r] = new Float64Array(h).fill(NaN), s[r] = "Float64Array";
                            var n = i ? y : e;
                            if (c.scaler.windows[n] = [], i && (t.ScaledGroups[y] || (t.ScaledGroups[y] = []), 
                            t.ScaledGroups[y].push(r)), u > 0) {
                                if (i) {
                                    var o, a = Array.from({
                                        length: u
                                    }).map((function(t, e) {
                                        return "".concat(r, "_lag_").concat(e + 1);
                                    }));
                                    (o = t.ScaledGroups[y]).push.apply(o, tr(a));
                                }
                                t.lag([ r ], u);
                            }
                        };
                        for (m.s(); !(v = m.n()).done; ) d();
                    } catch (t) {
                        m.e(t);
                    } finally {
                        m.f();
                    }
                }
                var b = c.scaler.windows;
                y = c.scaler.groupKey;
                // update windows with current values
                var g, w = er(n);
                try {
                    for (w.s(); !(g = w.n()).done; ) {
                        var O = g.value, S = l[O][e], j = b[i ? y : O];
                        j.push(S), j.length > (i ? r * c.scaler.groupKeyLen : r) && j.shift();
                    }
                } catch (t) {
                    w.e(t);
                } finally {
                    w.f();
                }
                var P, _ = e + 1 >= r, N = er(n);
                // scale values once enough data
                                try {
                    var T = function() {
                        var r, n, u, c, s, h, p = P.value, v = l[p][e], m = "".concat(f, "_").concat(p), d = null;
                        if (_) {
                            var g = b[i ? y : p];
                            if ("minmax" === o) {
                                var w = Math.min.apply(Math, tr(g)), O = Math.max.apply(Math, tr(g));
                                r = v, n = w, u = O, c = rr(a, 2), s = c[0], h = c[1], d = (Math.min(Math.max(r, n), u) - n) / (u - n) * (h - s) + s;
                            } else {
                                if ("zscore" !== o) throw new Error('Unknown scaler type "'.concat(o, '"'));
                                var S = g.reduce((function(t, e) {
                                    return t + e;
                                }), 0) / g.length, j = g.reduce((function(t, e) {
                                    return t + Math.pow(e - S, 2);
                                }), 0) / g.length, N = Math.sqrt(j);
                                d = function(t, e, r) {
                                    return 0 === r ? 0 : (t - e) / r;
                                }(v, S, N);
                            }
                        }
                        t.pushToMain({
                            index: e,
                            key: m,
                            value: d
                        });
                    };
                    for (N.s(); !(P = N.n()).done; ) T();
                } catch (t) {
                    N.e(t);
                } finally {
                    N.f();
                }
            }
        }, fr = function(t, e) {
            var r = e.len, n = e.inputParams, i = e.priceBased, a = e.precisionMultiplier, u = e.arrayTypes, l = e.verticalOhlcv, c = e.verticalOhlcvKeyNames, s = e.inputTypes;
            !function(t, e) {
                if (!Array.isArray(t)) throw new Error('Property "inputParams" must be an "Array" or "Set".');
                var r, n = o(t);
                try {
                    for (n.s(); !(r = n.n()).done; ) {
                        var i, a = o(r.value.params);
                        try {
                            for (a.s(); !(i = a.n()).done; ) {
                                var u = i.value;
                                if ("number" == typeof u && u > e) throw console.log(u, e), new Error("At least one of the params of the indicator is greater than the input OHLCV length. Make sure to have enough datapoints in the input OHLCV.");
                            }
                        } catch (t) {
                            a.e(t);
                        } finally {
                            a.f();
                        }
                    }
                } catch (t) {
                    n.e(t);
                } finally {
                    n.f();
                }
            }(n, r);
            for (var f = 0, y = Object.keys(s); f < y.length; f++) {
                var h = y[f];
                l[h] = Re(u[h], r);
            }
            // Process each row in the input
                        for (var p = 0; p < r; p++) {
                for (var v = t[p], m = 0, d = Object.entries(s); m < d.length; m++) {
                    var b = ur(d[m], 2), g = b[0], w = b[1], O = v[g];
                    if (Te.hasOwnProperty(w)) {
                        var S = Te[w](O);
                        a > 1 && i.has(g) && (S *= a), e.pushToMain({
                            index: p,
                            key: g,
                            value: S
                        });
                    } else xe.hasOwnProperty(w) ? e.pushToMain({
                        index: p,
                        key: g,
                        value: xe[w](O)
                    }) : e.pushToMain({
                        index: p,
                        key: g,
                        value: O
                    });
                }
                // Run all indicator functions except for the ones processed later
                                var j, P = ar(n);
                try {
                    for (P.s(); !(j = P.n()).done; ) {
                        var _ = j.value, N = _.key, T = _.params;
                        "lag" !== N && "crossPairs" !== N && 
                        // resolve fn on-demand, no per-item object allocation here
                        sr[N].apply(sr, [ e, p ].concat(ir(T)));
                    }
                    // Process these indicators separately (ensuring their execution order)
                                } catch (t) {
                    P.e(t);
                } finally {
                    P.f();
                }
                He(e, p), Je(e, p);
            }
            c.push.apply(c, ir(Object.keys(l)));
        }, yr = function(t, e) {
            for (var r = t.length, n = new ct(e), o = new Array(r), i = 0, a = 0, u = 0, l = 0; l < r; l++) if (n.update(t[l]), 
            n.isStable) {
                var c = n.getResult();
                o[l] = c, i += c, a += c * c, u++;
            } else o[l] = null;
            var s = i / u, f = a / u - s * s, y = Math.sqrt(f);
            return o.map((function(t) {
                return null !== t ? (t - s) / y : null;
            }));
        }, hr = function(t, e) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5;
            if (t.length !== e.length) throw new Error("Both arrays must have the same length");
            for (var n = yr(t, r), o = yr(e, r), i = t.length, a = [], u = 0, l = 0, c = 0, s = 0, f = 0, y = 0, h = -1, p = 0; p < i; p++) {
                if (null !== n[p] && null !== o[p]) {
                    h = p;
                    break;
                }
                a.push(0);
            }
            if (-1 === h) 
            // No valid data points
            return new Array(i).fill(0);
            for (var v = h; v < i; v++) {
                var m = n[v], d = o[v];
                if (null !== m && null !== d) if (u += m, l += d, c += m * d, s += m * m, f += d * d, 
                ++y < 2) a.push(0); else {
                    var b = y * c - u * l, g = Math.sqrt((y * s - u * u) * (y * f - l * l)), w = 0 === g ? 0 : b / g;
                    a.push(w);
                } else 
                // Reset sums and counts when encountering null values
                u = l = c = s = f = y = 0, a.push(0);
            }
            return a;
        };
        // ./src/utilities/verticalToHorizontal.js
        function pr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || function(t, e) {
                if (t) {
                    if ("string" == typeof t) return vr(t, e);
                    var r = {}.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? vr(t, e) : void 0;
                }
            }(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function vr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var mr = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = arguments.length > 1 ? arguments[1] : void 0, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = e.precisionMultiplier, o = e.priceBased, i = e.precision, a = e.verticalOhlcv, u = e.invalidValueIndex, l = e.len, c = e.verticalOhlcvKeyNames, s = e.verticalOhlcvTempCols;
            if (0 === c.length) return [];
            for (var f = t && u >= 0 ? u + 1 : 0, y = Math.max(f, r), h = l - y, p = Array.from({
                length: h
            }, (function() {
                return {};
            })), v = 0, m = Object.entries(a); v < m.length; v++) {
                var d = pr(m[v], 2), b = d[0], g = d[1];
                if (!s.has(b)) for (var w = o.has(b) && i, O = y; O < l; O++) p[O - y][b] = w ? g[O] / n : g[O];
            }
            return p;
        };
        function dr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || br(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function br(t, e) {
            if (t) {
                if ("string" == typeof t) return gr(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? gr(t, e) : void 0;
            }
        }
        function gr(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        var wr = function(t, e) {
            var r = t.precision, n = t.priceBased;
            if (!1 === r) return 1;
            var o, i = 1, a = // ./src/utilities/precisionMultiplier.js
            function(t, e) {
                var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (!r) {
                    if (Array.isArray(t) || (r = br(t)) || e && t && "number" == typeof t.length) {
                        r && (t = r);
                        var n = 0, o = function() {};
                        return {
                            s: o,
                            n: function() {
                                return n >= t.length ? {
                                    done: !0
                                } : {
                                    done: !1,
                                    value: t[n++]
                                };
                            },
                            e: function(t) {
                                throw t;
                            },
                            f: o
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var i, a = !0, u = !1;
                return {
                    s: function() {
                        r = r.call(t);
                    },
                    n: function() {
                        var t = r.next();
                        return a = t.done, t;
                    },
                    e: function(t) {
                        u = !0, i = t;
                    },
                    f: function() {
                        try {
                            a || null == r.return || r.return();
                        } finally {
                            if (u) throw i;
                        }
                    }
                };
            }(Object.entries(e).filter((function(t) {
                var e = dr(t, 2), r = e[0];
                e[1];
                return n.has(r);
            })).map((function(t) {
                var e = dr(t, 2);
                e[0];
                return e[1];
            })));
            try {
                for (a.s(); !(o = a.n()).done; ) {
                    var u = o.value, l = dr(String(u).split("."), 2)[1], c = void 0 === l ? "" : l, s = Math.max(4, c.length), f = s > 1 ? Math.pow(10, s - 1) : 1;
                    f > i && (i = f);
                }
            } catch (t) {
                a.e(t);
            } finally {
                a.f();
            }
            return i;
        };
        // ./index.js
        function Or(t) {
            return Or = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, Or(t);
        }
        function Sr(t) {
            return function(t) {
                if (Array.isArray(t)) return _r(t);
            }(t) || function(t) {
                if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
            }(t) || Pr(t) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function jr(t, e) {
            return function(t) {
                if (Array.isArray(t)) return t;
            }(t) || function(t, e) {
                var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (null != r) {
                    var n, o, i, a, u = [], l = !0, c = !1;
                    try {
                        if (i = (r = r.call(t)).next, 0 === e) {
                            if (Object(r) !== r) return;
                            l = !1;
                        } else for (;!(l = (n = i.call(r)).done) && (u.push(n.value), u.length !== e); l = !0) ;
                    } catch (t) {
                        c = !0, o = t;
                    } finally {
                        try {
                            if (!l && null != r.return && (a = r.return(), Object(a) !== a)) return;
                        } finally {
                            if (c) throw o;
                        }
                    }
                    return u;
                }
            }(t, e) || Pr(t, e) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
        }
        function Pr(t, e) {
            if (t) {
                if ("string" == typeof t) return _r(t, e);
                var r = {}.toString.call(t).slice(8, -1);
                return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _r(t, e) : void 0;
            }
        }
        function _r(t, e) {
            (null == e || e > t.length) && (e = t.length);
            for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
            return n;
        }
        function Nr(t, e) {
            for (var r = 0; r < e.length; r++) {
                var n = e[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), 
                Object.defineProperty(t, Tr(n.key), n);
            }
        }
        function Tr(t) {
            var e = function(t, e) {
                if ("object" != Or(t) || !t) return t;
                var r = t[Symbol.toPrimitive];
                if (void 0 !== r) {
                    var n = r.call(t, e || "default");
                    if ("object" != Or(n)) return n;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === e ? String : Number)(t);
            }
            /**
 * Class OHLCV_INDICATORS
 *
 * This class provides methods for calculating and managing technical indicators 
 * on financial OHLCV (Open, High, Low, Close, Volume) data. It enables users 
 * to parallel compute various technical indicators in 1 single loop.
 * OHLCV datasets.
 */ (t, "string");
            return "symbol" == Or(e) ? e : e + "";
        }
        var Ar =  function() {
            return t = function t(e) {
                var r = this, n = e.input, o = e.ticker, i = void 0 === o ? null : o, a = e.precision, u = void 0 === a || a, c = e.inputParams, f = void 0 === c ? null : c;
                if (function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), l(n, "input", null !== i ? "contructor ".concat(i) : "constuctor"), 
                0 === n.length) throw Error("input OHLCV must not be empty: " + i);
                s(u, "precision", "constructor"), this.firstRow = n[0];
                var y = function(t) {
                    for (var e = {}, r = {}, n = 0, o = Object.entries(t); n < o.length; n++) {
                        var i = Ie(o[n], 2), a = i[0], u = i[1];
                        if ("date" === a) e[a] = ke(u), r[a] = "Array"; else if ("volume" === a) e[a] = Ae(u, !0), 
                        r[a] = "Int32Array"; else if (De.has(a)) e[a] = Ae(u, !0), r[a] = "Float64Array"; else {
                            var l = Ae(u, !1);
                            e[a] = l, r[a] = "number" === l ? "Float64Array" : "Array";
                        }
                    }
                    return {
                        inputTypes: e,
                        arrayTypes: r
                    };
                }(this.firstRow), h = y.inputTypes, p = y.arrayTypes;
                if (this.inputTypes = h, this.arrayTypes = p, !this.firstRow.hasOwnProperty("close")) throw Error('input OHLCV array objects require at least "close" property: '.concat(i));
                return this.dateType = this.inputTypes.date ? this.inputTypes.date : null, this.isComputed = !1, 
                this.input = n, this.priceBased = new Set([ "open", "high", "low", "close" ]), this.len = n.length, 
                this.instances = {}, this.crossPairsList = [], this.verticalOhlcv = {}, this.verticalOhlcvKeyNames = [], 
                this.verticalOhlcvTempCols = new Set, this.utilities = {
                    correlation: hr
                }, this.invalidValueIndex = -1, this.precision = u, this.precisionMultiplier = wr(this, this.firstRow), 
                this.ScaledGroups = {}, null !== f && (validateInputParams(f, this.len), this.inputParams = f, 
                this.compute()), this.inputParams = [], this.pushToMain = function(t) {
                    var e = t.index, n = t.key, o = t.value;
                    return function(t) {
                        var e = t.main, r = t.index, n = t.key, o = t.value, i = e.verticalOhlcv;
                        return null == o || Number.isNaN(o) ? (e.invalidValueIndex = r, i[n][r] = o, !1) : (i[n][r] = o, 
                        !0);
                    }({
                        main: r,
                        index: e,
                        key: n,
                        value: o
                    });
                }, this;
            }, e = [ {
                key: "getDataAsCols",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.compute();
                    for (var e = this.precisionMultiplier, r = this.precision, n = this.invalidValueIndex, o = this.len, i = this.verticalOhlcv, a = this.priceBased, u = this.arrayTypes, l = this.verticalOhlcvTempCols, c = {}, s = t ? n + 1 : 0, f = o - s, y = 0, h = Object.entries(i); y < h.length; y++) {
                        var p = jr(h[y], 2), v = p[0], m = p[1];
                        if (!l.has(v)) {
                            var d = a.has(v) && r;
                            c[v] = Re(u[v], f);
                            for (var b = s; b < o; b++) c[v][b] = d ? m[b] / e : m[b];
                        }
                    }
                    return c;
                }
            }, {
                key: "getData",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    //getData method returns the last object (row) of the new OHLCV with indicators: {open, high, low, close, rsi_14, bollinger_bands_upper}
                                        return this.compute(), mr(t, this, 0);
                }
            }, {
                key: "getLastValues",
                value: function() {
                    return this.compute(), mr(!1, this, this.len - 1)[0];
                }
            }, {
                key: "compute",
                value: function() {
                    // If we've already computed, bail out immediately
                    return this.isComputed || (
                    // Mark as “in progress”
                    this.isComputed = !1, 
                    // Figure out whether there’s a date field in the inputs
                    // Only run the full loop once (or when new data appears later,
                    // if you extend this to reset isComputed elsewhere)
                    this.len > 0 && (fr(this.input, this), this.isComputed = !0, 
                    //flushing after mainLoop
                    this.input = [], this.instances = {}, this.firstRow = [])), this;
                }
            }, {
                key: "crossPairs",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = "crossPairs";
                    return u(this), l(t, "arr", e), this.crossPairsList = [].concat(Sr(this.crossPairsList), Sr(t)), 
                    this.inputParams.push({
                        key: e,
                        params: [ this.crossPairsList ]
                    }), this;
                }
            }, {
                key: "lag",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [ "close" ], e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, r = "lag";
                    u(this), l(t, "colKeys", r), f(e, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "lookback", r), this.inputParams.push({
                        key: r,
                        params: [ t, e ]
                    });
                    var n, o = function(t, e) {
                        var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                        if (!r) {
                            if (Array.isArray(t) || (r = Pr(t)) || e && t && "number" == typeof t.length) {
                                r && (t = r);
                                var n = 0, o = function() {};
                                return {
                                    s: o,
                                    n: function() {
                                        return n >= t.length ? {
                                            done: !0
                                        } : {
                                            done: !1,
                                            value: t[n++]
                                        };
                                    },
                                    e: function(t) {
                                        throw t;
                                    },
                                    f: o
                                };
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        }
                        var i, a = !0, u = !1;
                        return {
                            s: function() {
                                r = r.call(t);
                            },
                            n: function() {
                                var t = r.next();
                                return a = t.done, t;
                            },
                            e: function(t) {
                                u = !0, i = t;
                            },
                            f: function() {
                                try {
                                    a || null == r.return || r.return();
                                } finally {
                                    if (u) throw i;
                                }
                            }
                        };
                    }(t);
                    try {
                        for (o.s(); !(n = o.n()).done; ) {
                            var i = n.value;
                            this.priceBased.has(i) && this.priceBased.add(i);
                        }
                    } catch (t) {
                        o.e(t);
                    } finally {
                        o.f();
                    }
                    return this;
                }
            }, {
                key: "relativeVolume",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "relativeVolume";
                    if (!this.inputTypes.hasOwnProperty("volume")) throw new Error('If "relativeVolume" is called the input ohlcv must contain valid volume properties.');
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), c(e, "options", r);
                    var n = e.lag, o = void 0 === n ? 0 : n;
                    return f(o, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            lag: o
                        } ]
                    }), this;
                }
            }, {
                key: "ema",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "ema";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), c(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, a = void 0 === i ? 0 : i;
                    return f(a, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: a
                        } ]
                    }), this;
                }
            }, {
                key: "sma",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "sma";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), c(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, a = void 0 === i ? 0 : i;
                    return f(a, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", r), this.inputParams.push({
                        key: r,
                        params: [ r, t, {
                            target: o,
                            lag: a
                        } ]
                    }), this;
                }
            }, {
                key: "macd",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 12, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 26, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 9, n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o = "macd";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fast", o), f(e, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "slow", o), f(r, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "signal", o), c(n, "options", o);
                    var i = n.target, a = void 0 === i ? "close" : i, l = n.lag, s = void 0 === l ? 0 : l;
                    return f(s, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", o), this.inputParams.push({
                        key: o,
                        params: [ t, e, r, {
                            target: a,
                            lag: s
                        } ]
                    }), this;
                }
            }, {
                key: "bollingerBands",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "bollingerBands";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), f(e, {
                        min: .01,
                        max: 50,
                        allowDecimals: !0
                    }, "stdDev", n), c(r, "options", n);
                    var o = r.target, i = void 0 === o ? "close" : o, a = r.height, y = void 0 !== a && a, h = r.range, p = void 0 === h ? [] : h, v = r.lag, m = void 0 === v ? 0 : v;
                    return l(p, "options.range", n), f(m, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", n), s(y, "options.height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            target: i,
                            height: y,
                            range: p,
                            lag: m
                        } ]
                    }), this;
                }
            }, {
                key: "rsi",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 14, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = "rsi";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", r), c(e, "options", r);
                    var n = e.target, o = void 0 === n ? "close" : n, i = e.lag, a = void 0 === i ? 0 : i;
                    return f(a, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", r), this.inputParams.push({
                        key: r,
                        params: [ t, {
                            target: o,
                            lag: a
                        } ]
                    }), this;
                }
            }, {
                key: "donchianChannels",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "donchianChannels";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", n), f(e, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "offset", n), c(r, "options", n);
                    var o = r.height, i = void 0 !== o && o, a = r.range, y = void 0 === a ? [] : a, h = r.lag, p = void 0 === h ? 0 : h;
                    return l(y, "options.range", n), f(p, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", n), s(i, "options.height", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            height: i,
                            range: y,
                            lag: p
                        } ]
                    }), this;
                }
            }, {
                key: "volumeOscillator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n = "volumeOscillator";
                    if (!this.inputTypes.hasOwnProperty("volume")) throw new Error('If "volumeOscillator" is called the input ohlcv must contain valid volume properties.');
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "fastSize", n), f(e, {
                        min: t,
                        max: this.len,
                        allowDecimals: !1
                    }, "slowSize", n), c(r, "options", n);
                    var o = r.lag, i = void 0 === o ? 0 : o;
                    return f(i, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", n), this.inputParams.push({
                        key: n,
                        params: [ t, e, {
                            lag: i
                        } ]
                    }), this;
                }
            }, {
                key: "dateTime",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = "dateTime";
                    u(this), c(t, "options", e);
                    var r = t.lag, n = void 0 === r ? 0 : r;
                    return f(n, {
                        min: 0,
                        max: this.len,
                        allowDecimals: !1
                    }, "options.lag", e), this.inputParams.push({
                        key: e,
                        params: [ {
                            lag: n
                        } ]
                    }), this;
                }
            }, {
                key: "Scaler",
                value: function(t, e, n) {
                    var o = "Scaler";
                    u(this), f(t, {
                        min: 1,
                        max: this.len,
                        allowDecimals: !1
                    }, "size", o), l(e, "colKeys", o);
                    var i = n.group, a = void 0 !== i && i, c = n.range, y = void 0 === c ? [ 0, 1 ] : c, h = n.lag, p = void 0 === h ? 0 : h, v = n.type, m = void 0 === v ? "minmax" : v;
                    return s(a, "options.group", o), function(t, e, n) {
                        if (l(t, e, n), 2 !== t.length) throw new Error('Invalid "'.concat(e, '" array length: expected 2 items, but got ').concat(t.length, ' in "').concat(n, ".").concat(e, '".'));
                        var o = r(t, 2), i = o[0], a = o[1];
                        if (f(i, {
                            min: -100,
                            max: a,
                            allowDecimals: !1
                        }, "min", n), f(a, {
                            min: i,
                            max: 100,
                            allowDecimals: !1
                        }, "max", n), i === a) throw new Error('Invalid "min" can not be equal to "max" property in "'.concat(n, ".").concat(e, '".'));
                    }(y, "options.range", o), function(t, e, r, n) {
                        if (l(t, "arrayOptions", "".concat(n, ".").concat(r, ".validateArrayOptions")), 
                        !t.includes(e.toString())) throw new Error('Param "'.concat(r, '" must be any of the following values [').concat(t.join(", "), '] in "').concat(n, '".'));
                    }([ "minmax", "zscore" ], m, "options.type", o), this.inputParams.push({
                        key: o,
                        params: [ t, e, m, a, y, p ]
                    }), this;
                }
            } ], e && Nr(t.prototype, e), n && Nr(t, n), Object.defineProperty(t, "prototype", {
                writable: !1
            }), t;
            var t, e, n;
        }();
    })(), OHLCV_INDICATORS = e;
})
/******/ ();